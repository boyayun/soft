###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.1.6676/W32 for ARM        30/Jan/2016  15:22:34
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\src\projects\_twr_emeter_demo\mk341ph.c
#    Command line =  
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\src\projects\_twr_emeter_demo\mk341ph.c
#        -D NDEBUG -lCN
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\Release\List\
#        -o
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\Release\Obj\
#        --debug --endian=little --cpu=Cortex-M0+ --no_mem_idioms -e --fpu=None
#        --dlib_config "D:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\..\..\..\..\build\iar_6_50\fraclib\
#        -I
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\..\..\..\..\build\iar_6_50\meterlib\
#        -I
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\..\..\..\..\src\fraclib\
#        -I
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\..\..\..\..\src\meterlib\
#        -I
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\..\..\..\..\src\common\
#        -I
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\..\..\..\..\src\drivers\
#        -I
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\..\..\..\..\src\freemaster\
#        -I
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\..\..\..\..\src\projects\_twr_emeter_demo\
#        -Oh --require_prototypes
#    List file    =  
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\Release\List\mk341ph.lst
#    Object file  =  
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\Release\Obj\mk341ph.o
#
###############################################################################

E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\src\projects\_twr_emeter_demo\mk341ph.c
      1          /**************************************************************************
      2          * Copyright (c) 2013 Freescale Semiconductor;
      3          * All Rights Reserved                       
      4          *************************************************************************** 
      5          * THIS SOFTWARE IS PROVIDED BY FREESCALE "AS IS" AND ANY EXPRESSED OR 
      6          * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES 
      7          * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  
      8          * IN NO EVENT SHALL FREESCALE OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
      9          * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
     10          * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
     11          * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
     12          * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
     13          * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING 
     14          * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF  
     15          * THE POSSIBILITY OF SUCH DAMAGE.
     16          ***************************************************************************//*!
     17          * @file      mk341ph.c
     18          * @author    R55013
     19          * @version   2.1.00.0
     20          * @date      Jun-09-2013
     21          * @brief     Main module of the MMK34 1-phase electricity meter Tower card demo
     22          * @notes  
     23          * 2.1.01.0- Ported to TWR-KM34Z50M as demo with limited functionality
     24          *           
     25          *
     26          * 2.1.00.0- Using 2.2 driver's release. Fixed tamper detection issue. Contains
     27          *           couple of conditional compilations required for compatibility with 
     28          *           gcc compiler.
     29          * 2.0.09.0- Using new metering library with Rogowski Coil extension. Use filter 
     30          *           based metering algorithm configuration tool rev. 1.0.12 and above.
     31          * 2.0.08.0- Updated metering library with APWR_OFS and RPWR_OFS; the power 
     32          *           offsets we're introduced to compensate crosstalk between current and 
     33          *           voltage channels - use configuration tool rev. 1.0.11 and above.
     34          *         - Based on updated subfolder structure. 
     35          * 2.0.07.0- Compacted filter-based metering library (the definition file can be 
     36          *           updated by the configuration tool). 
     37          *         - Ported to 2.0 silicon and based on 2.x software drivers.
     38          *         - Added opto-coupler pulse output interface (routed to XBAR_OUT[6])
     39          *         - Phase voltage scaled to Umax=410.0V 
     40          * 2.0.06.0- LCD driver configurations, configuring NMI_B pin as LCD27.
     41          * 2.0.05.0- On-chip peripherals accessed using Bit Manipulation Engine (BME).
     42          * 2.0.04.0- Updated LCD driver and panel configuration.
     43          * 2.0.03.0- Unused memory filled by "UDF #<imm8>" instruction. This defines a 
     44          *           permanently-undefined opcode (0xde00) that generates an 
     45          *           "undefined instruction exception" if execution is attempted.
     46          *         - Energy counters and screen index stored in a non-initialized on-chip
     47          *           RAM starting at address 0x20000000.
     48          *         - Added hardfault_isr() handler.
     49          *         - Reset pin configured as GPIO and driven low in normal operation to
     50          *           improve EMC susceptibility.
     51          * 2.0.02.0- MMA8491 forced to shutdown mode prior entering VLLS0_POR_ON mode. 
     52          *         - added high-resolution imp/kWh and imp/kVARh pulse outputs  
     53          * 2.0.01.0- ported to HW rev.B. Added FreeMASTER TSA via IR interface. Included 
     54          *           tamper detection and additional small improvements in algorithm and 
     55          *           firmware.
     56          ******************************************************************************/
     57          #include <string.h>
     58          #include <stdio.h>
     59          #include <math.h>
     60          #include "drivers.h"
     61          #include "lcd.h"
     62          #include "fraclib.h"
     63          #include "meterlib.h"
     64          #include "appconfig.h"
     65          #include "freemaster.h"
     66          #include "config.h"
     67          #include "meterlib1ph_cfg.h"      /* auto-generated algorithm definition file */
     68          #include "mk341ph.h"              /* application defines and macros           */
     69          
     70          /******************************************************************************
     71           * user data type defintions
     72           ******************************************************************************/  
     73          typedef void (*MENU_FCN )(void);  /* definition menu functions data type      */
     74          typedef void (*FMCMD_FCN)(void);  /* definition command functions data type   */
     75          
     76          /******************************************************************************
     77           * public function prototypes
     78           ******************************************************************************/
     79          /* hardfault exception handler prototype                                      */
     80          void hardfault_isr (void);
     81          
     82          /******************************************************************************
     83           * static function prototypes
     84           ******************************************************************************/
     85          /* initialization function prototypes                                         */
     86          static void norm_mode_hw_init (void);
     87          
     88          /* menu function prototypes                                                   */
     89          static void menu_disp_date   (void);
     90          static void menu_disp_time   (void);
     91          static void menu_disp_urms   (void);
     92          static void menu_disp_irms   (void);
     93          static void menu_disp_kW     (void);
     94          static void menu_disp_kVAR   (void);
     95          static void menu_disp_kVA    (void); 
     96          static void menu_disp_kWh    (void);
     97          static void menu_disp_kVARh  (void);
     98          static void menu_disp_freq   (void);
     99          static void menu_disp_vbat   (void);
    100          static void menu_disp_snum   (void);
    101          static void menu_disp_pnum1  (void);
    102          static void menu_disp_pnum2  (void);
    103          static void menu_disp_class  (void);
    104          
    105          /* command function prototypes                                                */
    106          static void fcmd_dummy_fcn   (void);
    107          static void fcmd_sw_reset    (void);
    108          static void fcmd_clr_counter (void);
    109          static void fcmd_clr_tampers (void);
    110          static void fcmd_set_clock   (void);
    111          static void fcmd_set_pulse1  (void);
    112          static void fcmd_set_pulse2  (void);
    113          static void fcmd_calibrate   (void);
    114          static void fcmd_save_config (void);
    115          
    116          /******************************************************************************
    117           * callback function prototypes
    118           ******************************************************************************/
    119          static void afech2_callback  (AFE_CH_CALLBACK_TYPE type, int32 result);
    120          static void button_callback  (PORT_CALLBACK_SRC src, uint8 pin);
    121          static void auxcalc_callback (void);
    122          static void display_callback (void);
    123          
    124          /******************************************************************************
    125           * static data definitions
    126           ******************************************************************************/
    127          static volatile const Frac64 kwh_pulses[] = 
    128          {
    129            KWH_PULS_NUM(1e2),KWH_PULS_NUM(2e2),KWH_PULS_NUM(5e2),KWH_PULS_NUM(1e3),
    130            KWH_PULS_NUM(2e3),KWH_PULS_NUM(5e3),KWH_PULS_NUM(1e4),KWH_PULS_NUM(2e4),
    131            KWH_PULS_NUM(5e4),KWH_PULS_NUM(1e5),KWH_PULS_NUM(2e5),KWH_PULS_NUM(5e5),
    132            KWH_PULS_NUM(1e6),KWH_PULS_NUM(2e6),KWH_PULS_NUM(4e6),KWH_PULS_NUM(6e6)
    133          };
    134          
    135          static volatile const Frac64 kvarh_pulses[] = 
    136          {
    137            KVARH_PULS_NUM(1e2),KVARH_PULS_NUM(2e2),KVARH_PULS_NUM(5e2),KVARH_PULS_NUM(1e3),
    138            KVARH_PULS_NUM(2e3),KVARH_PULS_NUM(5e3),KVARH_PULS_NUM(1e4),KVARH_PULS_NUM(2e4),
    139            KVARH_PULS_NUM(5e4),KVARH_PULS_NUM(1e5),KVARH_PULS_NUM(2e5),KVARH_PULS_NUM(5e5),
    140            KVARH_PULS_NUM(1e6),KVARH_PULS_NUM(2e6),KVARH_PULS_NUM(4e6),KVARH_PULS_NUM(6e6)
    141          };
    142          
    143          static MENU_FCN  menu_fcn[]= 
    144          {
    145            menu_disp_date,menu_disp_time,menu_disp_urms,menu_disp_irms,menu_disp_kW,
    146            menu_disp_kVAR,menu_disp_kVA,menu_disp_kWh,menu_disp_kVARh,menu_disp_freq,
    147            menu_disp_vbat,menu_disp_pnum1,menu_disp_pnum2,menu_disp_snum,menu_disp_class
    148          };
    149          
    150          static FMCMD_FCN fcmd_fcn[]= 
    151          { 
    152            fcmd_dummy_fcn,fcmd_sw_reset,fcmd_clr_counter,fcmd_clr_tampers,fcmd_set_clock,
    153            fcmd_set_pulse1,fcmd_set_pulse2,fcmd_calibrate,fcmd_save_config 
    154          };
    155          
    156          static volatile tMETERLIB1PH_DATA  mlib = METERLIB1PH_CFG;

   \                                 In section .bss, align 8
    157          static volatile double          wh, varh, urms, irms, w, var, va, umax, imax, freq, freqAVG;
   \                     wh:
   \   00000000                      DS8 8

   \                                 In section .bss, align 8
   \                     varh:
   \   00000000                      DS8 8

   \                                 In section .bss, align 4
    158          static volatile Frac32          u24_sample, i24_sample;
   \                     u24_sample:
   \   00000000                      DS8 4
   \                     i24_sample:
   \   00000004                      DS8 4

   \                                 In section .rodata, align 4, keep-with-next
    159          static const    uint32          pulses[]= 
   \                     pulses:
   \   00000000   0x00000064         DC32 100, 200, 500, 1000, 2000, 5000, 10000, 20000, 50000, 100000
   \              0x000000C8   
   \              0x000001F4   
   \              0x000003E8   
   \              0x000007D0   
   \              0x00001388   
   \              0x00002710   
   \              0x00004E20   
   \              0x0000C350   
   \              0x000186A0   
   \   00000028   0x00030D40         DC32 200000, 500000, 1000000, 2000000, 4000000, 6000000
   \              0x0007A120   
   \              0x000F4240   
   \              0x001E8480   
   \              0x003D0900   
   \              0x005B8D80   
    160          { 
    161            100l,200l,500l,1000l,2000l,5000l,10000l,20000l,50000l,100000l,200000l,500000l,
    162            1000000l,2000000l,4000000l,6000000l 
    163          };
    164          
    165          static          unsigned char            buf[20];
    166          static          tTIME           wTime, rTime;         
    167          static volatile int8            fcmd_idx    = 0;
    168          static volatile int8            pulse_index = 0;
    169          static          uint16          password    = 0;
    170          static          uint8           tamper_flags= 0;

   \                                 In section .bss, align 2
    171          static          uint16          reset_source= 0;
   \                     reset_source:
   \   00000000                      DS8 2
    172          
    173          /******************************************************************************
    174           * FreeMASTER's TSA definitions - begin
    175           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    176          FMSTR_TSA_TABLE_BEGIN(ctrl)
    177              FMSTR_TSA_RW_VAR(password,        FMSTR_TSA_UINT16)
    178              FMSTR_TSA_RW_VAR(pulse_index,     FMSTR_TSA_SINT8)
    179              FMSTR_TSA_RW_VAR(fcmd_idx,        FMSTR_TSA_SINT8)
    180              FMSTR_TSA_RW_VAR(ramcnt.menu_idx, FMSTR_TSA_UINT16)
    181              FMSTR_TSA_RW_VAR(ramcnt.pulse_out,FMSTR_TSA_UINT16)
    182              FMSTR_TSA_RW_VAR(wTime, FMSTR_TSA_USERTYPE(tTIME))
    183              FMSTR_TSA_STRUCT(tTIME)
    184              FMSTR_TSA_MEMBER(tTIME, sec,      FMSTR_TSA_UINT8)
    185              FMSTR_TSA_MEMBER(tTIME, min,      FMSTR_TSA_UINT8)    
    186              FMSTR_TSA_MEMBER(tTIME, hour,     FMSTR_TSA_UINT8)    
    187              FMSTR_TSA_MEMBER(tTIME, day,      FMSTR_TSA_UINT8)    
    188              FMSTR_TSA_MEMBER(tTIME, wday,     FMSTR_TSA_UINT8)    
    189              FMSTR_TSA_MEMBER(tTIME, mon,      FMSTR_TSA_UINT8)     
    190              FMSTR_TSA_MEMBER(tTIME, year,     FMSTR_TSA_UINT16)
    191          FMSTR_TSA_TABLE_END()  
   \                     FMSTR_TsaGetTable_ctrl: (+1)
   \   00000000   0x2800             CMP      R0,#+0
   \   00000002   0xD001             BEQ      ??FMSTR_TsaGetTable_ctrl_0
   \   00000004   0x21E0             MOVS     R1,#+224
   \   00000006   0x8001             STRH     R1,[R0, #+0]
   \                     ??FMSTR_TsaGetTable_ctrl_0: (+1)
   \   00000008   0x....             LDR      R0,??DataTable99
   \   0000000A   0x4770             BX       LR               ;; return

   \                                 In section .rodata, align 4, keep-with-next
   \   __absolute struct <unnamed> const FMSTR_TsaGetTable_ctrl::fmstr_tsatable[14]
   \                     ??fmstr_tsatable:
   \   00000000   0x........         DC32 `?<Constant "password">`, `?<Constant "\\341">`, password, 0BH
   \              0x........   
   \              0x........   
   \              0x0000000B   
   \   00000010   0x........         DC32 `?<Constant "pulse_index">`, `?<Constant "\\360">`, pulse_index
   \              0x........   
   \              0x........   
   \   0000001C   0x00000007         DC32 7H, `?<Constant "fcmd_idx">`, `?<Constant "\\360">`, fcmd_idx, 7H
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x00000007   
   \   00000030   0x........         DC32 `?<Constant "ramcnt.menu_idx">`, `?<Constant "\\341">`
   \              0x........   
   \   00000038   0x........         DC32 ramcnt + 8H, 0BH, `?<Constant "ramcnt.pulse_out">`
   \              0x0000000B   
   \              0x........   
   \   00000044   0x........         DC32 `?<Constant "\\341">`, ramcnt + 0AH, 0BH, `?<Constant "wTime">`
   \              0x........   
   \              0x0000000B   
   \              0x........   
   \   00000054   0x........         DC32 `?<Constant "tTIME">`, wTime, 23H, `?<Constant "tTIME">`, 0H, 0H
   \              0x........   
   \              0x00000023   
   \              0x........   
   \              0x00000000   
   \              0x00000000   
   \   0000006C   0x00000020         DC32 20H, `?<Constant "sec">`, `?<Constant "\\340">`, 0H, 6H
   \              0x........   
   \              0x........   
   \              0x00000000   
   \              0x00000006   
   \   00000080   0x........         DC32 `?<Constant "min">`, `?<Constant "\\340">`, 1H, 6H
   \              0x........   
   \              0x00000001   
   \              0x00000006   
   \   00000090   0x........         DC32 `?<Constant "hour">`, `?<Constant "\\340">`, 2H, 6H
   \              0x........   
   \              0x00000002   
   \              0x00000006   
   \   000000A0   0x........         DC32 `?<Constant "day">`, `?<Constant "\\340">`, 3H, 6H
   \              0x........   
   \              0x00000003   
   \              0x00000006   
   \   000000B0   0x........         DC32 `?<Constant "wday">`, `?<Constant "\\340">`, 4H, 6H
   \              0x........   
   \              0x00000004   
   \              0x00000006   
   \   000000C0   0x........         DC32 `?<Constant "mon">`, `?<Constant "\\340">`, 5H, 6H
   \              0x........   
   \              0x00000005   
   \              0x00000006   
   \   000000D0   0x........         DC32 `?<Constant "year">`, `?<Constant "\\341">`, 6H, 0AH
   \              0x........   
   \              0x00000006   
   \              0x0000000A   
    192          

   \                                 In section .text, align 2, keep-with-next
    193          FMSTR_TSA_TABLE_BEGIN(meas)
    194              FMSTR_TSA_RO_VAR(u24_sample,      FMSTR_TSA_FRAC32)
    195              FMSTR_TSA_RO_VAR(i24_sample,      FMSTR_TSA_FRAC32)
    196              FMSTR_TSA_RO_VAR(mlib.uDcb[1].yIIR,  FMSTR_TSA_FRAC32)  
    197              FMSTR_TSA_RO_VAR(mlib.iDcb[1].yIIR,  FMSTR_TSA_FRAC32)
    198              FMSTR_TSA_RO_VAR(wh,              FMSTR_TSA_DOUBLE)
    199              FMSTR_TSA_RO_VAR(varh,            FMSTR_TSA_DOUBLE)
    200              FMSTR_TSA_RO_VAR(urms,            FMSTR_TSA_DOUBLE)
    201              FMSTR_TSA_RO_VAR(irms,            FMSTR_TSA_DOUBLE)
    202              FMSTR_TSA_RO_VAR(w,               FMSTR_TSA_DOUBLE)
    203              FMSTR_TSA_RO_VAR(var,             FMSTR_TSA_DOUBLE)
    204              FMSTR_TSA_RO_VAR(va,              FMSTR_TSA_DOUBLE)
    205              FMSTR_TSA_RO_VAR(freq,            FMSTR_TSA_DOUBLE)  
    206              FMSTR_TSA_RO_VAR(ramcnt.wh_cnt,   FMSTR_TSA_UINT32)
    207              FMSTR_TSA_RO_VAR(ramcnt.varh_cnt, FMSTR_TSA_UINT32)  
    208          FMSTR_TSA_TABLE_END()    
   \                     FMSTR_TsaGetTable_meas: (+1)
   \   00000000   0x2800             CMP      R0,#+0
   \   00000002   0xD001             BEQ      ??FMSTR_TsaGetTable_meas_0
   \   00000004   0x21E0             MOVS     R1,#+224
   \   00000006   0x8001             STRH     R1,[R0, #+0]
   \                     ??FMSTR_TsaGetTable_meas_0: (+1)
   \   00000008   0x....             LDR      R0,??DataTable99_1
   \   0000000A   0x4770             BX       LR               ;; return

   \                                 In section .rodata, align 4, keep-with-next
   \   __absolute struct <unnamed> const FMSTR_TsaGetTable_meas::fmstr_tsatable[14]
   \                     ??fmstr_tsatable_1:
   \   00000000   0x........         DC32 `?<Constant "u24_sample">`, `?<Constant "\\366">`, u24_sample, 11H
   \              0x........   
   \              0x........   
   \              0x00000011   
   \   00000010   0x........         DC32 `?<Constant "i24_sample">`, `?<Constant "\\366">`, i24_sample, 11H
   \              0x........   
   \              0x........   
   \              0x00000011   
   \   00000020   0x........         DC32 `?<Constant "mlib.uDcb[1].yIIR">`, `?<Constant "\\366">`
   \              0x........   
   \   00000028   0x........         DC32 mlib + 48H, 21H, `?<Constant "mlib.iDcb[1].yIIR">`
   \              0x00000021   
   \              0x........   
   \   00000034   0x........         DC32 `?<Constant "\\366">`, mlib + 78H, 21H, `?<Constant "wh">`
   \              0x........   
   \              0x00000021   
   \              0x........   
   \   00000044   0x........         DC32 `?<Constant "\\373">`, wh, 21H, `?<Constant "varh">`
   \              0x........   
   \              0x00000021   
   \              0x........   
   \   00000054   0x........         DC32 `?<Constant "\\373">`, varh, 21H, `?<Constant "urms">`
   \              0x........   
   \              0x00000021   
   \              0x........   
   \   00000064   0x........         DC32 `?<Constant "\\373">`, urms, 21H, `?<Constant "irms">`
   \              0x........   
   \              0x00000021   
   \              0x........   
   \   00000074   0x........         DC32 `?<Constant "\\373">`, irms, 21H, `?<Constant "w">`
   \              0x........   
   \              0x00000021   
   \              0x........   
   \   00000084   0x........         DC32 `?<Constant "\\373">`, w, 21H, `?<Constant "var">`
   \              0x........   
   \              0x00000021   
   \              0x........   
   \   00000094   0x........         DC32 `?<Constant "\\373">`, var, 21H, `?<Constant "va">`
   \              0x........   
   \              0x00000021   
   \              0x........   
   \   000000A4   0x........         DC32 `?<Constant "\\373">`, va, 21H, `?<Constant "freq">`
   \              0x........   
   \              0x00000021   
   \              0x........   
   \   000000B4   0x........         DC32 `?<Constant "\\373">`, freq, 21H, `?<Constant "ramcnt.wh_cnt">`
   \              0x........   
   \              0x00000021   
   \              0x........   
   \   000000C4   0x........         DC32 `?<Constant "\\342">`, ramcnt, 11H
   \              0x........   
   \              0x00000011   
   \   000000D0   0x........         DC32 `?<Constant "ramcnt.varh_cnt">`, `?<Constant "\\342">`
   \              0x........   
   \   000000D8   0x........         DC32 ramcnt + 4H, 11H
   \              0x00000011   
    209          

   \                                 In section .text, align 2, keep-with-next
    210          FMSTR_TSA_TABLE_BEGIN(param)
    211              FMSTR_TSA_RO_VAR(ramcfg.wh_idx,   FMSTR_TSA_UINT16)
    212              FMSTR_TSA_RO_VAR(ramcfg.varh_idx, FMSTR_TSA_UINT16)
    213              FMSTR_TSA_RO_VAR(ramcfg.u_gain,   FMSTR_TSA_FRAC32)
    214              FMSTR_TSA_RO_VAR(ramcfg.i_gain,   FMSTR_TSA_FRAC32)
    215              FMSTR_TSA_RO_VAR(ramcfg.delay,    FMSTR_TSA_SINT16)
    216              FMSTR_TSA_RO_VAR(ramcfg.flag,     FMSTR_TSA_UINT16)  
    217          FMSTR_TSA_TABLE_END()     
   \                     FMSTR_TsaGetTable_param: (+1)
   \   00000000   0x2800             CMP      R0,#+0
   \   00000002   0xD001             BEQ      ??FMSTR_TsaGetTable_param_0
   \   00000004   0x2160             MOVS     R1,#+96
   \   00000006   0x8001             STRH     R1,[R0, #+0]
   \                     ??FMSTR_TsaGetTable_param_0: (+1)
   \   00000008   0x....             LDR      R0,??DataTable99_2
   \   0000000A   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \   __absolute struct <unnamed> const FMSTR_TsaGetTable_param::fmstr_tsatable[6]
   \                     ??fmstr_tsatable_2:
   \   00000000   0x........         DC32 `?<Constant "ramcfg.wh_idx">`, `?<Constant "\\341">`, ramcfg + 4H
   \              0x........   
   \              0x........   
   \   0000000C   0x00000009         DC32 9H, `?<Constant "ramcfg.varh_idx">`, `?<Constant "\\341">`
   \              0x........   
   \              0x........   
   \   00000018   0x........         DC32 ramcfg + 6H, 9H, `?<Constant "ramcfg.u_gain">`
   \              0x00000009   
   \              0x........   
   \   00000024   0x........         DC32 `?<Constant "\\366">`, ramcfg + 70H, 11H
   \              0x........   
   \              0x00000011   
   \   00000030   0x........         DC32 `?<Constant "ramcfg.i_gain">`, `?<Constant "\\366">`, ramcfg + 68H
   \              0x........   
   \              0x........   
   \   0000003C   0x00000011         DC32 11H, `?<Constant "ramcfg.delay">`, `?<Constant "\\361">`
   \              0x........   
   \              0x........   
   \   00000048   0x........         DC32 ramcfg + 60H, 9H, `?<Constant "ramcfg.flag">`
   \              0x00000009   
   \              0x........   
   \   00000054   0x........         DC32 `?<Constant "\\341">`, ramcfg + 74H, 9H
   \              0x........   
   \              0x00000009   
    218          

   \                                 In section .text, align 2, keep-with-next
    219          FMSTR_TSA_TABLE_BEGIN(other)
    220              FMSTR_TSA_RO_VAR(rTime, FMSTR_TSA_USERTYPE(tTIME))
    221              FMSTR_TSA_STRUCT(tTIME)
    222              FMSTR_TSA_MEMBER(tTIME, sec,      FMSTR_TSA_UINT8)
    223              FMSTR_TSA_MEMBER(tTIME, min,      FMSTR_TSA_UINT8)    
    224              FMSTR_TSA_MEMBER(tTIME, hour,     FMSTR_TSA_UINT8)    
    225              FMSTR_TSA_MEMBER(tTIME, day,      FMSTR_TSA_UINT8)    
    226              FMSTR_TSA_MEMBER(tTIME, wday,     FMSTR_TSA_UINT8)    
    227              FMSTR_TSA_MEMBER(tTIME, mon,      FMSTR_TSA_UINT8)     
    228              FMSTR_TSA_MEMBER(tTIME, year,     FMSTR_TSA_UINT16)  
    229              FMSTR_TSA_RO_VAR(CMP1_SCR,        FMSTR_TSA_UINT8)
    230              FMSTR_TSA_RO_VAR(TMR0_CNTR,       FMSTR_TSA_UINT16)
    231              FMSTR_TSA_RO_VAR(TMR0_CAPT,       FMSTR_TSA_UINT16)
    232              FMSTR_TSA_RO_VAR(tamper_flags,    FMSTR_TSA_UINT8)
    233              FMSTR_TSA_RO_VAR(reset_source,    FMSTR_TSA_UINT16)
    234          FMSTR_TSA_TABLE_END()
   \                     FMSTR_TsaGetTable_other: (+1)
   \   00000000   0x2800             CMP      R0,#+0
   \   00000002   0xD001             BEQ      ??FMSTR_TsaGetTable_other_0
   \   00000004   0x21E0             MOVS     R1,#+224
   \   00000006   0x8001             STRH     R1,[R0, #+0]
   \                     ??FMSTR_TsaGetTable_other_0: (+1)
   \   00000008   0x....             LDR      R0,??DataTable99_3
   \   0000000A   0x4770             BX       LR               ;; return

   \                                 In section .rodata, align 4, keep-with-next
   \   __absolute struct <unnamed> const FMSTR_TsaGetTable_other::fmstr_tsatable[14]
   \                     ??fmstr_tsatable_3:
   \   00000000   0x........         DC32 `?<Constant "rTime">`, `?<Constant "tTIME">`, rTime, 21H
   \              0x........   
   \              0x........   
   \              0x00000021   
   \   00000010   0x........         DC32 `?<Constant "tTIME">`, 0H, 0H, 20H, `?<Constant "sec">`
   \              0x00000000   
   \              0x00000000   
   \              0x00000020   
   \              0x........   
   \   00000024   0x........         DC32 `?<Constant "\\340">`, 0H, 6H, `?<Constant "min">`
   \              0x00000000   
   \              0x00000006   
   \              0x........   
   \   00000034   0x........         DC32 `?<Constant "\\340">`, 1H, 6H, `?<Constant "hour">`
   \              0x00000001   
   \              0x00000006   
   \              0x........   
   \   00000044   0x........         DC32 `?<Constant "\\340">`, 2H, 6H, `?<Constant "day">`
   \              0x00000002   
   \              0x00000006   
   \              0x........   
   \   00000054   0x........         DC32 `?<Constant "\\340">`, 3H, 6H, `?<Constant "wday">`
   \              0x00000003   
   \              0x00000006   
   \              0x........   
   \   00000064   0x........         DC32 `?<Constant "\\340">`, 4H, 6H, `?<Constant "mon">`
   \              0x00000004   
   \              0x00000006   
   \              0x........   
   \   00000074   0x........         DC32 `?<Constant "\\340">`, 5H, 6H, `?<Constant "year">`
   \              0x00000005   
   \              0x00000006   
   \              0x........   
   \   00000084   0x........         DC32 `?<Constant "\\341">`, 6H, 0AH, `?<Constant "CMP1_SCR">`
   \              0x00000006   
   \              0x0000000A   
   \              0x........   
   \   00000094   0x........         DC32 `?<Constant "\\340">`, 4007200BH, 5H, `?<Constant "TMR0_CNTR">`
   \              0x4007200B   
   \              0x00000005   
   \              0x........   
   \   000000A4   0x........         DC32 `?<Constant "\\341">`, 4005700AH, 9H, `?<Constant "TMR0_CAPT">`
   \              0x4005700A   
   \              0x00000009   
   \              0x........   
   \   000000B4   0x........         DC32 `?<Constant "\\341">`, 40057004H, 9H, `?<Constant "tamper_flags">`
   \              0x40057004   
   \              0x00000009   
   \              0x........   
   \   000000C4   0x........         DC32 `?<Constant "\\340">`, tamper_flags, 5H
   \              0x........   
   \              0x00000005   
   \   000000D0   0x........         DC32 `?<Constant "reset_source">`, `?<Constant "\\341">`, reset_source
   \              0x........   
   \              0x........   
   \   000000DC   0x00000009         DC32 9H
    235          

   \                                 In section .text, align 4, keep-with-next
    236          FMSTR_TSA_TABLE_LIST_BEGIN()
    237              FMSTR_TSA_TABLE(ctrl)
   \                     FMSTR_TsaGetTable: (+1)
   \   00000000   0x2800             CMP      R0,#+0
   \   00000002   0xD105             BNE      ??FMSTR_TsaGetTable_0
   \   00000004   0x2900             CMP      R1,#+0
   \   00000006   0xD001             BEQ      ??FMSTR_TsaGetTable_1
   \   00000008   0x20E0             MOVS     R0,#+224
   \   0000000A   0x8008             STRH     R0,[R1, #+0]
   \                     ??FMSTR_TsaGetTable_1: (+1)
   \   0000000C   0x....             LDR      R0,??DataTable99
   \   0000000E   0x4770             BX       LR
    238              FMSTR_TSA_TABLE(meas) 
   \                     ??FMSTR_TsaGetTable_0: (+1)
   \   00000010   0x....             LDR      R2,??DataTable99_4  ;; 0xffff
   \   00000012   0x1880             ADDS     R0,R0,R2
   \   00000014   0xB280             UXTH     R0,R0
   \   00000016   0x2800             CMP      R0,#+0
   \   00000018   0xD105             BNE      ??FMSTR_TsaGetTable_2
   \   0000001A   0x2900             CMP      R1,#+0
   \   0000001C   0xD001             BEQ      ??FMSTR_TsaGetTable_3
   \   0000001E   0x20E0             MOVS     R0,#+224
   \   00000020   0x8008             STRH     R0,[R1, #+0]
   \                     ??FMSTR_TsaGetTable_3: (+1)
   \   00000022   0x....             LDR      R0,??DataTable99_1
   \   00000024   0x4770             BX       LR
    239              FMSTR_TSA_TABLE(param)  
   \                     ??FMSTR_TsaGetTable_2: (+1)
   \   00000026   0x1880             ADDS     R0,R0,R2
   \   00000028   0xB280             UXTH     R0,R0
   \   0000002A   0x2800             CMP      R0,#+0
   \   0000002C   0xD106             BNE      ??FMSTR_TsaGetTable_4
   \   0000002E   0x2900             CMP      R1,#+0
   \   00000030   0xD001             BEQ      ??FMSTR_TsaGetTable_5
   \   00000032   0x2060             MOVS     R0,#+96
   \   00000034   0x8008             STRH     R0,[R1, #+0]
   \                     ??FMSTR_TsaGetTable_5: (+1)
   \   00000036   0xBF00             Nop      
   \   00000038   0x....             ADR.N    R0,??fmstr_tsatable_2
   \   0000003A   0x4770             BX       LR
    240              FMSTR_TSA_TABLE(other)  
   \                     ??FMSTR_TsaGetTable_4: (+1)
   \   0000003C   0x1880             ADDS     R0,R0,R2
   \   0000003E   0x0400             LSLS     R0,R0,#+16
   \   00000040   0xD105             BNE      ??FMSTR_TsaGetTable_6
   \   00000042   0x2900             CMP      R1,#+0
   \   00000044   0xD001             BEQ      ??FMSTR_TsaGetTable_7
   \   00000046   0x20E0             MOVS     R0,#+224
   \   00000048   0x8008             STRH     R0,[R1, #+0]
   \                     ??FMSTR_TsaGetTable_7: (+1)
   \   0000004A   0x....             LDR      R0,??DataTable99_3
   \   0000004C   0x4770             BX       LR
    241          FMSTR_TSA_TABLE_LIST_END()
   \                     ??FMSTR_TsaGetTable_6: (+1)
   \   0000004E   0x2000             MOVS     R0,#+0
   \   00000050   0x4770             BX       LR               ;; return
    242          /******************************************************************************
    243           * FreeMASTER's TSA definitions - end
    244           ******************************************************************************/
    245          
    246          /******************************************************************************
    247           * main function - device boots in run mode and uses external 1 MHz clock for 
    248           *                 flash calibration after reset.
    249           ******************************************************************************/ 
    250          #pragma diag_suppress=Pa082

   \                                 In section .text, align 2, keep-with-next
    251          void main (void)
    252          {    
   \                     main: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
    253            /* initialize watchdog - reset time 0.6s < tWDOG < 0.1s                     */
    254            //WDOG_Init (WDOG_MODULE_WINDOW_STOP_DI_CONFIG(WDOG_LPO_CLK,WDOG_DIV1,600,100));
    255            
    256            /* reset pin filtered in all modes and filter clocked by LPO                */
    257            RCM_Init (RCM_MODULE_FILT_CLOCKED_BY_LPO_EN_IN_ALL_MODES_CONFIG);
   \   00000004   0x2606             MOVS     R6,#+6
   \   00000006   0x....             LDR      R0,??DataTable99_5  ;; 0x4007b004
   \   00000008   0x7006             STRB     R6,[R0, #+0]
   \   0000000A   0x2500             MOVS     R5,#+0
   \   0000000C   0x7045             STRB     R5,[R0, #+1]
    258            
    259            /* enable PMC buffer operation also in VLPx modes                           */      
    260            PMC_Init (PMC_MODULE_LVDRE_ON_LVDINT_OFF_LVWINT_OFF_CONFIG(PMC_LVDL,PMC_LVW1),
    261                      PMC_INTREG_BGEN_ON_BGBE_LDON_CONFIG, PRI_LVL0, (PMC_CALLBACK)NULL);
   \   0000000E   0x2300             MOVS     R3,#+0
   \   00000010   0x2200             MOVS     R2,#+0
   \   00000012   0x....             LDR      R0,??DataTable99_6
   \   00000014   0x6801             LDR      R1,[R0, #+0]
   \   00000016   0x....             LDR      R0,??DataTable99_7
   \   00000018   0x6800             LDR      R0,[R0, #+0]
   \   0000001A   0x.... 0x....      BL       PMC_Init
    262            
    263            /* set PTA4 to analogue mode (LCD27)                                        */
    264            
    265            SIM_EnableModule (PORTA);
   \   0000001E   0x2740             MOVS     R7,#+64
   \   00000020   0x....             LDR      R0,??DataTable99_8  ;; 0x4803f038
   \   00000022   0x6007             STR      R7,[R0, #+0]
    266            PORT_Init (PORTA, PORT_MODULE_ALT0_MODE, PIN4); 
   \   00000024   0x2210             MOVS     R2,#+16
   \   00000026   0x....             LDR      R0,??DataTable99_9
   \   00000028   0xC803             LDM      R0,{R0,R1}
   \   0000002A   0x.... 0x....      BL       PORTA_Init
    267            
    268            /* check validity of non-initialized variables in system ram and if data    */
    269            /* are not valid use default data stored in flash                           */
    270            if (ramcnt.flag != 0x5555) 
   \   0000002E   0x....             LDR      R0,??DataTable99_10
   \   00000030   0x89C1             LDRH     R1,[R0, #+14]
   \   00000032   0x....             LDR      R2,??DataTable99_11  ;; 0x5555
   \   00000034   0x4291             CMP      R1,R2
   \   00000036   0xD003             BEQ      ??main_0
    271              memcpy ((void*)&ramcnt, (void*)&nvmcnt, sizeof(tCONFIG_NOINIT_DATA));
   \   00000038   0x2210             MOVS     R2,#+16
   \   0000003A   0x....             LDR      R1,??DataTable99_12
   \   0000003C   0x.... 0x....      BL       __aeabi_memcpy
    272            
    273            /* read application setting from flash; if called for the first time        */
    274            /* flag=0xffff then initialize clock and update flag                        */
    275            CONFIG_ReadFlash ((tCONFIG_FLASH_DATA*)&ramcfg);
   \                     ??main_0: (+1)
   \   00000040   0x....             LDR      R4,??DataTable100
   \   00000042   0x0020             MOVS     R0,R4
   \   00000044   0x.... 0x....      BL       CONFIG_ReadFlash
    276            if (ramcfg.flag == 0xffff)
   \   00000048   0x2074             MOVS     R0,#+116
   \   0000004A   0x5A20             LDRH     R0,[R4, R0]
   \   0000004C   0x....             LDR      R1,??DataTable99_4  ;; 0xffff
   \   0000004E   0x4288             CMP      R0,R1
   \   00000050   0xD136             BNE      ??main_1
    277            {
    278              BUILD_DATE_TIME (wTime); 
   \   00000052   0x....             LDR      R0,??DataTable99_13
   \   00000054   0x2121             MOVS     R1,#+33
   \   00000056   0x7001             STRB     R1,[R0, #+0]
   \   00000058   0x2116             MOVS     R1,#+22
   \   0000005A   0x7041             STRB     R1,[R0, #+1]
   \   0000005C   0x210F             MOVS     R1,#+15
   \   0000005E   0x7081             STRB     R1,[R0, #+2]
   \   00000060   0x211E             MOVS     R1,#+30
   \   00000062   0x70C1             STRB     R1,[R0, #+3]
   \   00000064   0x2101             MOVS     R1,#+1
   \   00000066   0x7141             STRB     R1,[R0, #+5]
   \   00000068   0x21FC             MOVS     R1,#+252
   \   0000006A   0x00C9             LSLS     R1,R1,#+3        ;; #+2016
   \   0000006C   0x80C1             STRH     R1,[R0, #+6]
   \   0000006E   0x7106             STRB     R6,[R0, #+4]
    279              IRTC_SetClock   (&wTime);
   \   00000070   0x.... 0x....      BL       IRTC_SetClock
    280              
    281              // Init iRTC tamper pins if powered-up for the first time.                */  
    282              IRTC_Init (IRTC_MODULE_COMP_OFF_CONFIG(LFSR_CLK_64HZ,5),
    283                         //IRTC_TAMPER_PIN_DI_CONFIG,
    284                         IRTC_TAMPER_PIN_PASSIVE_POL_HIGH_CONFIG(TAMPER_FILT_CLK_64HZ,5),
    285                         IRTC_TAMPER_PIN_PASSIVE_POL_LOW_CONFIG(TAMPER_FILT_CLK_64HZ,5),
    286                         IRTC_TAMPER_PIN_PASSIVE_POL_LOW_CONFIG(TAMPER_FILT_CLK_64HZ,5),
    287                         0);
   \   00000074   0x9501             STR      R5,[SP, #+4]
   \   00000076   0x....             LDR      R0,??DataTable99_14
   \   00000078   0x6800             LDR      R0,[R0, #+0]
   \   0000007A   0x9000             STR      R0,[SP, #+0]
   \   0000007C   0x....             LDR      R0,??DataTable99_15
   \   0000007E   0x6803             LDR      R3,[R0, #+0]
   \   00000080   0x....             LDR      R0,??DataTable99_16
   \   00000082   0x6802             LDR      R2,[R0, #+0]
   \   00000084   0x....             LDR      R0,??DataTable99_17
   \   00000086   0xC803             LDM      R0,{R0,R1}
   \   00000088   0x.... 0x....      BL       IRTC_Init
    288              /* suppress initial "tamper" detect                                       */
    289              IRTC_ClrIsrFlag (IRTC_TAMPER0_MASK|IRTC_TAMPER1_MASK|IRTC_TAMPER2_MASK);
   \   0000008C   0x2080             MOVS     R0,#+128
   \   0000008E   0x....             LDR      R1,??DataTable99_18  ;; 0x40050012
   \   00000090   0x2302             MOVS     R3,#+2
   \   00000092   0xE000             B        ??main_2
   \                     ??main_3: (+1)
   \   00000094   0x7008             STRB     R0,[R1, #+0]
   \                     ??main_2: (+1)
   \   00000096   0x880E             LDRH     R6,[R1, #+0]
   \   00000098   0x421E             TST      R6,R3
   \   0000009A   0xD0FB             BEQ      ??main_3
   \                     ??main_4: (+1)
   \   0000009C   0x8808             LDRH     R0,[R1, #+0]
   \   0000009E   0x4218             TST      R0,R3
   \   000000A0   0xD006             BEQ      ??main_5
   \   000000A2   0x700D             STRB     R5,[R1, #+0]
   \   000000A4   0x700F             STRB     R7,[R1, #+0]
   \   000000A6   0x20C0             MOVS     R0,#+192
   \   000000A8   0x7008             STRB     R0,[R1, #+0]
   \   000000AA   0x2080             MOVS     R0,#+128
   \   000000AC   0x7008             STRB     R0,[R1, #+0]
   \   000000AE   0xE7F5             B        ??main_4
   \                     ??main_5: (+1)
   \   000000B0   0x20E0             MOVS     R0,#+224
   \   000000B2   0x00C0             LSLS     R0,R0,#+3        ;; #+1792
   \   000000B4   0x8408             STRH     R0,[R1, #+32]
   \   000000B6   0x804D             STRH     R5,[R1, #+2]
    290              
    291              CONFIG_SaveFlash ((tCONFIG_FLASH_DATA*)&ramcfg, 0xfff5);    
   \   000000B8   0x....             LDR      R1,??DataTable99_19  ;; 0xfff5
   \   000000BA   0x0020             MOVS     R0,R4
   \   000000BC   0x.... 0x....      BL       CONFIG_SaveFlash
    292            }
    293            
    294            /****************************************************************************
    295             * Execute in normal mode on Tower card 
    296             ****************************************************************************/
    297            
    298              /* initialize on-chip peripherals in normal mode                          */
    299              norm_mode_hw_init (); 
   \                     ??main_1: (+1)
   \   000000C0   0x.... 0x....      BL       norm_mode_hw_init
   \   000000C4   0x....             LDR      R5,??DataTable101  ;; 0xffa5
    300             
    301              /* main software loop                                                     */
    302              while(1)
    303              {
    304                
    305                if (CONFIG_CAL_DONE ()){
   \                     ??main_6: (+1)
   \   000000C6   0x2074             MOVS     R0,#+116
   \   000000C8   0x5A20             LDRH     R0,[R4, R0]
   \   000000CA   0x42A8             CMP      R0,R5
   \   000000CC   0xD1FB             BNE      ??main_6
    306                  // if calibration data were collected then calibration parameters are 
    307                  // calculated and saved to flash                                      
    308                  if (CONFIG_CalcCalibData ((tCONFIG_FLASH_DATA*)&ramcfg) == TRUE)
   \   000000CE   0x0020             MOVS     R0,R4
   \   000000D0   0x.... 0x....      BL       CONFIG_CalcCalibData
   \   000000D4   0x2801             CMP      R0,#+1
   \   000000D6   0xD1F6             BNE      ??main_6
    309                    
    310                    CONFIG_SaveFlash ((tCONFIG_FLASH_DATA*)&ramcfg, ramcfg.flag);
   \   000000D8   0x2074             MOVS     R0,#+116
   \   000000DA   0x5A21             LDRH     R1,[R4, R0]
   \   000000DC   0x0020             MOVS     R0,R4
   \   000000DE   0x.... 0x....      BL       CONFIG_SaveFlash
   \   000000E2   0xE7F0             B        ??main_6
    311                    
    312                  }
    313              }
    314            
    315              /* blocking                                                               */
    316              while(1);
    317            
    318          }
    319          
    320          /******************************************************************************
    321           * hardware init function definitions
    322           ******************************************************************************/ 
    323          /* initializes RUN operation mode and necessary on-chip peripherals           */

   \                                 In section .text, align 4, keep-with-next
    324          static void norm_mode_hw_init (void)
    325          {    
   \                     norm_mode_hw_init: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB08B             SUB      SP,SP,#+44
   \   00000004   0x....             LDR      R0,??DataTable101_1
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0x9000             STR      R0,[SP, #+0]
    326            /* SMC, SIM and PLL modules                                                 */ 
    327            SMC_Init (SMC_MODULE_VLPS_ON_VLLS_ON_CONFIG);
   \   0000000A   0x4668             MOV      R0,SP
   \   0000000C   0x7800             LDRB     R0,[R0, #+0]
   \   0000000E   0x....             LDR      R1,??DataTable101_2  ;; 0x4007e000
   \   00000010   0x7008             STRB     R0,[R1, #+0]
    328            SIM_Init (SIM_MODULE_NORM_MODE_SYSCLKMODE_SYSCLK_DIV1_CONFIG);
   \   00000012   0x....             LDR      R0,??DataTable101_3  ;; 0x4003e000
   \   00000014   0x2500             MOVS     R5,#+0
   \   00000016   0x6005             STR      R5,[R0, #+0]
   \   00000018   0x6045             STR      R5,[R0, #+4]
   \   0000001A   0x....             LDR      R0,??DataTable100_1  ;; 0x4003f004
   \   0000001C   0x21A0             MOVS     R1,#+160
   \   0000001E   0x6001             STR      R1,[R0, #+0]
   \   00000020   0x....             LDR      R1,??DataTable100_2  ;; 0x7808ac30
   \   00000022   0x6301             STR      R1,[R0, #+48]
   \   00000024   0x....             LDR      R1,??DataTable100_3  ;; 0x3a97fc8
   \   00000026   0x6341             STR      R1,[R0, #+52]
   \   00000028   0x....             LDR      R1,??DataTable100_4  ;; 0xd0010801
   \   0000002A   0x6381             STR      R1,[R0, #+56]
   \   0000002C   0x63C5             STR      R5,[R0, #+60]
   \   0000002E   0x2180             MOVS     R1,#+128
   \   00000030   0x0509             LSLS     R1,R1,#+20       ;; #+134217728
   \   00000032   0x6401             STR      R1,[R0, #+64]
   \   00000034   0x2102             MOVS     R1,#+2
   \   00000036   0x6481             STR      R1,[R0, #+72]
   \   00000038   0x....             LDR      R1,??DataTable100_5  ;; 0x80010000
   \   0000003A   0x6681             STR      R1,[R0, #+104]
    329            PLL_Init (PLL_MODULE_PEE_12_288MHZ_CONFIG);               
   \   0000003C   0x....             LDR      R0,??DataTable100_6
   \   0000003E   0xC803             LDM      R0,{R0,R1}
   \   00000040   0x.... 0x....      BL       PLL_Init
    330            
    331              
    332            /* if calibration data were collected then calibration parameters are       */
    333            /* calculated and saved to flash                                            */
    334            if (CONFIG_CalcCalibData ((tCONFIG_FLASH_DATA*)&ramcfg) == TRUE)
   \   00000044   0x....             LDR      R4,??DataTable100
   \   00000046   0x0020             MOVS     R0,R4
   \   00000048   0x.... 0x....      BL       CONFIG_CalcCalibData
   \   0000004C   0x2801             CMP      R0,#+1
   \   0000004E   0xD104             BNE      ??norm_mode_hw_init_0
    335              CONFIG_SaveFlash ((tCONFIG_FLASH_DATA*)&ramcfg, ramcfg.flag);
   \   00000050   0x2074             MOVS     R0,#+116
   \   00000052   0x5A21             LDRH     R1,[R4, R0]
   \   00000054   0x0020             MOVS     R0,R4
   \   00000056   0x.... 0x....      BL       CONFIG_SaveFlash
    336            
    337            /* VREF module must be initialized after SIM module                         */
    338            VREF_Init (VREF_MODULE_CHOP_ON_1V75_0V4_HPWR_CONFIG,
    339                       VREF_SWITCH_S1_H_S2_L_S3_L);
   \                     ??norm_mode_hw_init_0: (+1)
   \   0000005A   0x....             LDR      R0,??DataTable100_7
   \   0000005C   0xC803             LDM      R0,{R0,R1}
   \   0000005E   0x000A             MOVS     R2,R1
   \   00000060   0x0001             MOVS     R1,R0
   \   00000062   0x....             LDR      R0,??DataTable101_4
   \   00000064   0x6800             LDR      R0,[R0, #+0]
   \   00000066   0x.... 0x....      BL       VREF_Init
    340            VREFH_Trim(ramcfg.vrefh);             /* VREFH trimming                     */
   \   0000006A   0x....             LDR      R0,??DataTable101_5  ;; 0x4006f000
   \   0000006C   0x7801             LDRB     R1,[R0, #+0]
   \   0000006E   0x3408             ADDS     R4,R4,#+8
   \   00000070   0x0027             MOVS     R7,R4
   \   00000072   0x883A             LDRH     R2,[R7, #+0]
   \   00000074   0x2340             MOVS     R3,#+64
   \   00000076   0x4019             ANDS     R1,R1,R3
   \   00000078   0x4311             ORRS     R1,R1,R2
   \   0000007A   0x7001             STRB     R1,[R0, #+0]
    341            VREFL_Trim(ramcfg.vrefl);             /* VREFL trimming                     */
   \   0000007C   0x7941             LDRB     R1,[R0, #+5]
   \   0000007E   0x887A             LDRH     R2,[R7, #+2]
   \   00000080   0x2318             MOVS     R3,#+24
   \   00000082   0x400B             ANDS     R3,R3,R1
   \   00000084   0x4313             ORRS     R3,R3,R2
   \   00000086   0x7143             STRB     R3,[R0, #+5]
    342                
    343            /* RESET pin set as GPIO and driven low to improve EMC susceptibility       */
    344            //PORT_Init (PORTE , PORT_MODULE_ALT1_MODE, RESET_PIN_MASK);
    345            //GPIO_Init (FGPIOE, GPIO_OUT_LOGIC1_MODE , RESET_PIN_MASK);
    346           
    347            /* User push buttons                                                         */
    348            PORT_Init (PORTD , PORT_MODULE_BUTTON_IRQ_MODE, BUTTON_MASK);
   \   00000088   0x2201             MOVS     R2,#+1
   \   0000008A   0x....             LDR      R0,??DataTable101_6
   \   0000008C   0xC803             LDM      R0,{R0,R1}
   \   0000008E   0x.... 0x....      BL       PORTD_Init
    349            GPIO_Init (FGPIOD, GPIO_INP_MODE, BUTTON_MASK);
   \   00000092   0x20FE             MOVS     R0,#+254
   \   00000094   0x....             LDR      R1,??DataTable101_7  ;; 0xf8000003
   \   00000096   0x780A             LDRB     R2,[R1, #+0]
   \   00000098   0x4002             ANDS     R2,R2,R0
   \   0000009A   0x700A             STRB     R2,[R1, #+0]
   \   0000009C   0x7D0A             LDRB     R2,[R1, #+20]
   \   0000009E   0x4010             ANDS     R0,R0,R2
   \   000000A0   0x7508             STRB     R0,[R1, #+20]
    350            PORT_InstallCallback (PRI_LVL3, button_callback);
   \   000000A2   0x....             LDR      R6,??DataTable101_8
   \   000000A4   0x0031             MOVS     R1,R6
   \   000000A6   0x2003             MOVS     R0,#+3
   \   000000A8   0x.... 0x....      BL       PORT_InstallCallback
    351            
    352            PORT_Init (PORTE , PORT_MODULE_BUTTON_IRQ_MODE, BUTTON2_MASK);
   \   000000AC   0x2210             MOVS     R2,#+16
   \   000000AE   0x....             LDR      R0,??DataTable101_9
   \   000000B0   0xC803             LDM      R0,{R0,R1}
   \   000000B2   0x.... 0x....      BL       PORTE_Init
    353            GPIO_Init (FGPIOE, GPIO_INP_MODE, BUTTON2_MASK);
   \   000000B6   0x20EF             MOVS     R0,#+239
   \   000000B8   0x....             LDR      R4,??DataTable101_10  ;; 0xf8000040
   \   000000BA   0x7821             LDRB     R1,[R4, #+0]
   \   000000BC   0x4001             ANDS     R1,R1,R0
   \   000000BE   0x7021             STRB     R1,[R4, #+0]
   \   000000C0   0x7D21             LDRB     R1,[R4, #+20]
   \   000000C2   0x4008             ANDS     R0,R0,R1
   \   000000C4   0x7520             STRB     R0,[R4, #+20]
    354            PORT_InstallCallback (PRI_LVL3, button_callback);
   \   000000C6   0x0031             MOVS     R1,R6
   \   000000C8   0x2003             MOVS     R0,#+3
   \   000000CA   0x.... 0x....      BL       PORT_InstallCallback
    355           
    356            // b01800
    357            PORT_Init (PORTE , PORT_MODULE_ALT1_MODE, LED_USER_MASK );
   \   000000CE   0x2220             MOVS     R2,#+32
   \   000000D0   0x....             LDR      R0,??DataTable101_11
   \   000000D2   0xC803             LDM      R0,{R0,R1}
   \   000000D4   0x.... 0x....      BL       PORTE_Init
    358            GPIO_Init (FGPIOE, GPIO_OUT_LOGIC1_MODE, LED_USER_MASK );
   \   000000D8   0x2020             MOVS     R0,#+32
   \   000000DA   0x7821             LDRB     R1,[R4, #+0]
   \   000000DC   0x4301             ORRS     R1,R1,R0
   \   000000DE   0x7021             STRB     R1,[R4, #+0]
   \   000000E0   0x7D21             LDRB     R1,[R4, #+20]
   \   000000E2   0x4308             ORRS     R0,R0,R1
   \   000000E4   0x7520             STRB     R0,[R4, #+20]
    359            
    360            PORT_Init (PORTF , PORT_MODULE_ALT2_MODE, PIN2);
   \   000000E6   0x2204             MOVS     R2,#+4
   \   000000E8   0x....             LDR      R0,??DataTable101_12
   \   000000EA   0xC803             LDM      R0,{R0,R1}
   \   000000EC   0x.... 0x....      BL       PORTF_Init
    361            
    362            
    363            
    364          #ifdef FMSTR_UART1   
    365            /* Tower card UART init for Freemaster                                      */
    366            PORT_Init (PORTI, PORT_MODULE_ALT2_MODE, UART1_TX_MASK|UART1_RX_MASK);
   \   000000F0   0x2203             MOVS     R2,#+3
   \   000000F2   0x....             LDR      R0,??DataTable101_13
   \   000000F4   0xC803             LDM      R0,{R0,R1}
   \   000000F6   0x.... 0x....      BL       PORTI_Init
    367            UART_Init (UART1, UART_MODULE_INTRMODE_CONFIG(38400,12.288e6)); 
   \   000000FA   0x....             LDR      R1,??DataTable101_14
   \   000000FC   0xB084             SUB      SP,SP,#+16
   \   000000FE   0x4668             MOV      R0,SP
   \   00000100   0x2214             MOVS     R2,#+20
   \   00000102   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000106   0xBC0F             POP      {R0-R3}
   \   00000108   0x.... 0x....      BL       UART1_Init
    368            UART_InstallCallback (UART0_UART1, PRI_LVL0, (UART_CALLBACK)FMSTR_Isr);
   \   0000010C   0x....             LDR      R1,??DataTable101_15
   \   0000010E   0x2000             MOVS     R0,#+0
   \   00000110   0x.... 0x....      BL       UART_InstallCallbackUART0_UART1
    369            FMSTR_Init();
   \   00000114   0x.... 0x....      BL       FMSTR_Init
    370          #endif
    371              
    372            /* Software callbacks                                                       */
    373            SWISR_HandlerInit (0, PRI_LVL1, auxcalc_callback);
   \   00000118   0x....             LDR      R1,??DataTable101_16
   \   0000011A   0x2001             MOVS     R0,#+1
   \   0000011C   0x.... 0x....      BL       SWISR0_HandlerInit
    374            SWISR_HandlerInit (1, PRI_LVL3, display_callback);
   \   00000120   0x....             LDR      R1,??DataTable101_17
   \   00000122   0x2003             MOVS     R0,#+3
   \   00000124   0x.... 0x....      BL       SWISR1_HandlerInit
    375            
    376            // TWR LCD init
    377            vfnLCD_Init();
   \   00000128   0x.... 0x....      BL       vfnLCD_Init
    378          
    379            
    380            /* AFE module                                                               */
    381            SIM_SelAfePllClkSrc (SIM_MCG_PLL_CLK);
   \   0000012C   0x....             LDR      R0,??DataTable101_18  ;; 0x520bf06c
   \   0000012E   0x6005             STR      R5,[R0, #+0]
    382            AFE_ChanInit (CH0, 
    383                          //AFE_CH_SWTRG_CCM_PGAON_CONFIG(DEC_OSR1024,PGA_GAIN),      
    384                          AFE_CH_SWTRG_CCM_PGAOFF_CONFIG(DEC_OSR1024),      
    385                          -ramcfg.delay, 
    386                          PRI_LVL0, 
    387                          (AFE_CH_CALLBACK)NULL);
   \   00000130   0x2300             MOVS     R3,#+0
   \   00000132   0x2200             MOVS     R2,#+0
   \   00000134   0x2058             MOVS     R0,#+88
   \   00000136   0x5E38             LDRSH    R0,[R7, R0]
   \   00000138   0x4241             RSBS     R1,R0,#+0
   \   0000013A   0xB209             SXTH     R1,R1
   \   0000013C   0x....             LDR      R0,??DataTable101_19
   \   0000013E   0x6800             LDR      R0,[R0, #+0]
   \   00000140   0x.... 0x....      BL       AFE_CH0_Init
    388            AFE_ChanInit (CH2, 
    389                          AFE_CH_SWTRG_CCM_PGAOFF_CONFIG(DEC_OSR1024), 
    390                          ramcfg.delay, 
    391                          PRI_LVL2, 
    392                          (AFE_CH_CALLBACK)afech2_callback);
   \   00000144   0x....             LDR      R3,??DataTable101_20
   \   00000146   0x2202             MOVS     R2,#+2
   \   00000148   0x2058             MOVS     R0,#+88
   \   0000014A   0x5E39             LDRSH    R1,[R7, R0]
   \   0000014C   0x....             LDR      R0,??DataTable101_21
   \   0000014E   0x6800             LDR      R0,[R0, #+0]
   \   00000150   0x.... 0x....      BL       AFE_CH2_Init
    393            AFE_Init      (AFE_MODULE_RJFORMAT_CONFIG(AFE_PLL_CLK, AFE_DIV2, 12.288e6));
   \   00000154   0x....             LDR      R0,??DataTable101_22  ;; 0x40030018
   \   00000156   0x2181             MOVS     R1,#+129
   \   00000158   0x0549             LSLS     R1,R1,#+21       ;; #+270532608
   \   0000015A   0x6041             STR      R1,[R0, #+4]
   \   0000015C   0x....             LDR      R1,??DataTable101_23  ;; 0x8064f400
   \   0000015E   0x6001             STR      R1,[R0, #+0]
    394            
    395            /* ADC module                                                               */
    396            ADC_Init  (ADC_MODULE_16B_SWTRG_BGAP_LP_INTERNAL_CLK_CONFIG,
    397                       HWAVG_OFF,
    398                       ADC_CH_SE_POLL_CONFIG(AD9),
    399                       ADC_CH_DISABLE_CONFIG,
    400                       ADC_CH_DISABLE_CONFIG,
    401                       ADC_CH_DISABLE_CONFIG,
    402                       PRI_LVL0,
    403                       (ADC_CALLBACK)NULL);
   \   00000160   0x9509             STR      R5,[SP, #+36]
   \   00000162   0x9508             STR      R5,[SP, #+32]
   \   00000164   0x....             LDR      R0,??DataTable101_24
   \   00000166   0x6800             LDR      R0,[R0, #+0]
   \   00000168   0x9007             STR      R0,[SP, #+28]
   \   0000016A   0x....             LDR      R0,??DataTable101_25
   \   0000016C   0x6800             LDR      R0,[R0, #+0]
   \   0000016E   0x9006             STR      R0,[SP, #+24]
   \   00000170   0x....             LDR      R0,??DataTable101_26
   \   00000172   0x6800             LDR      R0,[R0, #+0]
   \   00000174   0x9005             STR      R0,[SP, #+20]
   \   00000176   0x....             LDR      R0,??DataTable101_27
   \   00000178   0x6800             LDR      R0,[R0, #+0]
   \   0000017A   0x9004             STR      R0,[SP, #+16]
   \   0000017C   0x20FF             MOVS     R0,#+255
   \   0000017E   0x9003             STR      R0,[SP, #+12]
   \   00000180   0x....             LDR      R1,??DataTable101_28
   \   00000182   0xB084             SUB      SP,SP,#+16
   \   00000184   0x4668             MOV      R0,SP
   \   00000186   0x221C             MOVS     R2,#+28
   \   00000188   0x.... 0x....      BL       __aeabi_memcpy4
   \   0000018C   0xBC0F             POP      {R0-R3}
   \   0000018E   0x.... 0x....      BL       ADC_Init
    404            
    405            /* XBAR module - all paths are setup in the code below                      */
    406            XBAR_Init (XBAR_MODULE_NO_EDGE_DETECT_CONFIG,PRI_LVL0,NULL);
   \   00000192   0x2200             MOVS     R2,#+0
   \   00000194   0x2100             MOVS     R1,#+0
   \   00000196   0x....             LDR      R0,??DataTable101_29
   \   00000198   0x6800             LDR      R0,[R0, #+0]
   \   0000019A   0x.... 0x....      BL       XBAR_Init
    407            
    408            /* Fine pulse output control                                                */
    409            /* PTD1 (LED_KWH_MASK): T1 output routed via XBAR_OUT3   Orange LED         */
    410            /* PTF1 (LED_KVARH_MASK): T2 output routed via XBAR_OUT6 Red LED            */  
    411            PORT_Init (PORTD, PORT_MODULE_ALT4_MODE, LED_KWH_MASK);  
   \   0000019E   0x2202             MOVS     R2,#+2
   \   000001A0   0x....             LDR      R0,??DataTable101_30
   \   000001A2   0xC803             LDM      R0,{R0,R1}
   \   000001A4   0x.... 0x....      BL       PORTD_Init
    412            PORT_Init (PORTF, PORT_MODULE_ALT3_MODE, LED_KVARH_MASK);
   \   000001A8   0x2202             MOVS     R2,#+2
   \   000001AA   0x....             LDR      R0,??DataTable101_31
   \   000001AC   0xC803             LDM      R0,{R0,R1}
   \   000001AE   0x.... 0x....      BL       PORTF_Init
    413            
    414            /* tilt tamper sensor clock ENable                                          */ 
    415            PORT_Init (PORTF, PORT_MODULE_ALT1_MODE, MMA_EN_MASK);
   \   000001B2   0x2280             MOVS     R2,#+128
   \   000001B4   0x....             LDR      R0,??DataTable101_32
   \   000001B6   0xC803             LDM      R0,{R0,R1}
   \   000001B8   0x.... 0x....      BL       PORTF_Init
    416            GPIO_Init (FGPIOF, GPIO_OUT_LOGIC1_MODE, MMA_EN_MASK );
   \   000001BC   0x2080             MOVS     R0,#+128
   \   000001BE   0x7861             LDRB     R1,[R4, #+1]
   \   000001C0   0x4301             ORRS     R1,R1,R0
   \   000001C2   0x7061             STRB     R1,[R4, #+1]
   \   000001C4   0x7D61             LDRB     R1,[R4, #+21]
   \   000001C6   0x4308             ORRS     R0,R0,R1
   \   000001C8   0x7560             STRB     R0,[R4, #+21]
    417            
    418            TMR_Init  (CH1,
    419                      TMR_PULSE_OUTPUT_ONE_SHOOT_MODE_CONFIG(SEC_CNTR1_INP,SET_ON_COMP),
    420                      0,
    421                      0,
    422                      0,
    423                      0,
    424                      0,
    425                      PRI_LVL0,
    426                      (TMR_CH_CALLBACK)NULL);
   \   000001CA   0x9504             STR      R5,[SP, #+16]
   \   000001CC   0x9503             STR      R5,[SP, #+12]
   \   000001CE   0x9502             STR      R5,[SP, #+8]
   \   000001D0   0x9501             STR      R5,[SP, #+4]
   \   000001D2   0x9500             STR      R5,[SP, #+0]
   \   000001D4   0x2300             MOVS     R3,#+0
   \   000001D6   0x2200             MOVS     R2,#+0
   \   000001D8   0x....             LDR      R0,??DataTable102
   \   000001DA   0xC803             LDM      R0,{R0,R1}
   \   000001DC   0x.... 0x....      BL       TMR_CH1_Init
    427            TMR_Init  (CH2,
    428                      TMR_PULSE_OUTPUT_ONE_SHOOT_MODE_CONFIG(SEC_CNTR2_INP,SET_ON_COMP),
    429                      0,
    430                      0,
    431                      0,
    432                      0,
    433                      0,
    434                      PRI_LVL0,
    435                      (TMR_CH_CALLBACK)NULL);
   \   000001E0   0x9504             STR      R5,[SP, #+16]
   \   000001E2   0x9503             STR      R5,[SP, #+12]
   \   000001E4   0x9502             STR      R5,[SP, #+8]
   \   000001E6   0x9501             STR      R5,[SP, #+4]
   \   000001E8   0x9500             STR      R5,[SP, #+0]
   \   000001EA   0x2300             MOVS     R3,#+0
   \   000001EC   0x2200             MOVS     R2,#+0
   \   000001EE   0x....             LDR      R0,??DataTable102_1
   \   000001F0   0xC803             LDM      R0,{R0,R1}
   \   000001F2   0x.... 0x....      BL       TMR_CH2_Init
    436            XBAR_Path (XBAR_TMR1,XBAR_OUT3);
   \   000001F6   0x2007             MOVS     R0,#+7
   \   000001F8   0x....             LDR      R1,??DataTable102_2  ;; 0x502d5014
   \   000001FA   0x8008             STRH     R0,[R1, #+0]
    437            XBAR_Path (XBAR_TMR2,XBAR_OUT6);
   \   000001FC   0x....             LDR      R0,??DataTable102_3  ;; 0x542d5004
   \   000001FE   0x2180             MOVS     R1,#+128
   \   00000200   0x0109             LSLS     R1,R1,#+4        ;; #+2048
   \   00000202   0x8241             STRH     R1,[R0, #+18]
    438            
    439            /* Frequency measurement                                                    */
    440            XBAR_Path (XBAR_CMP1OUT,XBAR_TMR0SEC);
   \   00000204   0x21C0             MOVS     R1,#+192
   \   00000206   0x0109             LSLS     R1,R1,#+4        ;; #+3072
   \   00000208   0x8001             STRH     R1,[R0, #+0]
    441            CMP_Init  (CMP1,CMP_FREQ_DETECT_MODE_CONFIG_EN_DAC(7),IN2_SDADP2,IN7_DAC);
   \   0000020A   0x2307             MOVS     R3,#+7
   \   0000020C   0x2202             MOVS     R2,#+2
   \   0000020E   0x....             LDR      R0,??DataTable102_4
   \   00000210   0xC803             LDM      R0,{R0,R1}
   \   00000212   0x.... 0x....      BL       CMP1_Init
    442            TMR_Init  (CH0,
    443                      TMR_FREQ_DETECT_MODE(BUS_CLK_DIV4,SEC_CNTR0_INP,LOAD_RISING_EDGE),
    444                      0,
    445                      0,
    446                      0,
    447                      0,
    448                      0,
    449                      PRI_LVL0,
    450                      (TMR_CH_CALLBACK)NULL);
   \   00000216   0x9504             STR      R5,[SP, #+16]
   \   00000218   0x9503             STR      R5,[SP, #+12]
   \   0000021A   0x9502             STR      R5,[SP, #+8]
   \   0000021C   0x9501             STR      R5,[SP, #+4]
   \   0000021E   0x9500             STR      R5,[SP, #+0]
   \   00000220   0x2300             MOVS     R3,#+0
   \   00000222   0x2200             MOVS     R2,#+0
   \   00000224   0x....             ADR.N    R0,`?<Constant (tTMR_CH){13312, 64, 2048}>`
   \   00000226   0xC803             LDM      R0,{R0,R1}
   \   00000228   0x.... 0x....      BL       TMR_CH0_Init
    451            
    452            EnableInterrupts();
   \   0000022C   0xB662             CPSIE i
    453            AFE_SwTrigger   (CH0|CH2);
   \   0000022E   0x20A0             MOVS     R0,#+160
   \   00000230   0x05C0             LSLS     R0,R0,#+23       ;; #+1342177280
   \   00000232   0x....             LDR      R1,??DataTable102_5  ;; 0x5d9b0018
   \   00000234   0x6008             STR      R0,[R1, #+0]
    454          }
   \   00000236   0xB00B             ADD      SP,SP,#+44
   \   00000238   0xBDF0             POP      {R4-R7,PC}       ;; return
    455          
    456          /******************************************************************************
    457           * callback function definitions
    458           ******************************************************************************/
    459          /* measurements callback @ 6000 Hz, duration 6.719 us, load 4.04 %            */

   \                                 In section .text, align 2, keep-with-next
    460          static void afech2_callback (AFE_CH_CALLBACK_TYPE type, int32 result)
    461          {
    462            if (type == COC_CALLBACK) 
   \                     afech2_callback: (+1)
   \   00000000   0x2801             CMP      R0,#+1
   \   00000002   0xD000             BEQ      ??afech2_callback_0
   \   00000004   0x4770             BX       LR
    463            {  
    464              /* read measurement samples                                               */
    465              u24_sample = result             << U_SCALE; /* up-scale phase voltage     */  
   \                     ??afech2_callback_0: (+1)
   \   00000006   0xB580             PUSH     {R7,LR}
   \   00000008   0x....             LDR      R0,??DataTable102_6
   \   0000000A   0x0049             LSLS     R1,R1,#+1
   \   0000000C   0x6001             STR      R1,[R0, #+0]
    466              i24_sample = AFE_ChanRead (CH0) << I_SCALE; /* up-scale phase current     */
   \   0000000E   0x....             LDR      R1,??DataTable102_7  ;; 0x40030044
   \   00000010   0x6809             LDR      R1,[R1, #+0]
   \   00000012   0x6041             STR      R1,[R0, #+4]
    467              
    468              /* update offsets - needed for offset calculation during calibration      */
    469              CONFIG_UpdateOffsets((tCONFIG_FLASH_DATA*)&ramcfg,u24_sample,i24_sample);
   \   00000014   0x6842             LDR      R2,[R0, #+4]
   \   00000016   0x6801             LDR      R1,[R0, #+0]
   \   00000018   0x....             LDR      R0,??DataTable102_8
   \   0000001A   0x.... 0x....      BL       CONFIG_UpdateOffsets
    470              SWISR_HandlerFreqCall (0, 6000, 1200);
   \   0000001E   0x....             LDR      R0,??DataTable102_9
   \   00000020   0x8801             LDRH     R1,[R0, #+0]
   \   00000022   0x1C49             ADDS     R1,R1,#+1
   \   00000024   0x8001             STRH     R1,[R0, #+0]
   \   00000026   0xB289             UXTH     R1,R1
   \   00000028   0x2905             CMP      R1,#+5
   \   0000002A   0xDB05             BLT      ??afech2_callback_1
   \   0000002C   0x2100             MOVS     R1,#+0
   \   0000002E   0x8001             STRH     R1,[R0, #+0]
   \   00000030   0x2080             MOVS     R0,#+128
   \   00000032   0x0180             LSLS     R0,R0,#+6        ;; #+8192
   \   00000034   0x....             LDR      R1,??DataTable102_10  ;; 0xe000e200
   \   00000036   0x6008             STR      R0,[R1, #+0]
    471              
    472              FMSTR_Poll();
   \                     ??afech2_callback_1: (+1)
   \   00000038   0x.... 0x....      BL       FMSTR_Poll
    473            }
    474          }
   \   0000003C   0xBD01             POP      {R0,PC}          ;; return
    475          
    476          /* calculation callback @1200 Hz, duration 681 us, load 81.7 %                */        

   \                                 In section .text, align 2, keep-with-next
    477          static void auxcalc_callback (void)
    478          {
   \                     auxcalc_callback: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x....             LDR      R0,??DataTable102_11
   \   00000004   0x2600             MOVS     R6,#+0
   \   00000006   0x2104             MOVS     R1,#+4
   \   00000008   0x5E41             LDRSH    R1,[R0, R1]
   \   0000000A   0x2900             CMP      R1,#+0
   \   0000000C   0xD412             BMI      ??auxcalc_callback_0
    479            static int cnt_1=0, cnt_2=0;
    480           
    481            /* generate pulses on output LEDs                                           */
    482            PULSE_OUT (CH1,mlib.Wh  , cnt_1, PULSE_MAX_ONTIME(0.020), TMR_RES);
   \   0000000E   0x....             LDR      R1,??DataTable102_12  ;; 0x5695800c
   \   00000010   0x800E             STRH     R6,[R1, #+0]
   \   00000012   0x....             LDR      R2,??DataTable102_13  ;; 0x5015800c
   \   00000014   0x6803             LDR      R3,[R0, #+0]
   \   00000016   0x2B01             CMP      R3,#+1
   \   00000018   0xD103             BNE      ??auxcalc_callback_1
   \   0000001A   0x8013             STRH     R3,[R2, #+0]
   \   0000001C   0x....             LDR      R2,??DataTable102_14
   \   0000001E   0x6016             STR      R6,[R2, #+0]
   \   00000020   0xE001             B        ??auxcalc_callback_2
   \                     ??auxcalc_callback_1: (+1)
   \   00000022   0x2302             MOVS     R3,#+2
   \   00000024   0x8013             STRH     R3,[R2, #+0]
   \                     ??auxcalc_callback_2: (+1)
   \   00000026   0x....             LDR      R2,??DataTable102_15  ;; 0x40058000
   \   00000028   0x8156             STRH     R6,[R2, #+10]
   \   0000002A   0x8016             STRH     R6,[R2, #+0]
   \   0000002C   0x2280             MOVS     R2,#+128
   \   0000002E   0x0192             LSLS     R2,R2,#+6        ;; #+8192
   \   00000030   0x800A             STRH     R2,[R1, #+0]
   \   00000032   0xE00B             B        ??auxcalc_callback_3
   \                     ??auxcalc_callback_0: (+1)
   \   00000034   0x....             LDR      R1,??DataTable102_14
   \   00000036   0x680A             LDR      R2,[R1, #+0]
   \   00000038   0x1C53             ADDS     R3,R2,#+1
   \   0000003A   0x600B             STR      R3,[R1, #+0]
   \   0000003C   0x2A17             CMP      R2,#+23
   \   0000003E   0xD105             BNE      ??auxcalc_callback_3
   \   00000040   0x2108             MOVS     R1,#+8
   \   00000042   0x....             LDR      R2,??DataTable102_16  ;; 0x5185800e
   \   00000044   0x8011             STRH     R1,[R2, #+0]
   \   00000046   0x2104             MOVS     R1,#+4
   \   00000048   0x....             LDR      R2,??DataTable102_17  ;; 0x4805800e
   \   0000004A   0x8011             STRH     R1,[R2, #+0]
    483            PULSE_OUT (CH2,mlib.VARh, cnt_2, PULSE_MAX_ONTIME(0.020), TMR_RES);
   \                     ??auxcalc_callback_3: (+1)
   \   0000004C   0x214C             MOVS     R1,#+76
   \   0000004E   0x5E41             LDRSH    R1,[R0, R1]
   \   00000050   0x2900             CMP      R1,#+0
   \   00000052   0xD411             BMI      ??auxcalc_callback_4
   \   00000054   0x....             LDR      R1,??DataTable102_18  ;; 0x5695900c
   \   00000056   0x800E             STRH     R6,[R1, #+0]
   \   00000058   0x....             LDR      R2,??DataTable102_19  ;; 0x5015900c
   \   0000005A   0x6C80             LDR      R0,[R0, #+72]
   \   0000005C   0x2801             CMP      R0,#+1
   \   0000005E   0xD103             BNE      ??auxcalc_callback_5
   \   00000060   0x8010             STRH     R0,[R2, #+0]
   \   00000062   0x....             LDR      R0,??DataTable102_14
   \   00000064   0x6046             STR      R6,[R0, #+4]
   \   00000066   0xE001             B        ??auxcalc_callback_6
   \                     ??auxcalc_callback_5: (+1)
   \   00000068   0x2002             MOVS     R0,#+2
   \   0000006A   0x8010             STRH     R0,[R2, #+0]
   \                     ??auxcalc_callback_6: (+1)
   \   0000006C   0x....             LDR      R0,??DataTable102_20  ;; 0x40059000
   \   0000006E   0x8146             STRH     R6,[R0, #+10]
   \   00000070   0x8006             STRH     R6,[R0, #+0]
   \   00000072   0x2080             MOVS     R0,#+128
   \   00000074   0x0180             LSLS     R0,R0,#+6        ;; #+8192
   \   00000076   0xE00A             B        ??auxcalc_callback_7
   \                     ??auxcalc_callback_4: (+1)
   \   00000078   0x....             LDR      R1,??DataTable102_14
   \   0000007A   0x6848             LDR      R0,[R1, #+4]
   \   0000007C   0x1C42             ADDS     R2,R0,#+1
   \   0000007E   0x604A             STR      R2,[R1, #+4]
   \   00000080   0x2817             CMP      R0,#+23
   \   00000082   0xD105             BNE      ??auxcalc_callback_8
   \   00000084   0x2008             MOVS     R0,#+8
   \   00000086   0x....             LDR      R1,??DataTable102_21  ;; 0x5185900e
   \   00000088   0x8008             STRH     R0,[R1, #+0]
   \   0000008A   0x2004             MOVS     R0,#+4
   \   0000008C   0x....             LDR      R1,??DataTable102_22  ;; 0x4805900e
   \                     ??auxcalc_callback_7: (+1)
   \   0000008E   0x8008             STRH     R0,[R1, #+0]
   \                     ??auxcalc_callback_8: (+1)
   \   00000090   0x....             LDR      R0,??DataTable102_8
   \   00000092   0x6E81             LDR      R1,[R0, #+104]
   \   00000094   0x....             LDR      R7,??DataTable102_6
   \   00000096   0x6878             LDR      R0,[R7, #+4]
   \   00000098   0x....             LDR      R2,??DataTable102_8
   \   0000009A   0x6E52             LDR      R2,[R2, #+100]
   \   0000009C   0x1A80             SUBS     R0,R0,R2
    484            
    485            /* scale and process measured samples                                       */
    486            METERLIB1PH_RemoveDcBias ((tMETERLIB1PH_DATA*)&mlib, 
    487                                    -L_mul ((u24_sample-ramcfg.u_offset), ramcfg.u_gain), 
    488                                    -L_mul ((i24_sample-ramcfg.i_offset), ramcfg.i_gain));
   \   0000009E   0x.... 0x....      BL       FRACLIB_FFMUL32
   \   000000A2   0x000D             MOVS     R5,R1
   \   000000A4   0x....             LDR      R0,??DataTable102_8
   \   000000A6   0x6F01             LDR      R1,[R0, #+112]
   \   000000A8   0x6838             LDR      R0,[R7, #+0]
   \   000000AA   0x....             LDR      R2,??DataTable102_8
   \   000000AC   0x6ED2             LDR      R2,[R2, #+108]
   \   000000AE   0x1A80             SUBS     R0,R0,R2
   \   000000B0   0x.... 0x....      BL       FRACLIB_FFMUL32
   \   000000B4   0x426A             RSBS     R2,R5,#+0
   \   000000B6   0x000B             MOVS     R3,R1
   \   000000B8   0x4259             RSBS     R1,R3,#+0
   \   000000BA   0x....             LDR      R0,??DataTable103
   \   000000BC   0x.... 0x....      BL       METERLIB1PH_RemoveDcBias
    489            
    490            /* calculate active energy                                                  */
    491            METERLIB1PH_CalcWattHours ((tMETERLIB1PH_DATA*)&mlib,(long*)&ramcnt.wh_cnt,
    492                                    kwh_pulses[ramcfg.wh_idx]);
   \   000000C0   0x....             LDR      R0,??DataTable102_8
   \   000000C2   0x8880             LDRH     R0,[R0, #+4]
   \   000000C4   0x....             LDR      R4,??DataTable103_1
   \   000000C6   0x00C0             LSLS     R0,R0,#+3
   \   000000C8   0x....             LDR      R1,??DataTable103_2
   \   000000CA   0x1808             ADDS     R0,R1,R0
   \   000000CC   0xC80C             LDM      R0!,{R2,R3}
   \   000000CE   0x0021             MOVS     R1,R4
   \   000000D0   0x....             LDR      R0,??DataTable103
   \   000000D2   0x.... 0x....      BL       METERLIB1PH_CalcWattHours
    493            
    494            /* calculate reactive energy                                                */
    495            METERLIB1PH_CalcVarHours ((tMETERLIB1PH_DATA*)&mlib, (long*)&ramcnt.varh_cnt,
    496                                    kvarh_pulses[ramcfg.varh_idx]);
   \   000000D6   0x....             LDR      R0,??DataTable102_8
   \   000000D8   0x88C0             LDRH     R0,[R0, #+6]
   \   000000DA   0x00C0             LSLS     R0,R0,#+3
   \   000000DC   0x....             LDR      R1,??DataTable103_2
   \   000000DE   0x1808             ADDS     R0,R1,R0
   \   000000E0   0x3080             ADDS     R0,R0,#+128
   \   000000E2   0xC80C             LDM      R0!,{R2,R3}
   \   000000E4   0x1D21             ADDS     R1,R4,#+4
   \   000000E6   0x....             LDR      R0,??DataTable103
   \   000000E8   0x.... 0x....      BL       METERLIB1PH_CalcVarHours
    497          
    498            /* calculate remaining non-billing quantities                               */
    499            METERLIB1PH_CalcAuxiliary ((tMETERLIB1PH_DATA*)&mlib);
   \   000000EC   0x....             LDR      R0,??DataTable103
   \   000000EE   0x.... 0x....      BL       METERLIB1PH_CalcAuxiliary
    500            FMSTR_Recorder ();
   \   000000F2   0x.... 0x....      BL       FMSTR_Recorder
    501            SWISR_HandlerFreqCall (1, 1200, 4);
   \   000000F6   0x....             LDR      R0,??DataTable102_9
   \   000000F8   0x8841             LDRH     R1,[R0, #+2]
   \   000000FA   0x1C49             ADDS     R1,R1,#+1
   \   000000FC   0x8041             STRH     R1,[R0, #+2]
   \   000000FE   0xB289             UXTH     R1,R1
   \   00000100   0x2296             MOVS     R2,#+150
   \   00000102   0x0052             LSLS     R2,R2,#+1        ;; #+300
   \   00000104   0x4291             CMP      R1,R2
   \   00000106   0xDB04             BLT      ??auxcalc_callback_9
   \   00000108   0x8046             STRH     R6,[R0, #+2]
   \   0000010A   0x2080             MOVS     R0,#+128
   \   0000010C   0x0500             LSLS     R0,R0,#+20       ;; #+134217728
   \   0000010E   0x....             LDR      R1,??DataTable102_10  ;; 0xe000e200
   \   00000110   0x6008             STR      R0,[R1, #+0]
    502            
    503            // MMA8491 Tilt Tamper enable signal
    504            GPIO_Tgl (FGPIOF, PIN7 ); 
   \                     ??auxcalc_callback_9: (+1)
   \   00000112   0x....             LDR      R0,??DataTable105  ;; 0xf8000041
   \   00000114   0x7801             LDRB     R1,[R0, #+0]
   \   00000116   0x2280             MOVS     R2,#+128
   \   00000118   0x404A             EORS     R2,R2,R1
   \   0000011A   0x7002             STRB     R2,[R0, #+0]
    505             
    506          }
   \   0000011C   0xBDF1             POP      {R0,R4-R7,PC}    ;; return

   \                                 In section .data, align 8
   \                     kwh_pulses:
   \   00000000   0xCE855E70         DC32 3464846960, 19826016, 1732423480, 9913008, 1551962852, 3965203
   \              0x012E8560   
   \              0x6742AF38   
   \              0x009742B0   
   \              0x5C8112E4   
   \              0x003C8113   
   \   00000018   0xAE408972         DC32 2923465074, 1982601, 3609216185, 991300, 1443686474, 396520
   \              0x001E4089   
   \              0xD72044B9   
   \              0x000F2044   
   \              0x560CE84A   
   \              0x00060CE8   
   \   00000030   0x2B067425         DC32 721843237, 198260, 360921619, 99130, 144368647, 39652, 72184324
   \              0x00030674   
   \              0x15833A13   
   \              0x0001833A   
   \              0x089AE407   
   \              0x00009AE4   
   \              0x044D7204   
   \   0000004C   0x00004D72         DC32 19826, 36092162, 9913, 873430324, 3965, 2584198810, 1982
   \              0x0226B902   
   \              0x000026B9   
   \              0x340F7D34   
   \              0x00000F7D   
   \              0x9A07BE9A   
   \              0x000007BE   
   \   00000068   0x4D03DF4D         DC32 1292099405, 991, 2793533350, 495, 1862355567, 330
   \              0x000003DF   
   \              0xA681EFA6   
   \              0x000001EF   
   \              0x6F014A6F   
   \              0x0000014A   
   \   00000080   0xCE855E70         DC32 3464846960, 19826016, 1732423480, 9913008, 1551962852, 3965203
   \              0x012E8560   
   \              0x6742AF38   
   \              0x009742B0   
   \              0x5C8112E4   
   \              0x003C8113   
   \   00000098   0xAE408972         DC32 2923465074, 1982601, 3609216185, 991300, 1443686474, 396520
   \              0x001E4089   
   \              0xD72044B9   
   \              0x000F2044   
   \              0x560CE84A   
   \              0x00060CE8   
   \   000000B0   0x2B067425         DC32 721843237, 198260, 360921619, 99130, 144368647, 39652, 72184324
   \              0x00030674   
   \              0x15833A13   
   \              0x0001833A   
   \              0x089AE407   
   \              0x00009AE4   
   \              0x044D7204   
   \   000000CC   0x00004D72         DC32 19826, 36092162, 9913, 873430324, 3965, 2584198810, 1982
   \              0x0226B902   
   \              0x000026B9   
   \              0x340F7D34   
   \              0x00000F7D   
   \              0x9A07BE9A   
   \              0x000007BE   
   \   000000E8   0x4D03DF4D         DC32 1292099405, 991, 2793533350, 495, 1862355567, 330
   \              0x000003DF   
   \              0xA681EFA6   
   \              0x000001EF   
   \              0x6F014A6F   
   \              0x0000014A   
   \   00000100   0x00000000         DC32 0
   \   00000104   0x00000000         DC32 0
    507          
    508          /* display and user interface callback @ 4 Hz, duration 7654 us, load 3.1 %   */
    509          #pragma diag_suppress=Pa082

   \                                 In section .text, align 2, keep-with-next
    510          static void display_callback (void)
    511          {
   \                     display_callback: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
   \   00000004   0x....             LDR      R0,??DataTable105_1
   \   00000006   0x9003             STR      R0,[SP, #+12]
   \   00000008   0x....             LDR      R0,??DataTable105_2
   \   0000000A   0x9002             STR      R0,[SP, #+8]
   \   0000000C   0x....             LDR      R0,??DataTable105_3
   \   0000000E   0x9001             STR      R0,[SP, #+4]
   \   00000010   0x....             LDR      R0,??DataTable105_4
   \   00000012   0x9000             STR      R0,[SP, #+0]
   \   00000014   0x....             LDR      R3,??DataTable105_5
   \   00000016   0x....             LDR      R2,??DataTable105_6
   \   00000018   0x....             LDR      R1,??DataTable105_7
   \   0000001A   0x....             LDR      R0,??DataTable103
    512            uint16 tmp16;
    513            static uint16 i;
    514            static double freqTMP =0.0;
    515          
    516            /* read data from metering engine - this is required for FreeMASTER         */
    517            METERLIB1PH_ReadResults ((tMETERLIB1PH_DATA*)&mlib, 
    518                                  (double*)&urms, 
    519                                  (double*)&irms, 
    520                                  (double*)&w, 
    521                                  (double*)&var, 
    522                                  (double*)&va, 
    523                                  (double*)&umax, 
    524                                  (double*)&imax);  
   \   0000001C   0x.... 0x....      BL       METERLIB1PH_ReadResults
    525          
    526            /* calibration - perform pre-processing conditionally and toggle user LED   */
    527            CONFIG_PreProcessing ((tCONFIG_FLASH_DATA*)&ramcfg, urms, irms, w, var);
   \   00000020   0x....             LDR      R0,??DataTable105_4
   \   00000022   0xC803             LDM      R0,{R0,R1}
   \   00000024   0x....             LDR      R2,??DataTable105_5
   \   00000026   0xCA30             LDM      R2!,{R4,R5}
   \   00000028   0x....             LDR      R2,??DataTable105_6
   \   0000002A   0xCA0C             LDM      R2,{R2,R3}
   \   0000002C   0x9004             STR      R0,[SP, #+16]
   \   0000002E   0x9105             STR      R1,[SP, #+20]
   \   00000030   0x9402             STR      R4,[SP, #+8]
   \   00000032   0x9503             STR      R5,[SP, #+12]
   \   00000034   0x9200             STR      R2,[SP, #+0]
   \   00000036   0x9301             STR      R3,[SP, #+4]
   \   00000038   0x....             LDR      R0,??DataTable105_7
   \   0000003A   0xC80C             LDM      R0!,{R2,R3}
   \   0000003C   0x....             LDR      R0,??DataTable105_8
   \   0000003E   0x.... 0x....      BL       CONFIG_PreProcessing
    528            if (CONFIG_CAL_PENDING ()) { GPIO_Tgl (FGPIOE, LED_USER_MASK ); }
   \   00000042   0x....             LDR      R0,??DataTable105_9  ;; 0xf8000040
   \   00000044   0x....             LDR      R1,??DataTable105_10
   \   00000046   0x8809             LDRH     R1,[R1, #+0]
   \   00000048   0x22F0             MOVS     R2,#+240
   \   0000004A   0x400A             ANDS     R2,R2,R1
   \   0000004C   0x2AF0             CMP      R2,#+240
   \   0000004E   0x7801             LDRB     R1,[R0, #+0]
   \   00000050   0xD102             BNE      ??display_callback_0
   \   00000052   0x2220             MOVS     R2,#+32
   \   00000054   0x404A             EORS     R2,R2,R1
   \   00000056   0xE001             B        ??display_callback_1
    529            else                       { GPIO_Set (FGPIOE, LED_USER_MASK ); } 
   \                     ??display_callback_0: (+1)
   \   00000058   0x2220             MOVS     R2,#+32
   \   0000005A   0x430A             ORRS     R2,R2,R1
   \                     ??display_callback_1: (+1)
   \   0000005C   0x7002             STRB     R2,[R0, #+0]
    530            
    531            /* update display and process commands                                      */
    532            IRTC_GetClock (&rTime);                 /* update clock data structure      */
   \   0000005E   0x....             LDR      R0,??DataTable105_11
   \   00000060   0x.... 0x....      BL       IRTC_GetClock
    533            
    534            /* read and process tamper flags                                            */
    535            tamper_flags = IRTC_GetIsrFlag(IRTC_TAMPER0_MASK) | 
    536                           (IRTC_GetIsrFlag(IRTC_TAMPER1_MASK)<<1)|
    537                           IRTC_GetIsrFlag(IRTC_TAMPER2_MASK)<<2;
   \   00000064   0x....             LDR      R1,??DataTable105_12  ;; 0x40050032
   \   00000066   0x8808             LDRH     R0,[R1, #+0]
   \   00000068   0x880A             LDRH     R2,[R1, #+0]
   \   0000006A   0x0A03             LSRS     R3,R0,#+8
   \   0000006C   0x0592             LSLS     R2,R2,#+22
   \   0000006E   0x0FD0             LSRS     R0,R2,#+31
   \   00000070   0x085A             LSRS     R2,R3,#+1
   \   00000072   0x4140             ADCS     R0,R0,R0
   \   00000074   0x8809             LDRH     R1,[R1, #+0]
   \   00000076   0x0549             LSLS     R1,R1,#+21
   \   00000078   0x0FCA             LSRS     R2,R1,#+31
   \   0000007A   0x0091             LSLS     R1,R2,#+2
   \   0000007C   0x4301             ORRS     R1,R1,R0
   \   0000007E   0x....             LDR      R0,??DataTable106
   \   00000080   0x7001             STRB     R1,[R0, #+0]
    538            
    539            
    540            if (tamper_flags) { _LCD_TAMPER_ON();  }
   \   00000082   0x....             LDR      R7,??DataTable106_1  ;; 0x40043031
   \   00000084   0x0609             LSLS     R1,R1,#+24
   \   00000086   0x78B8             LDRB     R0,[R7, #+2]
   \   00000088   0xD002             BEQ      ??display_callback_2
   \   0000008A   0x2101             MOVS     R1,#+1
   \   0000008C   0x4301             ORRS     R1,R1,R0
   \   0000008E   0xE001             B        ??display_callback_3
    541            else              { _LCD_TAMPER_OFF(); }
   \                     ??display_callback_2: (+1)
   \   00000090   0x21FE             MOVS     R1,#+254
   \   00000092   0x4001             ANDS     R1,R1,R0
   \                     ??display_callback_3: (+1)
   \   00000094   0x70B9             STRB     R1,[R7, #+2]
    542            
    543           
    544            /* read phase voltage frequency                                             */
    545            //if (TMR_ReadClrCaptReg(CH0,&tmp16) == TRUE) { freq = TMR2FREQ(tmp16); }
    546            
    547            /* read phase voltage frequency + averaging                                 */
    548            if (TMR_ReadClrCaptReg(CH0,&tmp16) == TRUE) 
   \   00000096   0x....             LDR      R0,??DataTable106_2  ;; 0x40057004
   \   00000098   0x8941             LDRH     R1,[R0, #+10]
   \   0000009A   0x0509             LSLS     R1,R1,#+20
   \   0000009C   0xD507             BPL      ??display_callback_4
   \   0000009E   0x8800             LDRH     R0,[R0, #+0]
   \   000000A0   0x4669             MOV      R1,SP
   \   000000A2   0x8308             STRH     R0,[R1, #+24]
   \   000000A4   0x....             LDR      R0,??DataTable106_3  ;; 0xf7ff
   \   000000A6   0x....             LDR      R1,??DataTable106_4  ;; 0x4405700e
   \   000000A8   0x8008             STRH     R0,[R1, #+0]
   \   000000AA   0x2001             MOVS     R0,#+1
   \   000000AC   0xE000             B        ??display_callback_5
   \                     ??display_callback_4: (+1)
   \   000000AE   0x2000             MOVS     R0,#+0
   \                     ??display_callback_5: (+1)
   \   000000B0   0x....             LDR      R1,??DataTable106
   \   000000B2   0x884E             LDRH     R6,[R1, #+2]
   \   000000B4   0x....             LDR      R1,??DataTable106_5
   \   000000B6   0xC930             LDM      R1!,{R4,R5}
   \   000000B8   0x2800             CMP      R0,#+0
   \   000000BA   0xD026             BEQ      ??display_callback_6
    549            {
    550              (double)(freq = ((double)TMR2FREQ(tmp16)/2)); 
   \   000000BC   0x4668             MOV      R0,SP
   \   000000BE   0x8B00             LDRH     R0,[R0, #+24]
   \   000000C0   0x.... 0x....      BL       __aeabi_ui2d
   \   000000C4   0x0002             MOVS     R2,R0
   \   000000C6   0x000B             MOVS     R3,R1
   \   000000C8   0x2000             MOVS     R0,#+0
   \   000000CA   0x....             LDR      R1,??DataTable106_6  ;; 0x41377000
   \   000000CC   0x.... 0x....      BL       __aeabi_ddiv
   \   000000D0   0x2200             MOVS     R2,#+0
   \   000000D2   0x....             LDR      R3,??DataTable106_7  ;; 0x3fe00000
   \   000000D4   0x.... 0x....      BL       __aeabi_dmul
   \   000000D8   0x....             LDR      R2,??DataTable106_8
   \   000000DA   0xC203             STM      R2!,{R0,R1}
    551              
    552              if(i<FRQAVG)
   \   000000DC   0x2E05             CMP      R6,#+5
   \   000000DE   0xD209             BCS      ??display_callback_7
    553              {
    554                freqTMP = freq + freqTMP;
   \   000000E0   0x....             LDR      R0,??DataTable106_8
   \   000000E2   0xC80C             LDM      R0!,{R2,R3}
   \   000000E4   0x0020             MOVS     R0,R4
   \   000000E6   0x0029             MOVS     R1,R5
   \   000000E8   0x.... 0x....      BL       __aeabi_dadd
   \   000000EC   0x0004             MOVS     R4,R0
   \   000000EE   0x000D             MOVS     R5,R1
    555                i++;
   \   000000F0   0x1C76             ADDS     R6,R6,#+1
   \   000000F2   0xE00A             B        ??display_callback_6
    556              }
    557              else
    558              {
    559                freqAVG = (double)((double)freqTMP/FRQAVG);
   \                     ??display_callback_7: (+1)
   \   000000F4   0x0020             MOVS     R0,R4
   \   000000F6   0x0029             MOVS     R1,R5
   \   000000F8   0x2200             MOVS     R2,#+0
   \   000000FA   0x....             LDR      R3,??DataTable106_9  ;; 0x40140000
   \   000000FC   0x.... 0x....      BL       __aeabi_ddiv
   \   00000100   0x....             LDR      R2,??DataTable106_10
   \   00000102   0xC203             STM      R2!,{R0,R1}
    560                i=0;
   \   00000104   0x2600             MOVS     R6,#+0
    561                freqTMP=0;
   \   00000106   0x2400             MOVS     R4,#+0
   \   00000108   0x2500             MOVS     R5,#+0
   \                     ??display_callback_6: (+1)
   \   0000010A   0x....             LDR      R0,??DataTable106_5
   \   0000010C   0xC030             STM      R0!,{R4,R5}
   \   0000010E   0x....             LDR      R0,??DataTable106
   \   00000110   0x8046             STRH     R6,[R0, #+2]
    562              }
    563            }
    564             
    565            menu_fcn[ramcnt.menu_idx]();            /* store text string to buffer      */
   \   00000112   0x....             LDR      R0,??DataTable103_1
   \   00000114   0x8900             LDRH     R0,[R0, #+8]
   \   00000116   0x0080             LSLS     R0,R0,#+2
   \   00000118   0x....             LDR      R1,??DataTable106
   \   0000011A   0x1808             ADDS     R0,R1,R0
   \   0000011C   0x6980             LDR      R0,[R0, #+24]
   \   0000011E   0x4780             BLX      R0
    566            LCD_DISP_TARIF_SYM  (ramcfg.tarif);     /* display tarif information        */
   \   00000120   0x7838             LDRB     R0,[R7, #+0]
   \   00000122   0x....             LDR      R1,??DataTable105_8
   \   00000124   0x8849             LDRH     R1,[R1, #+2]
   \   00000126   0x2901             CMP      R1,#+1
   \   00000128   0xD102             BNE      ??display_callback_8
   \   0000012A   0x2104             MOVS     R1,#+4
   \   0000012C   0x4301             ORRS     R1,R1,R0
   \   0000012E   0xE001             B        ??display_callback_9
   \                     ??display_callback_8: (+1)
   \   00000130   0x21FB             MOVS     R1,#+251
   \   00000132   0x4001             ANDS     R1,R1,R0
   \                     ??display_callback_9: (+1)
   \   00000134   0x7039             STRB     R1,[R7, #+0]
   \   00000136   0x7838             LDRB     R0,[R7, #+0]
   \   00000138   0x....             LDR      R1,??DataTable105_8
   \   0000013A   0x8849             LDRH     R1,[R1, #+2]
   \   0000013C   0x2902             CMP      R1,#+2
   \   0000013E   0xD102             BNE      ??display_callback_10
   \   00000140   0x2108             MOVS     R1,#+8
   \   00000142   0x4301             ORRS     R1,R1,R0
   \   00000144   0xE001             B        ??display_callback_11
   \                     ??display_callback_10: (+1)
   \   00000146   0x21F7             MOVS     R1,#+247
   \   00000148   0x4001             ANDS     R1,R1,R0
   \                     ??display_callback_11: (+1)
   \   0000014A   0x7039             STRB     R1,[R7, #+0]
   \   0000014C   0x7838             LDRB     R0,[R7, #+0]
   \   0000014E   0x....             LDR      R1,??DataTable105_8
   \   00000150   0x8849             LDRH     R1,[R1, #+2]
   \   00000152   0x2903             CMP      R1,#+3
   \   00000154   0xD102             BNE      ??display_callback_12
   \   00000156   0x2110             MOVS     R1,#+16
   \   00000158   0x4301             ORRS     R1,R1,R0
   \   0000015A   0xE001             B        ??display_callback_13
   \                     ??display_callback_12: (+1)
   \   0000015C   0x21EF             MOVS     R1,#+239
   \   0000015E   0x4001             ANDS     R1,R1,R0
   \                     ??display_callback_13: (+1)
   \   00000160   0x7039             STRB     R1,[R7, #+0]
   \   00000162   0x7838             LDRB     R0,[R7, #+0]
   \   00000164   0x....             LDR      R1,??DataTable105_8
   \   00000166   0x8849             LDRH     R1,[R1, #+2]
   \   00000168   0x2904             CMP      R1,#+4
   \   0000016A   0xD102             BNE      ??display_callback_14
   \   0000016C   0x2120             MOVS     R1,#+32
   \   0000016E   0x4301             ORRS     R1,R1,R0
   \   00000170   0xE001             B        ??display_callback_15
   \                     ??display_callback_14: (+1)
   \   00000172   0x21DF             MOVS     R1,#+223
   \   00000174   0x4001             ANDS     R1,R1,R0
   \                     ??display_callback_15: (+1)
   \   00000176   0x7039             STRB     R1,[R7, #+0]
    567            fcmd_fcn[fcmd_idx]  ();                 /* process FreeMASTER command       */  
   \   00000178   0x2010             MOVS     R0,#+16
   \   0000017A   0x....             LDR      R1,??DataTable107
   \   0000017C   0x5608             LDRSB    R0,[R1, R0]
   \   0000017E   0x0080             LSLS     R0,R0,#+2
   \   00000180   0x....             LDR      R1,??DataTable106
   \   00000182   0x1808             ADDS     R0,R1,R0
   \   00000184   0x6D40             LDR      R0,[R0, #+84]
   \   00000186   0x4780             BLX      R0
    568            /* refresh watchdog Timer                                                   */
    569            //WDOG_WriteRefreshSeq ();
    570          }
   \   00000188   0xB007             ADD      SP,SP,#+28
   \   0000018A   0xBDF0             POP      {R4-R7,PC}       ;; return

   \                                 In section .data, align 8
   \                     tamper_flags:
   \   00000000   0x00               DC8 0
   \   00000001   0x00               DC8 0
   \   00000002   0x00 0x00          DC8 0, 0
   \   00000004   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   \                     freq:
   \   00000008   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000010   0x00000000         DC32 0H, 0H
   \              0x00000000   
   \   00000018   0x........         DC32 menu_disp_date, menu_disp_time, menu_disp_urms, menu_disp_irms
   \              0x........   
   \              0x........   
   \              0x........   
   \   00000028   0x........         DC32 menu_disp_kW, menu_disp_kVAR, menu_disp_kVA, menu_disp_kWh
   \              0x........   
   \              0x........   
   \              0x........   
   \   00000038   0x........         DC32 menu_disp_kVARh, menu_disp_freq, menu_disp_vbat, menu_disp_pnum1
   \              0x........   
   \              0x........   
   \              0x........   
   \   00000048   0x........         DC32 menu_disp_pnum2, menu_disp_snum, menu_disp_class
   \              0x........   
   \              0x........   
   \   00000054   0x........         DC32 fcmd_dummy_fcn, fcmd_sw_reset, fcmd_clr_counter, fcmd_clr_tampers
   \              0x........   
   \              0x........   
   \              0x........   
   \   00000064   0x........         DC32 fcmd_set_clock, fcmd_set_pulse1, fcmd_set_pulse2, fcmd_calibrate
   \              0x........   
   \              0x........   
   \              0x........   
   \   00000074   0x........         DC32 fcmd_save_config
   \   00000078   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000080   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    

   \                                 In section .data, align 8
   \                     mlib:
   \   00000000   0x00000000         DC32 0H, 407A4000H, 0H, 40554000H, 60154, 1, 2144676271, -2144676272
   \              0x407A4000   
   \              0x00000000   
   \              0x40554000   
   \              0x0000EAFA   
   \              0x00000001   
   \              0x7FD529AF   
   \              0x802AD650   
   \   00000020   0x8055ACA1         DC32 -2141868895, 282721586, 282721586, -2147483648, 0
   \              0x10D9FD32   
   \              0x10D9FD32   
   \              0x80000000   
   \              0x00000000   
   \   00000034   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   \   00000038   0x00000000         DC32 0, 0, 0
   \              0x00000000   
   \              0x00000000   
   \   00000044   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   \   00000048   0x00000000         DC32 0, 0, 0
   \              0x00000000   
   \              0x00000000   
   \   00000054   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   \   00000058   0x00000000         DC32 0, 0, 0
   \              0x00000000   
   \              0x00000000   
   \   00000064   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   \   00000068   0x00000000         DC32 0, 0, 0
   \              0x00000000   
   \              0x00000000   
   \   00000074   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   \   00000078   0x00000000         DC32 0, 0
   \              0x00000000   
   \   00000080   0x0031             DC16 49
   \   00000082   0x00 0x00          DC8 0, 0
   \   00000084   0x00000000         DC32 0, -1583307, 0, -4225180, 0, -8846469, 0, -16252997, 0, -27460311
   \              0xFFE7D735   
   \              0x00000000   
   \              0xFFBF8764   
   \              0x00000000   
   \              0xFF79037B   
   \              0x00000000   
   \              0xFF07FFBB   
   \              0x00000000   
   \              0xFE5CFD29   
   \   000000AC   0x00000000         DC32 0, -43823357, 0, -67355472, 0, -101535286, 0, -153569015, 0
   \              0xFD634F03   
   \              0x00000000   
   \              0xFBFC3CB0   
   \              0x00000000   
   \              0xF9F2B1CA   
   \              0x00000000   
   \              0xF6D8B909   
   \              0x00000000   
   \   000000D0   0xF19108DA         DC32 -242153254, 0, -436334490, 0, -1360567170, 0, 1360567169, 0
   \              0x00000000   
   \              0xE5FE1066   
   \              0x00000000   
   \              0xAEE7647E   
   \              0x00000000   
   \              0x51189B81   
   \              0x00000000   
   \   000000F0   0x1A01EF9A         DC32 436334490, 0, 242153254, 0, 153569015, 0, 101535286, 0, 67355472
   \              0x00000000   
   \              0x0E6EF726   
   \              0x00000000   
   \              0x092746F7   
   \              0x00000000   
   \              0x060D4E36   
   \              0x00000000   
   \              0x0403C350   
   \   00000114   0x00000000         DC32 0, 43823357, 0, 27460311, 0, 16252997, 0, 8846469, 0, 4225180, 0
   \              0x029CB0FD   
   \              0x00000000   
   \              0x01A302D7   
   \              0x00000000   
   \              0x00F80045   
   \              0x00000000   
   \              0x0086FC85   
   \              0x00000000   
   \              0x0040789C   
   \              0x00000000   
   \   00000140   0x001828CB         DC32 1583307, 0
   \              0x00000000   
   \   00000148   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000158   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000168   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000178   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000188   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000198   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000001A8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000001B8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000001C8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000001D8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000001E8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000001F8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000208   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000218   0x0019 0x0000      DC16 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \   00000244   0x0000 0x0000      DC16 0, 0, 0, -32768
   \              0x0000 0x8000
   \   0000024C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000025C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000026C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000280   0x00000000         DC32 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \   000002D8   0x00000000         DC32 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \   00000330   0x00000000         DC32 0, 0, 0, 0, 0
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \   00000344   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000354   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000364   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000374   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000384   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000394   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000003A4   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000003B4   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000003C4   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000003D4   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000003E4   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000003F4   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000404   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000418   0x00000000         DC32 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \   00000470   0x00000000         DC32 0, 0, 0, 0, 0
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \   00000484   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000494   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000004A4   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000004B4   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000004C4   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000004D4   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000004E4   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000004EC   0x00000000         DC32 0, 2246488, 2246488, -2142990672, 2246488, 2246488, -2142990672, 0
   \              0x00224758   
   \              0x00224758   
   \              0x80448EB0   
   \              0x00224758   
   \              0x00224758   
   \              0x80448EB0   
   \              0x00000000   
   \   0000050C   0x00000000         DC32 0, 0, 0, 0
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \   0000051C   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   \   00000520   0x00000000         DC32 0, 0, 0, 0, 0, 0, 0
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \   0000053C   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   \   00000540   0x00000000         DC32 0, 0, 0, 0, 0, 0, 0
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \   0000055C   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   \   00000560   0x00000000         DC32 0, 0, 0, 0, 0, 0, 0
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \   0000057C   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   \   00000580   0x00000000         DC32 0, 0, 118266797, 0, 144368647, 39652, 0, 0, 0, 0, 0
   \              0x00000000   
   \              0x070C9BAD   
   \              0x00000000   
   \              0x089AE407   
   \              0x00009AE4   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \   000005AC   0x8000             DC16 -32768
   \   000005AE   0x00 0x00          DC8 0, 0
   \   000005B0   0x00FF5BE3         DC32 16735203, 16735203, -2114013241
   \              0x00FF5BE3   
   \              0x81FEB7C7   
   \   000005BC   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   \   000005C0   0x00000000         DC32 0, 0, 0, 0, 59133398, 0, 144368647, 39652, 0, 0, 0, 0, 0
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x03864DD6   
   \              0x00000000   
   \              0x089AE407   
   \              0x00009AE4   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \   000005F4   0x8000             DC16 -32768
   \   000005F6   0x00 0x00          DC8 0, 0
   \   000005F8   0x00FF5BE3         DC32 16735203, 16735203, -2114013241
   \              0x00FF5BE3   
   \              0x81FEB7C7   
   \   00000604   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   \   00000608   0x00000000         DC32 0, 0, 0, 0
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
    571          
    572          
    573          
    574          /* digital logic asynchronous processing                                      */

   \                                 In section .text, align 2, keep-with-next
    575          static void button_callback(PORT_CALLBACK_SRC src, uint8 pin)
    576          {  
    577            /* PTD7 user button menu FWD                                                */
    578            if (src == PORTD_CALLBACK)
   \                     button_callback: (+1)
   \   00000000   0x2808             CMP      R0,#+8
   \   00000002   0xD127             BNE      ??button_callback_0
    579            {
    580              if (pin & BUTTON_MASK)
   \   00000004   0x07C8             LSLS     R0,R1,#+31
   \   00000006   0xD532             BPL      ??button_callback_1
    581              { 
    582                /* update menu index                                                    */
    583                if ((++ramcnt.menu_idx) >= DIM(menu_fcn)) { ramcnt.menu_idx = 0; }
   \   00000008   0x....             LDR      R0,??DataTable107_1
   \   0000000A   0x8901             LDRH     R1,[R0, #+8]
   \   0000000C   0x1C49             ADDS     R1,R1,#+1
   \   0000000E   0x8101             STRH     R1,[R0, #+8]
   \   00000010   0xB289             UXTH     R1,R1
   \   00000012   0x290F             CMP      R1,#+15
   \   00000014   0xD301             BCC      ??button_callback_2
   \   00000016   0x2100             MOVS     R1,#+0
   \   00000018   0x8101             STRH     R1,[R0, #+8]
    584                
    585                /* Tamper flag clear cheat, just to allow tamper event clearing for DEMO*/
    586                if((GPIO_Get(GPIOE)& BUTTON2_MASK)==0)
   \                     ??button_callback_2: (+1)
   \   0000001A   0x....             LDR      R0,??DataTable107_2  ;; 0x400ff050
   \   0000001C   0x7800             LDRB     R0,[R0, #+0]
   \   0000001E   0x06C0             LSLS     R0,R0,#+27
   \   00000020   0xD425             BMI      ??button_callback_1
   \   00000022   0x....             LDR      R0,??DataTable107_3  ;; 0x40050012
   \   00000024   0xE001             B        ??button_callback_3
    587                   IRTC_ClrIsrFlag (IRTC_TAMPER0_MASK|IRTC_TAMPER1_MASK|IRTC_TAMPER2_MASK);
   \                     ??button_callback_4: (+1)
   \   00000026   0x2180             MOVS     R1,#+128
   \   00000028   0x7001             STRB     R1,[R0, #+0]
   \                     ??button_callback_3: (+1)
   \   0000002A   0x2102             MOVS     R1,#+2
   \   0000002C   0x8802             LDRH     R2,[R0, #+0]
   \   0000002E   0x420A             TST      R2,R1
   \   00000030   0xD0F9             BEQ      ??button_callback_4
   \                     ??button_callback_5: (+1)
   \   00000032   0x2200             MOVS     R2,#+0
   \   00000034   0x8803             LDRH     R3,[R0, #+0]
   \   00000036   0x420B             TST      R3,R1
   \   00000038   0xD007             BEQ      ??button_callback_6
   \   0000003A   0x7002             STRB     R2,[R0, #+0]
   \   0000003C   0x2240             MOVS     R2,#+64
   \   0000003E   0x7002             STRB     R2,[R0, #+0]
   \   00000040   0x22C0             MOVS     R2,#+192
   \   00000042   0x7002             STRB     R2,[R0, #+0]
   \   00000044   0x2280             MOVS     R2,#+128
   \   00000046   0x7002             STRB     R2,[R0, #+0]
   \   00000048   0xE7F3             B        ??button_callback_5
   \                     ??button_callback_6: (+1)
   \   0000004A   0x21E0             MOVS     R1,#+224
   \   0000004C   0x00C9             LSLS     R1,R1,#+3        ;; #+1792
   \   0000004E   0x8401             STRH     R1,[R0, #+32]
   \   00000050   0x8042             STRH     R2,[R0, #+2]
   \   00000052   0xE00C             B        ??button_callback_1
    588              }
    589            }
    590            
    591            /* PTE4 user button                                                         */
    592            if (src == PORTE_CALLBACK)
   \                     ??button_callback_0: (+1)
   \   00000054   0x2810             CMP      R0,#+16
   \   00000056   0xD10A             BNE      ??button_callback_1
    593            {
    594              if (pin & BUTTON2_MASK)
   \   00000058   0x06C8             LSLS     R0,R1,#+27
   \   0000005A   0xD508             BPL      ??button_callback_1
    595              { 
    596                /* update menu index                                                    */
    597                if    (ramcnt.menu_idx != 0) ramcnt.menu_idx--;
   \   0000005C   0x....             LDR      R0,??DataTable107_1
   \   0000005E   0x8901             LDRH     R1,[R0, #+8]
   \   00000060   0x2900             CMP      R1,#+0
   \   00000062   0xD002             BEQ      ??button_callback_7
   \   00000064   0x8901             LDRH     R1,[R0, #+8]
   \   00000066   0x1E49             SUBS     R1,R1,#+1
   \   00000068   0xE000             B        ??button_callback_8
    598                else  ramcnt.menu_idx = (DIM(menu_fcn)-1); // menu wraps around
   \                     ??button_callback_7: (+1)
   \   0000006A   0x210E             MOVS     R1,#+14
   \                     ??button_callback_8: (+1)
   \   0000006C   0x8101             STRH     R1,[R0, #+8]
    599                
    600              }
    601            }
    602            
    603            if ((ramcnt.menu_idx) >= DIM(menu_fcn)) { ramcnt.menu_idx = 0; }
   \                     ??button_callback_1: (+1)
   \   0000006E   0x....             LDR      R0,??DataTable107_1
   \   00000070   0x8901             LDRH     R1,[R0, #+8]
   \   00000072   0x290F             CMP      R1,#+15
   \   00000074   0xD301             BCC      ??button_callback_9
   \   00000076   0x2100             MOVS     R1,#+0
   \   00000078   0x8101             STRH     R1,[R0, #+8]
    604             
    605          }
   \                     ??button_callback_9: (+1)
   \   0000007A   0x4770             BX       LR               ;; return
    606          
    607          /******************************************************************************
    608           * Menu functions definition
    609           ******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    610          static void menu_disp_date  (void)
    611          {
   \                     menu_disp_date: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
    612            sprintf((char*)buf,"%02d%02d %04d",rTime.day,rTime.mon,rTime.year);
   \   00000004   0x....             LDR      R4,??DataTable107
   \   00000006   0x89E0             LDRH     R0,[R4, #+14]
   \   00000008   0x9000             STR      R0,[SP, #+0]
   \   0000000A   0x7B63             LDRB     R3,[R4, #+13]
   \   0000000C   0x7AE2             LDRB     R2,[R4, #+11]
   \   0000000E   0xBF00             Nop      
   \   00000010   0x....             ADR.N    R1,`?<Constant "%02d%02d %04d">`
   \   00000012   0x....             B.N      ?Subroutine0
    613            vfnLCD_Write_Str    (buf,1);
    614            
    615            _LCD_BIG_SYMB_OFF();
    616            _LCD_SML_SYMB_OFF();
    617            _LCD_P3_OFF();
    618          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \   00000000   0x0020             MOVS     R0,R4
   \   00000002   0x3048             ADDS     R0,R0,#+72
   \   00000004   0x.... 0x....      BL       sprintf
   \   00000008   0x2101             MOVS     R1,#+1
   \   0000000A   0x3448             ADDS     R4,R4,#+72
   \   0000000C   0x0020             MOVS     R0,R4
   \   0000000E   0x.... 0x....      BL       vfnLCD_Write_Str
   \   00000012   0x....             LDR      R0,??DataTable106_1  ;; 0x40043031
   \   00000014   0x7B81             LDRB     R1,[R0, #+14]
   \   00000016   0x22FE             MOVS     R2,#+254
   \   00000018   0x400A             ANDS     R2,R2,R1
   \   0000001A   0x7382             STRB     R2,[R0, #+14]
   \   0000001C   0x21DF             MOVS     R1,#+223
   \   0000001E   0x400A             ANDS     R2,R2,R1
   \   00000020   0x7382             STRB     R2,[R0, #+14]
   \   00000022   0x22FD             MOVS     R2,#+253
   \   00000024   0x7BC3             LDRB     R3,[R0, #+15]
   \   00000026   0x4013             ANDS     R3,R3,R2
   \   00000028   0x73C3             STRB     R3,[R0, #+15]
   \   0000002A   0x23EF             MOVS     R3,#+239
   \   0000002C   0x7B84             LDRB     R4,[R0, #+14]
   \   0000002E   0x401C             ANDS     R4,R4,R3
   \   00000030   0x7384             STRB     R4,[R0, #+14]
   \   00000032   0x7BC6             LDRB     R6,[R0, #+15]
   \   00000034   0x401E             ANDS     R6,R6,R3
   \   00000036   0x73C6             STRB     R6,[R0, #+15]
   \   00000038   0x24FB             MOVS     R4,#+251
   \   0000003A   0x4026             ANDS     R6,R6,R4
   \   0000003C   0x73C6             STRB     R6,[R0, #+15]
   \   0000003E   0x25F7             MOVS     R5,#+247
   \   00000040   0x402E             ANDS     R6,R6,R5
   \   00000042   0x73C6             STRB     R6,[R0, #+15]
   \   00000044   0x7B86             LDRB     R6,[R0, #+14]
   \   00000046   0x4026             ANDS     R6,R6,R4
   \   00000048   0x7386             STRB     R6,[R0, #+14]
   \   0000004A   0x7BC6             LDRB     R6,[R0, #+15]
   \   0000004C   0x4026             ANDS     R6,R6,R4
   \   0000004E   0x73C6             STRB     R6,[R0, #+15]
   \   00000050   0x7B86             LDRB     R6,[R0, #+14]
   \   00000052   0x402E             ANDS     R6,R6,R5
   \   00000054   0x7386             STRB     R6,[R0, #+14]
   \   00000056   0x400E             ANDS     R6,R6,R1
   \   00000058   0x7386             STRB     R6,[R0, #+14]
   \   0000005A   0x4026             ANDS     R6,R6,R4
   \   0000005C   0x7386             STRB     R6,[R0, #+14]
   \   0000005E   0x7BC6             LDRB     R6,[R0, #+15]
   \   00000060   0x400E             ANDS     R6,R6,R1
   \   00000062   0x73C6             STRB     R6,[R0, #+15]
   \   00000064   0x401E             ANDS     R6,R6,R3
   \   00000066   0x73C6             STRB     R6,[R0, #+15]
   \   00000068   0x4026             ANDS     R6,R6,R4
   \   0000006A   0x73C6             STRB     R6,[R0, #+15]
   \   0000006C   0x7B86             LDRB     R6,[R0, #+14]
   \   0000006E   0x402E             ANDS     R6,R6,R5
   \   00000070   0x7386             STRB     R6,[R0, #+14]
   \   00000072   0x400E             ANDS     R6,R6,R1
   \   00000074   0x7386             STRB     R6,[R0, #+14]
   \   00000076   0x4026             ANDS     R6,R6,R4
   \   00000078   0x7386             STRB     R6,[R0, #+14]
   \   0000007A   0x7BC6             LDRB     R6,[R0, #+15]
   \   0000007C   0x401E             ANDS     R6,R6,R3
   \   0000007E   0x73C6             STRB     R6,[R0, #+15]
   \   00000080   0x4026             ANDS     R6,R6,R4
   \   00000082   0x73C6             STRB     R6,[R0, #+15]
   \   00000084   0x7846             LDRB     R6,[R0, #+1]
   \   00000086   0x400E             ANDS     R6,R6,R1
   \   00000088   0x7046             STRB     R6,[R0, #+1]
   \   0000008A   0x401E             ANDS     R6,R6,R3
   \   0000008C   0x7046             STRB     R6,[R0, #+1]
   \   0000008E   0x7806             LDRB     R6,[R0, #+0]
   \   00000090   0x4016             ANDS     R6,R6,R2
   \   00000092   0x7006             STRB     R6,[R0, #+0]
   \   00000094   0x7846             LDRB     R6,[R0, #+1]
   \   00000096   0x402E             ANDS     R6,R6,R5
   \   00000098   0x7046             STRB     R6,[R0, #+1]
   \   0000009A   0x401E             ANDS     R6,R6,R3
   \   0000009C   0x7046             STRB     R6,[R0, #+1]
   \   0000009E   0x400E             ANDS     R6,R6,R1
   \   000000A0   0x7046             STRB     R6,[R0, #+1]
   \   000000A2   0x4035             ANDS     R5,R5,R6
   \   000000A4   0x7045             STRB     R5,[R0, #+1]
   \   000000A6   0x402C             ANDS     R4,R4,R5
   \   000000A8   0x7044             STRB     R4,[R0, #+1]
   \   000000AA   0x4021             ANDS     R1,R1,R4
   \   000000AC   0x7041             STRB     R1,[R0, #+1]
   \   000000AE   0x400B             ANDS     R3,R3,R1
   \   000000B0   0x7043             STRB     R3,[R0, #+1]
   \   000000B2   0x7801             LDRB     R1,[R0, #+0]
   \   000000B4   0x0649             LSLS     R1,R1,#+25
   \   000000B6   0x0E49             LSRS     R1,R1,#+25
   \   000000B8   0x7001             STRB     R1,[R0, #+0]
   \   000000BA   0x23BF             MOVS     R3,#+191
   \   000000BC   0x400B             ANDS     R3,R3,R1
   \   000000BE   0x7003             STRB     R3,[R0, #+0]
   \   000000C0   0x7841             LDRB     R1,[R0, #+1]
   \   000000C2   0x400A             ANDS     R2,R2,R1
   \   000000C4   0x7042             STRB     R2,[R0, #+1]
   \   000000C6   0xBD73             POP      {R0,R1,R4-R6,PC}  ;; return
    619          

   \                                 In section .text, align 2, keep-with-next
    620          static void menu_disp_time  (void)
    621          {
   \                     menu_disp_time: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
    622            sprintf((char*)buf," %02d %02d %02d",rTime.hour, rTime.min, rTime.sec);
   \   00000004   0x....             LDR      R4,??DataTable107
   \   00000006   0x7A20             LDRB     R0,[R4, #+8]
   \   00000008   0x9000             STR      R0,[SP, #+0]
   \   0000000A   0x7A63             LDRB     R3,[R4, #+9]
   \   0000000C   0x7AA2             LDRB     R2,[R4, #+10]
   \   0000000E   0x....             LDR      R1,??DataTable108
   \   00000010                      REQUIRE ?Subroutine0
   \   00000010                      ;; // Fall through to label ?Subroutine0
    623            vfnLCD_Write_Str(buf,1);
    624            _LCD_BIG_SYMB_OFF();
    625            _LCD_SML_SYMB_OFF();
    626            _LCD_P3_OFF();
    627          }
    628          

   \                                 In section .text, align 2, keep-with-next
    629          static void menu_disp_urms  (void)
    630          {
   \                     menu_disp_urms: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
    631            sprintf((char*)buf," %8.3f",urms);
   \   00000002   0x....             LDR      R4,??DataTable107
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0x3018             ADDS     R0,R0,#+24
   \   00000008   0xC80C             LDM      R0!,{R2,R3}
   \   0000000A   0x....             LDR      R1,??DataTable109
   \   0000000C   0x0020             MOVS     R0,R4
   \   0000000E   0x3048             ADDS     R0,R0,#+72
   \   00000010   0x.... 0x....      BL       sprintf
    632            vfnLCD_Write_Str(buf,1);                /* display text on LCD              */
   \   00000014   0x2101             MOVS     R1,#+1
   \   00000016   0x3448             ADDS     R4,R4,#+72
   \   00000018   0x0020             MOVS     R0,R4
   \   0000001A   0x.... 0x....      BL       vfnLCD_Write_Str
    633            _LCD_BIG_SYMB_OFF();
   \   0000001E   0x....             LDR      R0,??DataTable109_1  ;; 0x40043031
   \   00000020   0x7B81             LDRB     R1,[R0, #+14]
   \   00000022   0x22FE             MOVS     R2,#+254
   \   00000024   0x400A             ANDS     R2,R2,R1
   \   00000026   0x7382             STRB     R2,[R0, #+14]
   \   00000028   0x21DF             MOVS     R1,#+223
   \   0000002A   0x400A             ANDS     R2,R2,R1
   \   0000002C   0x7382             STRB     R2,[R0, #+14]
   \   0000002E   0x22FD             MOVS     R2,#+253
   \   00000030   0x7BC3             LDRB     R3,[R0, #+15]
   \   00000032   0x4013             ANDS     R3,R3,R2
   \   00000034   0x73C3             STRB     R3,[R0, #+15]
   \   00000036   0x23EF             MOVS     R3,#+239
   \   00000038   0x7B84             LDRB     R4,[R0, #+14]
   \   0000003A   0x401C             ANDS     R4,R4,R3
   \   0000003C   0x7384             STRB     R4,[R0, #+14]
   \   0000003E   0x7BC6             LDRB     R6,[R0, #+15]
   \   00000040   0x401E             ANDS     R6,R6,R3
   \   00000042   0x73C6             STRB     R6,[R0, #+15]
   \   00000044   0x24FB             MOVS     R4,#+251
   \   00000046   0x4026             ANDS     R6,R6,R4
   \   00000048   0x73C6             STRB     R6,[R0, #+15]
   \   0000004A   0x25F7             MOVS     R5,#+247
   \   0000004C   0x402E             ANDS     R6,R6,R5
   \   0000004E   0x73C6             STRB     R6,[R0, #+15]
   \   00000050   0x7B86             LDRB     R6,[R0, #+14]
   \   00000052   0x4026             ANDS     R6,R6,R4
   \   00000054   0x7386             STRB     R6,[R0, #+14]
   \   00000056   0x7BC6             LDRB     R6,[R0, #+15]
   \   00000058   0x4026             ANDS     R6,R6,R4
   \   0000005A   0x73C6             STRB     R6,[R0, #+15]
   \   0000005C   0x7B86             LDRB     R6,[R0, #+14]
   \   0000005E   0x402E             ANDS     R6,R6,R5
   \   00000060   0x7386             STRB     R6,[R0, #+14]
   \   00000062   0x400E             ANDS     R6,R6,R1
   \   00000064   0x7386             STRB     R6,[R0, #+14]
   \   00000066   0x4026             ANDS     R6,R6,R4
   \   00000068   0x7386             STRB     R6,[R0, #+14]
   \   0000006A   0x7BC6             LDRB     R6,[R0, #+15]
   \   0000006C   0x400E             ANDS     R6,R6,R1
   \   0000006E   0x73C6             STRB     R6,[R0, #+15]
   \   00000070   0x401E             ANDS     R6,R6,R3
   \   00000072   0x73C6             STRB     R6,[R0, #+15]
   \   00000074   0x4026             ANDS     R6,R6,R4
   \   00000076   0x73C6             STRB     R6,[R0, #+15]
   \   00000078   0x7B86             LDRB     R6,[R0, #+14]
   \   0000007A   0x402E             ANDS     R6,R6,R5
   \   0000007C   0x7386             STRB     R6,[R0, #+14]
   \   0000007E   0x400E             ANDS     R6,R6,R1
   \   00000080   0x7386             STRB     R6,[R0, #+14]
   \   00000082   0x4026             ANDS     R6,R6,R4
   \   00000084   0x7386             STRB     R6,[R0, #+14]
   \   00000086   0x7BC6             LDRB     R6,[R0, #+15]
   \   00000088   0x401E             ANDS     R6,R6,R3
   \   0000008A   0x73C6             STRB     R6,[R0, #+15]
   \   0000008C   0x4026             ANDS     R6,R6,R4
   \   0000008E   0x73C6             STRB     R6,[R0, #+15]
    634            _LCD_SML_SYMB_OFF();
   \   00000090   0x7846             LDRB     R6,[R0, #+1]
   \   00000092   0x400E             ANDS     R6,R6,R1
   \   00000094   0x7046             STRB     R6,[R0, #+1]
   \   00000096   0x401E             ANDS     R6,R6,R3
   \   00000098   0x7046             STRB     R6,[R0, #+1]
   \   0000009A   0x7806             LDRB     R6,[R0, #+0]
   \   0000009C   0x4032             ANDS     R2,R2,R6
   \   0000009E   0x7002             STRB     R2,[R0, #+0]
   \   000000A0   0x7842             LDRB     R2,[R0, #+1]
   \   000000A2   0x402A             ANDS     R2,R2,R5
   \   000000A4   0x7042             STRB     R2,[R0, #+1]
   \   000000A6   0x401A             ANDS     R2,R2,R3
   \   000000A8   0x7042             STRB     R2,[R0, #+1]
   \   000000AA   0x400A             ANDS     R2,R2,R1
   \   000000AC   0x7042             STRB     R2,[R0, #+1]
   \   000000AE   0x4015             ANDS     R5,R5,R2
   \   000000B0   0x7045             STRB     R5,[R0, #+1]
   \   000000B2   0x402C             ANDS     R4,R4,R5
   \   000000B4   0x7044             STRB     R4,[R0, #+1]
   \   000000B6   0x4021             ANDS     R1,R1,R4
   \   000000B8   0x7041             STRB     R1,[R0, #+1]
   \   000000BA   0x400B             ANDS     R3,R3,R1
   \   000000BC   0x7043             STRB     R3,[R0, #+1]
   \   000000BE   0x7801             LDRB     R1,[R0, #+0]
   \   000000C0   0x0649             LSLS     R1,R1,#+25
   \   000000C2   0x0E49             LSRS     R1,R1,#+25
   \   000000C4   0x7001             STRB     R1,[R0, #+0]
   \   000000C6   0x22BF             MOVS     R2,#+191
   \   000000C8   0x400A             ANDS     R2,R2,R1
   \   000000CA   0x7002             STRB     R2,[R0, #+0]
    635            
    636            _LCD_BIG_V_ON();
   \   000000CC   0x7B81             LDRB     R1,[R0, #+14]
   \   000000CE   0x2201             MOVS     R2,#+1
   \   000000D0   0x430A             ORRS     R2,R2,R1
   \   000000D2   0x7382             STRB     R2,[R0, #+14]
   \   000000D4   0x2120             MOVS     R1,#+32
   \   000000D6   0x430A             ORRS     R2,R2,R1
   \   000000D8   0x7382             STRB     R2,[R0, #+14]
   \   000000DA   0x2202             MOVS     R2,#+2
   \   000000DC   0x7BC3             LDRB     R3,[R0, #+15]
   \   000000DE   0x4313             ORRS     R3,R3,R2
   \   000000E0   0x73C3             STRB     R3,[R0, #+15]
   \   000000E2   0x2310             MOVS     R3,#+16
   \   000000E4   0x7B84             LDRB     R4,[R0, #+14]
   \   000000E6   0x431C             ORRS     R4,R4,R3
   \   000000E8   0x7384             STRB     R4,[R0, #+14]
   \   000000EA   0x7BC4             LDRB     R4,[R0, #+15]
   \   000000EC   0x4323             ORRS     R3,R3,R4
   \   000000EE   0x73C3             STRB     R3,[R0, #+15]
   \   000000F0   0x2404             MOVS     R4,#+4
   \   000000F2   0x431C             ORRS     R4,R4,R3
   \   000000F4   0x73C4             STRB     R4,[R0, #+15]
   \   000000F6   0x2308             MOVS     R3,#+8
   \   000000F8   0x4323             ORRS     R3,R3,R4
   \   000000FA   0x73C3             STRB     R3,[R0, #+15]
    637            _LCD_Volts_ON(); // small symbol
   \   000000FC   0x7843             LDRB     R3,[R0, #+1]
   \   000000FE   0x4319             ORRS     R1,R1,R3
   \   00000100   0x7041             STRB     R1,[R0, #+1]
    638            _LCD_RMS_ON(); 
   \   00000102   0x7801             LDRB     R1,[R0, #+0]
   \   00000104   0x4311             ORRS     R1,R1,R2
   \   00000106   0x7001             STRB     R1,[R0, #+0]
    639            _LCD_P3_ON();
   \   00000108   0x7841             LDRB     R1,[R0, #+1]
   \   0000010A   0x....             B.N      ??Subroutine4_0
    640          }

   \                                 In section .text, align 2, keep-with-next
   \                     ??Subroutine4_0: (+1)
   \   00000000   0x430A             ORRS     R2,R2,R1
   \   00000002   0x7042             STRB     R2,[R0, #+1]
   \   00000004   0xBD70             POP      {R4-R6,PC}       ;; return
    641          

   \                                 In section .text, align 2, keep-with-next
    642          static void menu_disp_irms  (void)
    643          {
   \                     menu_disp_irms: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
    644            sprintf((char*)buf," %8.3f",irms);
   \   00000002   0x....             LDR      R4,??DataTable110
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0x3020             ADDS     R0,R0,#+32
   \   00000008   0xC80C             LDM      R0!,{R2,R3}
   \   0000000A   0x....             LDR      R1,??DataTable109
   \   0000000C   0x0020             MOVS     R0,R4
   \   0000000E   0x3048             ADDS     R0,R0,#+72
   \   00000010   0x.... 0x....      BL       sprintf
    645            vfnLCD_Write_Str(buf,1);                /* display text on LCD              */
   \   00000014   0x2101             MOVS     R1,#+1
   \   00000016   0x3448             ADDS     R4,R4,#+72
   \   00000018   0x0020             MOVS     R0,R4
   \   0000001A   0x.... 0x....      BL       vfnLCD_Write_Str
    646            _LCD_BIG_SYMB_OFF();
   \   0000001E   0x....             LDR      R0,??DataTable109_1  ;; 0x40043031
   \   00000020   0x7B81             LDRB     R1,[R0, #+14]
   \   00000022   0x22FE             MOVS     R2,#+254
   \   00000024   0x400A             ANDS     R2,R2,R1
   \   00000026   0x7382             STRB     R2,[R0, #+14]
   \   00000028   0x21DF             MOVS     R1,#+223
   \   0000002A   0x400A             ANDS     R2,R2,R1
   \   0000002C   0x7382             STRB     R2,[R0, #+14]
   \   0000002E   0x22FD             MOVS     R2,#+253
   \   00000030   0x7BC3             LDRB     R3,[R0, #+15]
   \   00000032   0x4013             ANDS     R3,R3,R2
   \   00000034   0x73C3             STRB     R3,[R0, #+15]
   \   00000036   0x23EF             MOVS     R3,#+239
   \   00000038   0x7B84             LDRB     R4,[R0, #+14]
   \   0000003A   0x401C             ANDS     R4,R4,R3
   \   0000003C   0x7384             STRB     R4,[R0, #+14]
   \   0000003E   0x7BC6             LDRB     R6,[R0, #+15]
   \   00000040   0x401E             ANDS     R6,R6,R3
   \   00000042   0x73C6             STRB     R6,[R0, #+15]
   \   00000044   0x24FB             MOVS     R4,#+251
   \   00000046   0x4026             ANDS     R6,R6,R4
   \   00000048   0x73C6             STRB     R6,[R0, #+15]
   \   0000004A   0x25F7             MOVS     R5,#+247
   \   0000004C   0x402E             ANDS     R6,R6,R5
   \   0000004E   0x73C6             STRB     R6,[R0, #+15]
   \   00000050   0x7B86             LDRB     R6,[R0, #+14]
   \   00000052   0x4026             ANDS     R6,R6,R4
   \   00000054   0x7386             STRB     R6,[R0, #+14]
   \   00000056   0x7BC6             LDRB     R6,[R0, #+15]
   \   00000058   0x4026             ANDS     R6,R6,R4
   \   0000005A   0x73C6             STRB     R6,[R0, #+15]
   \   0000005C   0x7B86             LDRB     R6,[R0, #+14]
   \   0000005E   0x402E             ANDS     R6,R6,R5
   \   00000060   0x7386             STRB     R6,[R0, #+14]
   \   00000062   0x400E             ANDS     R6,R6,R1
   \   00000064   0x7386             STRB     R6,[R0, #+14]
   \   00000066   0x4026             ANDS     R6,R6,R4
   \   00000068   0x7386             STRB     R6,[R0, #+14]
   \   0000006A   0x7BC6             LDRB     R6,[R0, #+15]
   \   0000006C   0x400E             ANDS     R6,R6,R1
   \   0000006E   0x73C6             STRB     R6,[R0, #+15]
   \   00000070   0x401E             ANDS     R6,R6,R3
   \   00000072   0x73C6             STRB     R6,[R0, #+15]
   \   00000074   0x4026             ANDS     R6,R6,R4
   \   00000076   0x73C6             STRB     R6,[R0, #+15]
   \   00000078   0x7B86             LDRB     R6,[R0, #+14]
   \   0000007A   0x402E             ANDS     R6,R6,R5
   \   0000007C   0x7386             STRB     R6,[R0, #+14]
   \   0000007E   0x400E             ANDS     R6,R6,R1
   \   00000080   0x7386             STRB     R6,[R0, #+14]
   \   00000082   0x4026             ANDS     R6,R6,R4
   \   00000084   0x7386             STRB     R6,[R0, #+14]
   \   00000086   0x7BC6             LDRB     R6,[R0, #+15]
   \   00000088   0x401E             ANDS     R6,R6,R3
   \   0000008A   0x73C6             STRB     R6,[R0, #+15]
   \   0000008C   0x4026             ANDS     R6,R6,R4
   \   0000008E   0x73C6             STRB     R6,[R0, #+15]
    647            _LCD_SML_SYMB_OFF();
   \   00000090   0x7846             LDRB     R6,[R0, #+1]
   \   00000092   0x400E             ANDS     R6,R6,R1
   \   00000094   0x7046             STRB     R6,[R0, #+1]
   \   00000096   0x401E             ANDS     R6,R6,R3
   \   00000098   0x7046             STRB     R6,[R0, #+1]
   \   0000009A   0x7806             LDRB     R6,[R0, #+0]
   \   0000009C   0x4032             ANDS     R2,R2,R6
   \   0000009E   0x7002             STRB     R2,[R0, #+0]
   \   000000A0   0x7842             LDRB     R2,[R0, #+1]
   \   000000A2   0x402A             ANDS     R2,R2,R5
   \   000000A4   0x7042             STRB     R2,[R0, #+1]
   \   000000A6   0x401A             ANDS     R2,R2,R3
   \   000000A8   0x7042             STRB     R2,[R0, #+1]
   \   000000AA   0x400A             ANDS     R2,R2,R1
   \   000000AC   0x7042             STRB     R2,[R0, #+1]
   \   000000AE   0x4015             ANDS     R5,R5,R2
   \   000000B0   0x7045             STRB     R5,[R0, #+1]
   \   000000B2   0x402C             ANDS     R4,R4,R5
   \   000000B4   0x7044             STRB     R4,[R0, #+1]
   \   000000B6   0x4021             ANDS     R1,R1,R4
   \   000000B8   0x7041             STRB     R1,[R0, #+1]
   \   000000BA   0x400B             ANDS     R3,R3,R1
   \   000000BC   0x7043             STRB     R3,[R0, #+1]
   \   000000BE   0x7801             LDRB     R1,[R0, #+0]
   \   000000C0   0x0649             LSLS     R1,R1,#+25
   \   000000C2   0x0E49             LSRS     R1,R1,#+25
   \   000000C4   0x7001             STRB     R1,[R0, #+0]
   \   000000C6   0x22BF             MOVS     R2,#+191
   \   000000C8   0x400A             ANDS     R2,R2,R1
   \   000000CA   0x7002             STRB     R2,[R0, #+0]
    648            
    649            _LCD_BIG_I_ON(); // big symbols
   \   000000CC   0x2104             MOVS     R1,#+4
   \   000000CE   0x7B82             LDRB     R2,[R0, #+14]
   \   000000D0   0x430A             ORRS     R2,R2,R1
   \   000000D2   0x7382             STRB     R2,[R0, #+14]
   \   000000D4   0x7BC2             LDRB     R2,[R0, #+15]
   \   000000D6   0x4311             ORRS     R1,R1,R2
   \   000000D8   0x73C1             STRB     R1,[R0, #+15]
    650            _LCD_Amp_ON();
   \   000000DA   0x7841             LDRB     R1,[R0, #+1]
   \   000000DC   0x2210             MOVS     R2,#+16
   \   000000DE   0x430A             ORRS     R2,R2,R1
   \   000000E0   0x7042             STRB     R2,[R0, #+1]
    651            _LCD_RMS_ON(); 
   \   000000E2   0x2102             MOVS     R1,#+2
   \   000000E4   0x7802             LDRB     R2,[R0, #+0]
   \   000000E6   0x430A             ORRS     R2,R2,R1
   \   000000E8   0x7002             STRB     R2,[R0, #+0]
    652            _LCD_P3_ON();
   \   000000EA   0x7842             LDRB     R2,[R0, #+1]
   \   000000EC   0x....             B.N      ??Subroutine3_0
    653          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine3: (+1)
   \   00000000   0x7042             STRB     R2,[R0, #+1]
   \   00000002   0x2102             MOVS     R1,#+2
   \                     ??Subroutine3_0: (+1)
   \   00000004   0x4311             ORRS     R1,R1,R2
   \   00000006   0x7041             STRB     R1,[R0, #+1]
   \   00000008   0xBD70             POP      {R4-R6,PC}       ;; return
    654          

   \                                 In section .text, align 2, keep-with-next
    655          static void menu_disp_kW    (void)
    656          {
   \                     menu_disp_kW: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
    657            sprintf((char*)buf,"%9.3f",w/1e3);
   \   00000002   0x....             LDR      R4,??DataTable110
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0x3028             ADDS     R0,R0,#+40
   \   00000008   0xC803             LDM      R0,{R0,R1}
   \   0000000A   0x2200             MOVS     R2,#+0
   \   0000000C   0x....             LDR      R3,??DataTable111  ;; 0x408f4000
   \   0000000E   0x.... 0x....      BL       __aeabi_ddiv
   \   00000012   0x0002             MOVS     R2,R0
   \   00000014   0x000B             MOVS     R3,R1
   \   00000016   0x....             LDR      R1,??DataTable111_1
   \   00000018   0x0020             MOVS     R0,R4
   \   0000001A   0x3048             ADDS     R0,R0,#+72
   \   0000001C   0x.... 0x....      BL       sprintf
    658            vfnLCD_Write_Str(buf,1);                /* display text on LCD              */
   \   00000020   0x2101             MOVS     R1,#+1
   \   00000022   0x3448             ADDS     R4,R4,#+72
   \   00000024   0x0020             MOVS     R0,R4
   \   00000026   0x.... 0x....      BL       vfnLCD_Write_Str
    659            _LCD_BIG_SYMB_OFF();
   \   0000002A   0x....             LDR      R0,??DataTable109_1  ;; 0x40043031
   \   0000002C   0x7B81             LDRB     R1,[R0, #+14]
   \   0000002E   0x22FE             MOVS     R2,#+254
   \   00000030   0x400A             ANDS     R2,R2,R1
   \   00000032   0x7382             STRB     R2,[R0, #+14]
   \   00000034   0x21DF             MOVS     R1,#+223
   \   00000036   0x400A             ANDS     R2,R2,R1
   \   00000038   0x7382             STRB     R2,[R0, #+14]
   \   0000003A   0x22FD             MOVS     R2,#+253
   \   0000003C   0x7BC3             LDRB     R3,[R0, #+15]
   \   0000003E   0x4013             ANDS     R3,R3,R2
   \   00000040   0x73C3             STRB     R3,[R0, #+15]
   \   00000042   0x23EF             MOVS     R3,#+239
   \   00000044   0x7B84             LDRB     R4,[R0, #+14]
   \   00000046   0x401C             ANDS     R4,R4,R3
   \   00000048   0x7384             STRB     R4,[R0, #+14]
   \   0000004A   0x7BC6             LDRB     R6,[R0, #+15]
   \   0000004C   0x401E             ANDS     R6,R6,R3
   \   0000004E   0x73C6             STRB     R6,[R0, #+15]
   \   00000050   0x24FB             MOVS     R4,#+251
   \   00000052   0x4026             ANDS     R6,R6,R4
   \   00000054   0x73C6             STRB     R6,[R0, #+15]
   \   00000056   0x25F7             MOVS     R5,#+247
   \   00000058   0x402E             ANDS     R6,R6,R5
   \   0000005A   0x73C6             STRB     R6,[R0, #+15]
   \   0000005C   0x7B86             LDRB     R6,[R0, #+14]
   \   0000005E   0x4026             ANDS     R6,R6,R4
   \   00000060   0x7386             STRB     R6,[R0, #+14]
   \   00000062   0x7BC6             LDRB     R6,[R0, #+15]
   \   00000064   0x4026             ANDS     R6,R6,R4
   \   00000066   0x73C6             STRB     R6,[R0, #+15]
   \   00000068   0x7B86             LDRB     R6,[R0, #+14]
   \   0000006A   0x402E             ANDS     R6,R6,R5
   \   0000006C   0x7386             STRB     R6,[R0, #+14]
   \   0000006E   0x400E             ANDS     R6,R6,R1
   \   00000070   0x7386             STRB     R6,[R0, #+14]
   \   00000072   0x4026             ANDS     R6,R6,R4
   \   00000074   0x7386             STRB     R6,[R0, #+14]
   \   00000076   0x7BC6             LDRB     R6,[R0, #+15]
   \   00000078   0x400E             ANDS     R6,R6,R1
   \   0000007A   0x73C6             STRB     R6,[R0, #+15]
   \   0000007C   0x401E             ANDS     R6,R6,R3
   \   0000007E   0x73C6             STRB     R6,[R0, #+15]
   \   00000080   0x4026             ANDS     R6,R6,R4
   \   00000082   0x73C6             STRB     R6,[R0, #+15]
   \   00000084   0x7B86             LDRB     R6,[R0, #+14]
   \   00000086   0x402E             ANDS     R6,R6,R5
   \   00000088   0x7386             STRB     R6,[R0, #+14]
   \   0000008A   0x400E             ANDS     R6,R6,R1
   \   0000008C   0x7386             STRB     R6,[R0, #+14]
   \   0000008E   0x4026             ANDS     R6,R6,R4
   \   00000090   0x7386             STRB     R6,[R0, #+14]
   \   00000092   0x7BC6             LDRB     R6,[R0, #+15]
   \   00000094   0x401E             ANDS     R6,R6,R3
   \   00000096   0x73C6             STRB     R6,[R0, #+15]
   \   00000098   0x4026             ANDS     R6,R6,R4
   \   0000009A   0x73C6             STRB     R6,[R0, #+15]
    660            _LCD_SML_SYMB_OFF();
   \   0000009C   0x7846             LDRB     R6,[R0, #+1]
   \   0000009E   0x400E             ANDS     R6,R6,R1
   \   000000A0   0x7046             STRB     R6,[R0, #+1]
   \   000000A2   0x401E             ANDS     R6,R6,R3
   \   000000A4   0x7046             STRB     R6,[R0, #+1]
   \   000000A6   0x7806             LDRB     R6,[R0, #+0]
   \   000000A8   0x4032             ANDS     R2,R2,R6
   \   000000AA   0x7002             STRB     R2,[R0, #+0]
   \   000000AC   0x7842             LDRB     R2,[R0, #+1]
   \   000000AE   0x402A             ANDS     R2,R2,R5
   \   000000B0   0x7042             STRB     R2,[R0, #+1]
   \   000000B2   0x401A             ANDS     R2,R2,R3
   \   000000B4   0x7042             STRB     R2,[R0, #+1]
   \   000000B6   0x400A             ANDS     R2,R2,R1
   \   000000B8   0x7042             STRB     R2,[R0, #+1]
   \   000000BA   0x4015             ANDS     R5,R5,R2
   \   000000BC   0x7045             STRB     R5,[R0, #+1]
   \   000000BE   0x402C             ANDS     R4,R4,R5
   \   000000C0   0x7044             STRB     R4,[R0, #+1]
   \   000000C2   0x4021             ANDS     R1,R1,R4
   \   000000C4   0x7041             STRB     R1,[R0, #+1]
   \   000000C6   0x400B             ANDS     R3,R3,R1
   \   000000C8   0x7043             STRB     R3,[R0, #+1]
   \   000000CA   0x7801             LDRB     R1,[R0, #+0]
   \   000000CC   0x0649             LSLS     R1,R1,#+25
   \   000000CE   0x0E49             LSRS     R1,R1,#+25
   \   000000D0   0x7001             STRB     R1,[R0, #+0]
   \   000000D2   0x22BF             MOVS     R2,#+191
   \   000000D4   0x400A             ANDS     R2,R2,R1
   \   000000D6   0x7002             STRB     R2,[R0, #+0]
    661            
    662            _LCD_BIG_P_ON();
   \   000000D8   0x2108             MOVS     R1,#+8
   \   000000DA   0x7B82             LDRB     R2,[R0, #+14]
   \   000000DC   0x430A             ORRS     R2,R2,R1
   \   000000DE   0x7382             STRB     R2,[R0, #+14]
   \   000000E0   0x2320             MOVS     R3,#+32
   \   000000E2   0x431A             ORRS     R2,R2,R3
   \   000000E4   0x7382             STRB     R2,[R0, #+14]
   \   000000E6   0x2404             MOVS     R4,#+4
   \   000000E8   0x4322             ORRS     R2,R2,R4
   \   000000EA   0x7382             STRB     R2,[R0, #+14]
   \   000000EC   0x7BC2             LDRB     R2,[R0, #+15]
   \   000000EE   0x4313             ORRS     R3,R3,R2
   \   000000F0   0x73C3             STRB     R3,[R0, #+15]
   \   000000F2   0x2210             MOVS     R2,#+16
   \   000000F4   0x431A             ORRS     R2,R2,R3
   \   000000F6   0x73C2             STRB     R2,[R0, #+15]
   \   000000F8   0x4314             ORRS     R4,R4,R2
   \   000000FA   0x73C4             STRB     R4,[R0, #+15]
    663            _LCD_KW_ON();
   \   000000FC   0x7842             LDRB     R2,[R0, #+1]
   \   000000FE   0x4311             ORRS     R1,R1,R2
   \   00000100   0x7041             STRB     R1,[R0, #+1]
    664            _LCD_P3_ON();
   \   00000102   0x....             B.N      ??Subroutine2_1
    665          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine2: (+1)
   \   00000000   0x430A             ORRS     R2,R2,R1
   \   00000002   0x7002             STRB     R2,[R0, #+0]
   \                     ??Subroutine2_0: (+1)
   \   00000004   0x7841             LDRB     R1,[R0, #+1]
   \                     ??Subroutine2_1: (+1)
   \   00000006   0x2202             MOVS     R2,#+2
   \   00000008                      REQUIRE ??Subroutine4_0
   \   00000008                      ;; // Fall through to label ??Subroutine4_0
    666          

   \                                 In section .text, align 2, keep-with-next
    667          static void menu_disp_kVAR  (void)
    668          {
   \                     menu_disp_kVAR: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
    669            sprintf((char*)buf,"%9.3f",var/1e3);
   \   00000002   0x....             LDR      R4,??DataTable110
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0x3030             ADDS     R0,R0,#+48
   \   00000008   0xC803             LDM      R0,{R0,R1}
   \   0000000A   0x2200             MOVS     R2,#+0
   \   0000000C   0x....             LDR      R3,??DataTable111  ;; 0x408f4000
   \   0000000E   0x.... 0x....      BL       __aeabi_ddiv
   \   00000012   0x0002             MOVS     R2,R0
   \   00000014   0x000B             MOVS     R3,R1
   \   00000016   0x....             LDR      R1,??DataTable111_1
   \   00000018   0x0020             MOVS     R0,R4
   \   0000001A   0x3048             ADDS     R0,R0,#+72
   \   0000001C   0x.... 0x....      BL       sprintf
    670            vfnLCD_Write_Str(buf,1);                /* display text on LCD              */
   \   00000020   0x2101             MOVS     R1,#+1
   \   00000022   0x3448             ADDS     R4,R4,#+72
   \   00000024   0x0020             MOVS     R0,R4
   \   00000026   0x.... 0x....      BL       vfnLCD_Write_Str
    671            _LCD_BIG_SYMB_OFF();
   \   0000002A   0x....             LDR      R0,??DataTable111_2  ;; 0x40043031
   \   0000002C   0x7B81             LDRB     R1,[R0, #+14]
   \   0000002E   0x22FE             MOVS     R2,#+254
   \   00000030   0x400A             ANDS     R2,R2,R1
   \   00000032   0x7382             STRB     R2,[R0, #+14]
   \   00000034   0x21DF             MOVS     R1,#+223
   \   00000036   0x400A             ANDS     R2,R2,R1
   \   00000038   0x7382             STRB     R2,[R0, #+14]
   \   0000003A   0x22FD             MOVS     R2,#+253
   \   0000003C   0x7BC3             LDRB     R3,[R0, #+15]
   \   0000003E   0x4013             ANDS     R3,R3,R2
   \   00000040   0x73C3             STRB     R3,[R0, #+15]
   \   00000042   0x23EF             MOVS     R3,#+239
   \   00000044   0x7B84             LDRB     R4,[R0, #+14]
   \   00000046   0x401C             ANDS     R4,R4,R3
   \   00000048   0x7384             STRB     R4,[R0, #+14]
   \   0000004A   0x7BC6             LDRB     R6,[R0, #+15]
   \   0000004C   0x401E             ANDS     R6,R6,R3
   \   0000004E   0x73C6             STRB     R6,[R0, #+15]
   \   00000050   0x24FB             MOVS     R4,#+251
   \   00000052   0x4026             ANDS     R6,R6,R4
   \   00000054   0x73C6             STRB     R6,[R0, #+15]
   \   00000056   0x25F7             MOVS     R5,#+247
   \   00000058   0x402E             ANDS     R6,R6,R5
   \   0000005A   0x73C6             STRB     R6,[R0, #+15]
   \   0000005C   0x7B86             LDRB     R6,[R0, #+14]
   \   0000005E   0x4026             ANDS     R6,R6,R4
   \   00000060   0x7386             STRB     R6,[R0, #+14]
   \   00000062   0x7BC6             LDRB     R6,[R0, #+15]
   \   00000064   0x4026             ANDS     R6,R6,R4
   \   00000066   0x73C6             STRB     R6,[R0, #+15]
   \   00000068   0x7B86             LDRB     R6,[R0, #+14]
   \   0000006A   0x402E             ANDS     R6,R6,R5
   \   0000006C   0x7386             STRB     R6,[R0, #+14]
   \   0000006E   0x400E             ANDS     R6,R6,R1
   \   00000070   0x7386             STRB     R6,[R0, #+14]
   \   00000072   0x4026             ANDS     R6,R6,R4
   \   00000074   0x7386             STRB     R6,[R0, #+14]
   \   00000076   0x7BC6             LDRB     R6,[R0, #+15]
   \   00000078   0x400E             ANDS     R6,R6,R1
   \   0000007A   0x73C6             STRB     R6,[R0, #+15]
   \   0000007C   0x401E             ANDS     R6,R6,R3
   \   0000007E   0x73C6             STRB     R6,[R0, #+15]
   \   00000080   0x4026             ANDS     R6,R6,R4
   \   00000082   0x73C6             STRB     R6,[R0, #+15]
   \   00000084   0x7B86             LDRB     R6,[R0, #+14]
   \   00000086   0x402E             ANDS     R6,R6,R5
   \   00000088   0x7386             STRB     R6,[R0, #+14]
   \   0000008A   0x400E             ANDS     R6,R6,R1
   \   0000008C   0x7386             STRB     R6,[R0, #+14]
   \   0000008E   0x4026             ANDS     R6,R6,R4
   \   00000090   0x7386             STRB     R6,[R0, #+14]
   \   00000092   0x7BC6             LDRB     R6,[R0, #+15]
   \   00000094   0x401E             ANDS     R6,R6,R3
   \   00000096   0x73C6             STRB     R6,[R0, #+15]
   \   00000098   0x4026             ANDS     R6,R6,R4
   \   0000009A   0x73C6             STRB     R6,[R0, #+15]
    672            _LCD_SML_SYMB_OFF();
   \   0000009C   0x7846             LDRB     R6,[R0, #+1]
   \   0000009E   0x400E             ANDS     R6,R6,R1
   \   000000A0   0x7046             STRB     R6,[R0, #+1]
   \   000000A2   0x401E             ANDS     R6,R6,R3
   \   000000A4   0x7046             STRB     R6,[R0, #+1]
   \   000000A6   0x7806             LDRB     R6,[R0, #+0]
   \   000000A8   0x4032             ANDS     R2,R2,R6
   \   000000AA   0x7002             STRB     R2,[R0, #+0]
   \   000000AC   0x7842             LDRB     R2,[R0, #+1]
   \   000000AE   0x402A             ANDS     R2,R2,R5
   \   000000B0   0x7042             STRB     R2,[R0, #+1]
   \   000000B2   0x401A             ANDS     R2,R2,R3
   \   000000B4   0x7042             STRB     R2,[R0, #+1]
   \   000000B6   0x400A             ANDS     R2,R2,R1
   \   000000B8   0x7042             STRB     R2,[R0, #+1]
   \   000000BA   0x4015             ANDS     R5,R5,R2
   \   000000BC   0x7045             STRB     R5,[R0, #+1]
   \   000000BE   0x402C             ANDS     R4,R4,R5
   \   000000C0   0x7044             STRB     R4,[R0, #+1]
   \   000000C2   0x4021             ANDS     R1,R1,R4
   \   000000C4   0x7041             STRB     R1,[R0, #+1]
   \   000000C6   0x400B             ANDS     R3,R3,R1
   \   000000C8   0x7043             STRB     R3,[R0, #+1]
   \   000000CA   0x7801             LDRB     R1,[R0, #+0]
   \   000000CC   0x0649             LSLS     R1,R1,#+25
   \   000000CE   0x0E49             LSRS     R1,R1,#+25
   \   000000D0   0x7001             STRB     R1,[R0, #+0]
   \   000000D2   0x22BF             MOVS     R2,#+191
   \   000000D4   0x400A             ANDS     R2,R2,R1
   \   000000D6   0x7002             STRB     R2,[R0, #+0]
    673            
    674            _LCD_BIG_P_ON();
   \   000000D8   0x7B82             LDRB     R2,[R0, #+14]
   \   000000DA   0x2108             MOVS     R1,#+8
   \   000000DC   0x4311             ORRS     R1,R1,R2
   \   000000DE   0x7381             STRB     R1,[R0, #+14]
   \   000000E0   0x2220             MOVS     R2,#+32
   \   000000E2   0x4311             ORRS     R1,R1,R2
   \   000000E4   0x7381             STRB     R1,[R0, #+14]
   \   000000E6   0x2304             MOVS     R3,#+4
   \   000000E8   0x4319             ORRS     R1,R1,R3
   \   000000EA   0x7381             STRB     R1,[R0, #+14]
   \   000000EC   0x7BC1             LDRB     R1,[R0, #+15]
   \   000000EE   0x430A             ORRS     R2,R2,R1
   \   000000F0   0x73C2             STRB     R2,[R0, #+15]
   \   000000F2   0x2110             MOVS     R1,#+16
   \   000000F4   0x4311             ORRS     R1,R1,R2
   \   000000F6   0x73C1             STRB     R1,[R0, #+15]
   \   000000F8   0x430B             ORRS     R3,R3,R1
   \   000000FA   0x73C3             STRB     R3,[R0, #+15]
    675            _LCD_P3_ON();
   \   000000FC   0x....             B.N      ??Subroutine2_0
    676          }
    677          

   \                                 In section .text, align 2, keep-with-next
    678          static void menu_disp_kVA   (void)
    679          {
   \                     menu_disp_kVA: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
    680            sprintf((char*)buf,"%9.3f",va/1e3);
   \   00000002   0x....             LDR      R4,??DataTable112
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0x3038             ADDS     R0,R0,#+56
   \   00000008   0xC803             LDM      R0,{R0,R1}
   \   0000000A   0x2200             MOVS     R2,#+0
   \   0000000C   0x....             LDR      R3,??DataTable111  ;; 0x408f4000
   \   0000000E   0x.... 0x....      BL       __aeabi_ddiv
   \   00000012   0x0002             MOVS     R2,R0
   \   00000014   0x000B             MOVS     R3,R1
   \   00000016   0x....             LDR      R1,??DataTable111_1
   \   00000018   0x0020             MOVS     R0,R4
   \   0000001A   0x3048             ADDS     R0,R0,#+72
   \   0000001C   0x.... 0x....      BL       sprintf
    681            vfnLCD_Write_Str(buf,1);                /* display text on LCD              */ 
   \   00000020   0x2101             MOVS     R1,#+1
   \   00000022   0x3448             ADDS     R4,R4,#+72
   \   00000024   0x0020             MOVS     R0,R4
   \   00000026   0x.... 0x....      BL       vfnLCD_Write_Str
    682            _LCD_BIG_SYMB_OFF();
   \   0000002A   0x....             LDR      R0,??DataTable112_1  ;; 0x40043031
   \   0000002C   0x7B81             LDRB     R1,[R0, #+14]
   \   0000002E   0x22FE             MOVS     R2,#+254
   \   00000030   0x400A             ANDS     R2,R2,R1
   \   00000032   0x7382             STRB     R2,[R0, #+14]
   \   00000034   0x21DF             MOVS     R1,#+223
   \   00000036   0x400A             ANDS     R2,R2,R1
   \   00000038   0x7382             STRB     R2,[R0, #+14]
   \   0000003A   0x22FD             MOVS     R2,#+253
   \   0000003C   0x7BC3             LDRB     R3,[R0, #+15]
   \   0000003E   0x4013             ANDS     R3,R3,R2
   \   00000040   0x73C3             STRB     R3,[R0, #+15]
   \   00000042   0x23EF             MOVS     R3,#+239
   \   00000044   0x7B84             LDRB     R4,[R0, #+14]
   \   00000046   0x401C             ANDS     R4,R4,R3
   \   00000048   0x7384             STRB     R4,[R0, #+14]
   \   0000004A   0x7BC6             LDRB     R6,[R0, #+15]
   \   0000004C   0x401E             ANDS     R6,R6,R3
   \   0000004E   0x73C6             STRB     R6,[R0, #+15]
   \   00000050   0x24FB             MOVS     R4,#+251
   \   00000052   0x4026             ANDS     R6,R6,R4
   \   00000054   0x73C6             STRB     R6,[R0, #+15]
   \   00000056   0x25F7             MOVS     R5,#+247
   \   00000058   0x402E             ANDS     R6,R6,R5
   \   0000005A   0x73C6             STRB     R6,[R0, #+15]
   \   0000005C   0x7B86             LDRB     R6,[R0, #+14]
   \   0000005E   0x4026             ANDS     R6,R6,R4
   \   00000060   0x7386             STRB     R6,[R0, #+14]
   \   00000062   0x7BC6             LDRB     R6,[R0, #+15]
   \   00000064   0x4026             ANDS     R6,R6,R4
   \   00000066   0x73C6             STRB     R6,[R0, #+15]
   \   00000068   0x7B86             LDRB     R6,[R0, #+14]
   \   0000006A   0x402E             ANDS     R6,R6,R5
   \   0000006C   0x7386             STRB     R6,[R0, #+14]
   \   0000006E   0x400E             ANDS     R6,R6,R1
   \   00000070   0x7386             STRB     R6,[R0, #+14]
   \   00000072   0x4026             ANDS     R6,R6,R4
   \   00000074   0x7386             STRB     R6,[R0, #+14]
   \   00000076   0x7BC6             LDRB     R6,[R0, #+15]
   \   00000078   0x400E             ANDS     R6,R6,R1
   \   0000007A   0x73C6             STRB     R6,[R0, #+15]
   \   0000007C   0x401E             ANDS     R6,R6,R3
   \   0000007E   0x73C6             STRB     R6,[R0, #+15]
   \   00000080   0x4026             ANDS     R6,R6,R4
   \   00000082   0x73C6             STRB     R6,[R0, #+15]
   \   00000084   0x7B86             LDRB     R6,[R0, #+14]
   \   00000086   0x402E             ANDS     R6,R6,R5
   \   00000088   0x7386             STRB     R6,[R0, #+14]
   \   0000008A   0x400E             ANDS     R6,R6,R1
   \   0000008C   0x7386             STRB     R6,[R0, #+14]
   \   0000008E   0x4026             ANDS     R6,R6,R4
   \   00000090   0x7386             STRB     R6,[R0, #+14]
   \   00000092   0x7BC6             LDRB     R6,[R0, #+15]
   \   00000094   0x401E             ANDS     R6,R6,R3
   \   00000096   0x73C6             STRB     R6,[R0, #+15]
   \   00000098   0x4026             ANDS     R6,R6,R4
   \   0000009A   0x73C6             STRB     R6,[R0, #+15]
    683            _LCD_SML_SYMB_OFF();
   \   0000009C   0x7846             LDRB     R6,[R0, #+1]
   \   0000009E   0x400E             ANDS     R6,R6,R1
   \   000000A0   0x7046             STRB     R6,[R0, #+1]
   \   000000A2   0x401E             ANDS     R6,R6,R3
   \   000000A4   0x7046             STRB     R6,[R0, #+1]
   \   000000A6   0x7806             LDRB     R6,[R0, #+0]
   \   000000A8   0x4032             ANDS     R2,R2,R6
   \   000000AA   0x7002             STRB     R2,[R0, #+0]
   \   000000AC   0x7842             LDRB     R2,[R0, #+1]
   \   000000AE   0x402A             ANDS     R2,R2,R5
   \   000000B0   0x7042             STRB     R2,[R0, #+1]
   \   000000B2   0x401A             ANDS     R2,R2,R3
   \   000000B4   0x7042             STRB     R2,[R0, #+1]
   \   000000B6   0x400A             ANDS     R2,R2,R1
   \   000000B8   0x7042             STRB     R2,[R0, #+1]
   \   000000BA   0x4015             ANDS     R5,R5,R2
   \   000000BC   0x7045             STRB     R5,[R0, #+1]
   \   000000BE   0x402C             ANDS     R4,R4,R5
   \   000000C0   0x7044             STRB     R4,[R0, #+1]
   \   000000C2   0x4021             ANDS     R1,R1,R4
   \   000000C4   0x7041             STRB     R1,[R0, #+1]
   \   000000C6   0x400B             ANDS     R3,R3,R1
   \   000000C8   0x7043             STRB     R3,[R0, #+1]
   \   000000CA   0x7801             LDRB     R1,[R0, #+0]
   \   000000CC   0x0649             LSLS     R1,R1,#+25
   \   000000CE   0x0E49             LSRS     R1,R1,#+25
   \   000000D0   0x7001             STRB     R1,[R0, #+0]
   \   000000D2   0x22BF             MOVS     R2,#+191
   \   000000D4   0x400A             ANDS     R2,R2,R1
   \   000000D6   0x7002             STRB     R2,[R0, #+0]
    684            
    685            _LCD_BIG_P_ON();
   \   000000D8   0x7B82             LDRB     R2,[R0, #+14]
   \   000000DA   0x2108             MOVS     R1,#+8
   \   000000DC   0x4311             ORRS     R1,R1,R2
   \   000000DE   0x7381             STRB     R1,[R0, #+14]
   \   000000E0   0x2220             MOVS     R2,#+32
   \   000000E2   0x4311             ORRS     R1,R1,R2
   \   000000E4   0x7381             STRB     R1,[R0, #+14]
   \   000000E6   0x2304             MOVS     R3,#+4
   \   000000E8   0x4319             ORRS     R1,R1,R3
   \   000000EA   0x7381             STRB     R1,[R0, #+14]
   \   000000EC   0x7BC1             LDRB     R1,[R0, #+15]
   \   000000EE   0x4311             ORRS     R1,R1,R2
   \   000000F0   0x73C1             STRB     R1,[R0, #+15]
   \   000000F2   0x2410             MOVS     R4,#+16
   \   000000F4   0x4321             ORRS     R1,R1,R4
   \   000000F6   0x73C1             STRB     R1,[R0, #+15]
   \   000000F8   0x430B             ORRS     R3,R3,R1
   \   000000FA   0x73C3             STRB     R3,[R0, #+15]
    686            _LCD_VA_ON();
   \   000000FC   0x7841             LDRB     R1,[R0, #+1]
   \   000000FE   0x430C             ORRS     R4,R4,R1
   \   00000100   0x7044             STRB     R4,[R0, #+1]
   \   00000102   0x4322             ORRS     R2,R2,R4
   \   00000104   0x....             B.N      ?Subroutine3
    687            _LCD_P3_ON();
    688          }
    689          

   \                                 In section .text, align 2, keep-with-next
    690          static void menu_disp_kWh   (void)
    691          { 
   \                     menu_disp_kWh: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
    692            sprintf((char*)buf,"%09.3f", (double)ramcnt.wh_cnt/1e5);
   \   00000002   0x....             LDR      R4,??DataTable112
   \   00000004   0x....             LDR      R0,??DataTable112_2
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0x.... 0x....      BL       __aeabi_i2d
   \   0000000C   0x2200             MOVS     R2,#+0
   \   0000000E   0x....             LDR      R3,??DataTable112_3  ;; 0x40f86a00
   \   00000010   0x.... 0x....      BL       __aeabi_ddiv
   \   00000014   0x0002             MOVS     R2,R0
   \   00000016   0x000B             MOVS     R3,R1
   \   00000018   0x....             LDR      R1,??DataTable112_4
   \   0000001A   0x0020             MOVS     R0,R4
   \   0000001C   0x3048             ADDS     R0,R0,#+72
   \   0000001E   0x.... 0x....      BL       sprintf
    693            vfnLCD_Write_Str(buf,1);                /* display text on LCD              */
   \   00000022   0x2101             MOVS     R1,#+1
   \   00000024   0x3448             ADDS     R4,R4,#+72
   \   00000026   0x0020             MOVS     R0,R4
   \   00000028   0x.... 0x....      BL       vfnLCD_Write_Str
    694            _LCD_BIG_SYMB_OFF();
   \   0000002C   0x....             LDR      R0,??DataTable112_1  ;; 0x40043031
   \   0000002E   0x7B81             LDRB     R1,[R0, #+14]
   \   00000030   0x22FE             MOVS     R2,#+254
   \   00000032   0x400A             ANDS     R2,R2,R1
   \   00000034   0x7382             STRB     R2,[R0, #+14]
   \   00000036   0x21DF             MOVS     R1,#+223
   \   00000038   0x400A             ANDS     R2,R2,R1
   \   0000003A   0x7382             STRB     R2,[R0, #+14]
   \   0000003C   0x22FD             MOVS     R2,#+253
   \   0000003E   0x7BC3             LDRB     R3,[R0, #+15]
   \   00000040   0x4013             ANDS     R3,R3,R2
   \   00000042   0x73C3             STRB     R3,[R0, #+15]
   \   00000044   0x23EF             MOVS     R3,#+239
   \   00000046   0x7B84             LDRB     R4,[R0, #+14]
   \   00000048   0x401C             ANDS     R4,R4,R3
   \   0000004A   0x7384             STRB     R4,[R0, #+14]
   \   0000004C   0x7BC6             LDRB     R6,[R0, #+15]
   \   0000004E   0x401E             ANDS     R6,R6,R3
   \   00000050   0x73C6             STRB     R6,[R0, #+15]
   \   00000052   0x24FB             MOVS     R4,#+251
   \   00000054   0x4026             ANDS     R6,R6,R4
   \   00000056   0x73C6             STRB     R6,[R0, #+15]
   \   00000058   0x25F7             MOVS     R5,#+247
   \   0000005A   0x402E             ANDS     R6,R6,R5
   \   0000005C   0x73C6             STRB     R6,[R0, #+15]
   \   0000005E   0x7B86             LDRB     R6,[R0, #+14]
   \   00000060   0x4026             ANDS     R6,R6,R4
   \   00000062   0x7386             STRB     R6,[R0, #+14]
   \   00000064   0x7BC6             LDRB     R6,[R0, #+15]
   \   00000066   0x4026             ANDS     R6,R6,R4
   \   00000068   0x73C6             STRB     R6,[R0, #+15]
   \   0000006A   0x7B86             LDRB     R6,[R0, #+14]
   \   0000006C   0x402E             ANDS     R6,R6,R5
   \   0000006E   0x7386             STRB     R6,[R0, #+14]
   \   00000070   0x400E             ANDS     R6,R6,R1
   \   00000072   0x7386             STRB     R6,[R0, #+14]
   \   00000074   0x4026             ANDS     R6,R6,R4
   \   00000076   0x7386             STRB     R6,[R0, #+14]
   \   00000078   0x7BC6             LDRB     R6,[R0, #+15]
   \   0000007A   0x400E             ANDS     R6,R6,R1
   \   0000007C   0x73C6             STRB     R6,[R0, #+15]
   \   0000007E   0x401E             ANDS     R6,R6,R3
   \   00000080   0x73C6             STRB     R6,[R0, #+15]
   \   00000082   0x4026             ANDS     R6,R6,R4
   \   00000084   0x73C6             STRB     R6,[R0, #+15]
   \   00000086   0x7B86             LDRB     R6,[R0, #+14]
   \   00000088   0x402E             ANDS     R6,R6,R5
   \   0000008A   0x7386             STRB     R6,[R0, #+14]
   \   0000008C   0x400E             ANDS     R6,R6,R1
   \   0000008E   0x7386             STRB     R6,[R0, #+14]
   \   00000090   0x4026             ANDS     R6,R6,R4
   \   00000092   0x7386             STRB     R6,[R0, #+14]
   \   00000094   0x7BC6             LDRB     R6,[R0, #+15]
   \   00000096   0x401E             ANDS     R6,R6,R3
   \   00000098   0x73C6             STRB     R6,[R0, #+15]
   \   0000009A   0x4026             ANDS     R6,R6,R4
   \   0000009C   0x73C6             STRB     R6,[R0, #+15]
    695            _LCD_SML_SYMB_OFF();
   \   0000009E   0x7846             LDRB     R6,[R0, #+1]
   \   000000A0   0x400E             ANDS     R6,R6,R1
   \   000000A2   0x7046             STRB     R6,[R0, #+1]
   \   000000A4   0x401E             ANDS     R6,R6,R3
   \   000000A6   0x7046             STRB     R6,[R0, #+1]
   \   000000A8   0x7806             LDRB     R6,[R0, #+0]
   \   000000AA   0x4032             ANDS     R2,R2,R6
   \   000000AC   0x7002             STRB     R2,[R0, #+0]
   \   000000AE   0x7842             LDRB     R2,[R0, #+1]
   \   000000B0   0x402A             ANDS     R2,R2,R5
   \   000000B2   0x7042             STRB     R2,[R0, #+1]
   \   000000B4   0x401A             ANDS     R2,R2,R3
   \   000000B6   0x7042             STRB     R2,[R0, #+1]
   \   000000B8   0x400A             ANDS     R2,R2,R1
   \   000000BA   0x7042             STRB     R2,[R0, #+1]
   \   000000BC   0x4015             ANDS     R5,R5,R2
   \   000000BE   0x7045             STRB     R5,[R0, #+1]
   \   000000C0   0x402C             ANDS     R4,R4,R5
   \   000000C2   0x7044             STRB     R4,[R0, #+1]
   \   000000C4   0x4021             ANDS     R1,R1,R4
   \   000000C6   0x7041             STRB     R1,[R0, #+1]
   \   000000C8   0x400B             ANDS     R3,R3,R1
   \   000000CA   0x7043             STRB     R3,[R0, #+1]
   \   000000CC   0x7801             LDRB     R1,[R0, #+0]
   \   000000CE   0x0649             LSLS     R1,R1,#+25
   \   000000D0   0x0E49             LSRS     R1,R1,#+25
   \   000000D2   0x7001             STRB     R1,[R0, #+0]
   \   000000D4   0x22BF             MOVS     R2,#+191
   \   000000D6   0x400A             ANDS     R2,R2,R1
   \   000000D8   0x7002             STRB     R2,[R0, #+0]
    696            
    697            _LCD_KWh_ON();
   \   000000DA   0x7842             LDRB     R2,[R0, #+1]
   \   000000DC   0x2108             MOVS     R1,#+8
   \   000000DE   0x4311             ORRS     R1,R1,R2
   \   000000E0   0x7041             STRB     R1,[R0, #+1]
   \   000000E2   0x2204             MOVS     R2,#+4
   \   000000E4   0x430A             ORRS     R2,R2,R1
   \   000000E6                      REQUIRE ?Subroutine3
   \   000000E6                      ;; // Fall through to label ?Subroutine3
    698            _LCD_P3_ON();
    699          }
    700          

   \                                 In section .text, align 2, keep-with-next
    701          static void menu_disp_kVARh (void)
    702          {
   \                     menu_disp_kVARh: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
    703            sprintf((char*)buf,"%09.3f",(double)ramcnt.varh_cnt/1e5);
   \   00000002   0x....             LDR      R4,??DataTable112
   \   00000004   0x....             LDR      R0,??DataTable112_2
   \   00000006   0x6840             LDR      R0,[R0, #+4]
   \   00000008   0x.... 0x....      BL       __aeabi_i2d
   \   0000000C   0x2200             MOVS     R2,#+0
   \   0000000E   0x....             LDR      R3,??DataTable112_3  ;; 0x40f86a00
   \   00000010   0x.... 0x....      BL       __aeabi_ddiv
   \   00000014   0x0002             MOVS     R2,R0
   \   00000016   0x000B             MOVS     R3,R1
   \   00000018   0x....             LDR      R1,??DataTable112_4
   \   0000001A   0x0020             MOVS     R0,R4
   \   0000001C   0x3048             ADDS     R0,R0,#+72
   \   0000001E   0x.... 0x....      BL       sprintf
    704            vfnLCD_Write_Str(buf,1);                /* display text on LCD              */ 
   \   00000022   0x2101             MOVS     R1,#+1
   \   00000024   0x3448             ADDS     R4,R4,#+72
   \   00000026   0x0020             MOVS     R0,R4
   \   00000028   0x.... 0x....      BL       vfnLCD_Write_Str
    705            _LCD_BIG_SYMB_OFF();
   \   0000002C   0x....             LDR      R0,??DataTable112_1  ;; 0x40043031
   \   0000002E   0x7B81             LDRB     R1,[R0, #+14]
   \   00000030   0x22FE             MOVS     R2,#+254
   \   00000032   0x400A             ANDS     R2,R2,R1
   \   00000034   0x7382             STRB     R2,[R0, #+14]
   \   00000036   0x21DF             MOVS     R1,#+223
   \   00000038   0x400A             ANDS     R2,R2,R1
   \   0000003A   0x7382             STRB     R2,[R0, #+14]
   \   0000003C   0x22FD             MOVS     R2,#+253
   \   0000003E   0x7BC3             LDRB     R3,[R0, #+15]
   \   00000040   0x4013             ANDS     R3,R3,R2
   \   00000042   0x73C3             STRB     R3,[R0, #+15]
   \   00000044   0x23EF             MOVS     R3,#+239
   \   00000046   0x7B84             LDRB     R4,[R0, #+14]
   \   00000048   0x401C             ANDS     R4,R4,R3
   \   0000004A   0x7384             STRB     R4,[R0, #+14]
   \   0000004C   0x7BC6             LDRB     R6,[R0, #+15]
   \   0000004E   0x401E             ANDS     R6,R6,R3
   \   00000050   0x73C6             STRB     R6,[R0, #+15]
   \   00000052   0x24FB             MOVS     R4,#+251
   \   00000054   0x4026             ANDS     R6,R6,R4
   \   00000056   0x73C6             STRB     R6,[R0, #+15]
   \   00000058   0x25F7             MOVS     R5,#+247
   \   0000005A   0x402E             ANDS     R6,R6,R5
   \   0000005C   0x73C6             STRB     R6,[R0, #+15]
   \   0000005E   0x7B86             LDRB     R6,[R0, #+14]
   \   00000060   0x4026             ANDS     R6,R6,R4
   \   00000062   0x7386             STRB     R6,[R0, #+14]
   \   00000064   0x7BC6             LDRB     R6,[R0, #+15]
   \   00000066   0x4026             ANDS     R6,R6,R4
   \   00000068   0x73C6             STRB     R6,[R0, #+15]
   \   0000006A   0x7B86             LDRB     R6,[R0, #+14]
   \   0000006C   0x402E             ANDS     R6,R6,R5
   \   0000006E   0x7386             STRB     R6,[R0, #+14]
   \   00000070   0x400E             ANDS     R6,R6,R1
   \   00000072   0x7386             STRB     R6,[R0, #+14]
   \   00000074   0x4026             ANDS     R6,R6,R4
   \   00000076   0x7386             STRB     R6,[R0, #+14]
   \   00000078   0x7BC6             LDRB     R6,[R0, #+15]
   \   0000007A   0x400E             ANDS     R6,R6,R1
   \   0000007C   0x73C6             STRB     R6,[R0, #+15]
   \   0000007E   0x401E             ANDS     R6,R6,R3
   \   00000080   0x73C6             STRB     R6,[R0, #+15]
   \   00000082   0x4026             ANDS     R6,R6,R4
   \   00000084   0x73C6             STRB     R6,[R0, #+15]
   \   00000086   0x7B86             LDRB     R6,[R0, #+14]
   \   00000088   0x402E             ANDS     R6,R6,R5
   \   0000008A   0x7386             STRB     R6,[R0, #+14]
   \   0000008C   0x400E             ANDS     R6,R6,R1
   \   0000008E   0x7386             STRB     R6,[R0, #+14]
   \   00000090   0x4026             ANDS     R6,R6,R4
   \   00000092   0x7386             STRB     R6,[R0, #+14]
   \   00000094   0x7BC6             LDRB     R6,[R0, #+15]
   \   00000096   0x401E             ANDS     R6,R6,R3
   \   00000098   0x73C6             STRB     R6,[R0, #+15]
   \   0000009A   0x4026             ANDS     R6,R6,R4
   \   0000009C   0x73C6             STRB     R6,[R0, #+15]
    706            _LCD_SML_SYMB_OFF();
   \   0000009E   0x7846             LDRB     R6,[R0, #+1]
   \   000000A0   0x400E             ANDS     R6,R6,R1
   \   000000A2   0x7046             STRB     R6,[R0, #+1]
   \   000000A4   0x401E             ANDS     R6,R6,R3
   \   000000A6   0x7046             STRB     R6,[R0, #+1]
   \   000000A8   0x7806             LDRB     R6,[R0, #+0]
   \   000000AA   0x4032             ANDS     R2,R2,R6
   \   000000AC   0x7002             STRB     R2,[R0, #+0]
   \   000000AE   0x7842             LDRB     R2,[R0, #+1]
   \   000000B0   0x402A             ANDS     R2,R2,R5
   \   000000B2   0x7042             STRB     R2,[R0, #+1]
   \   000000B4   0x401A             ANDS     R2,R2,R3
   \   000000B6   0x7042             STRB     R2,[R0, #+1]
   \   000000B8   0x400A             ANDS     R2,R2,R1
   \   000000BA   0x7042             STRB     R2,[R0, #+1]
   \   000000BC   0x4015             ANDS     R5,R5,R2
   \   000000BE   0x7045             STRB     R5,[R0, #+1]
   \   000000C0   0x402C             ANDS     R4,R4,R5
   \   000000C2   0x7044             STRB     R4,[R0, #+1]
   \   000000C4   0x4021             ANDS     R1,R1,R4
   \   000000C6   0x7041             STRB     R1,[R0, #+1]
   \   000000C8   0x400B             ANDS     R3,R3,R1
   \   000000CA   0x7043             STRB     R3,[R0, #+1]
   \   000000CC   0x7801             LDRB     R1,[R0, #+0]
   \   000000CE   0x0649             LSLS     R1,R1,#+25
   \   000000D0   0x0E49             LSRS     R1,R1,#+25
   \   000000D2   0x7001             STRB     R1,[R0, #+0]
   \   000000D4   0x22BF             MOVS     R2,#+191
   \   000000D6   0x400A             ANDS     R2,R2,R1
   \   000000D8   0x7002             STRB     R2,[R0, #+0]
    707            
    708            _LCD_KVArh_ON();
   \   000000DA   0x7842             LDRB     R2,[R0, #+1]
   \   000000DC   0x2120             MOVS     R1,#+32
   \   000000DE   0x4311             ORRS     R1,R1,R2
   \   000000E0   0x7041             STRB     R1,[R0, #+1]
   \   000000E2   0x2210             MOVS     R2,#+16
   \   000000E4   0x430A             ORRS     R2,R2,R1
   \   000000E6   0x7042             STRB     R2,[R0, #+1]
   \   000000E8   0x7801             LDRB     R1,[R0, #+0]
   \   000000EA   0x2280             MOVS     R2,#+128
   \   000000EC   0x....             B.N      ?Subroutine2
    709            _LCD_P3_ON();
    710          }
    711          

   \                                 In section .text, align 2, keep-with-next
    712          static void menu_disp_freq (void)
    713          { 
   \                     menu_disp_freq: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
    714              sprintf((char*)buf," %8.3f",(double)freqAVG);
   \   00000002   0x....             LDR      R4,??DataTable115
   \   00000004   0x6C22             LDR      R2,[R4, #+64]
   \   00000006   0x6C63             LDR      R3,[R4, #+68]
   \   00000008   0x....             LDR      R1,??DataTable115_1
   \   0000000A   0x0020             MOVS     R0,R4
   \   0000000C   0x3048             ADDS     R0,R0,#+72
   \   0000000E   0x.... 0x....      BL       sprintf
    715              vfnLCD_Write_Str(buf,1);              /* display text on LCD              */ 
   \   00000012   0x2101             MOVS     R1,#+1
   \   00000014   0x3448             ADDS     R4,R4,#+72
   \   00000016   0x0020             MOVS     R0,R4
   \   00000018   0x.... 0x....      BL       vfnLCD_Write_Str
    716              _LCD_BIG_SYMB_OFF();
   \   0000001C   0x....             LDR      R0,??DataTable116  ;; 0x40043031
   \   0000001E   0x7B81             LDRB     R1,[R0, #+14]
   \   00000020   0x22FE             MOVS     R2,#+254
   \   00000022   0x400A             ANDS     R2,R2,R1
   \   00000024   0x7382             STRB     R2,[R0, #+14]
   \   00000026   0x21DF             MOVS     R1,#+223
   \   00000028   0x400A             ANDS     R2,R2,R1
   \   0000002A   0x7382             STRB     R2,[R0, #+14]
   \   0000002C   0x22FD             MOVS     R2,#+253
   \   0000002E   0x7BC3             LDRB     R3,[R0, #+15]
   \   00000030   0x4013             ANDS     R3,R3,R2
   \   00000032   0x73C3             STRB     R3,[R0, #+15]
   \   00000034   0x23EF             MOVS     R3,#+239
   \   00000036   0x7B84             LDRB     R4,[R0, #+14]
   \   00000038   0x401C             ANDS     R4,R4,R3
   \   0000003A   0x7384             STRB     R4,[R0, #+14]
   \   0000003C   0x7BC6             LDRB     R6,[R0, #+15]
   \   0000003E   0x401E             ANDS     R6,R6,R3
   \   00000040   0x73C6             STRB     R6,[R0, #+15]
   \   00000042   0x24FB             MOVS     R4,#+251
   \   00000044   0x4026             ANDS     R6,R6,R4
   \   00000046   0x73C6             STRB     R6,[R0, #+15]
   \   00000048   0x25F7             MOVS     R5,#+247
   \   0000004A   0x402E             ANDS     R6,R6,R5
   \   0000004C   0x73C6             STRB     R6,[R0, #+15]
   \   0000004E   0x7B86             LDRB     R6,[R0, #+14]
   \   00000050   0x4026             ANDS     R6,R6,R4
   \   00000052   0x7386             STRB     R6,[R0, #+14]
   \   00000054   0x7BC6             LDRB     R6,[R0, #+15]
   \   00000056   0x4026             ANDS     R6,R6,R4
   \   00000058   0x73C6             STRB     R6,[R0, #+15]
   \   0000005A   0x7B86             LDRB     R6,[R0, #+14]
   \   0000005C   0x402E             ANDS     R6,R6,R5
   \   0000005E   0x7386             STRB     R6,[R0, #+14]
   \   00000060   0x400E             ANDS     R6,R6,R1
   \   00000062   0x7386             STRB     R6,[R0, #+14]
   \   00000064   0x4026             ANDS     R6,R6,R4
   \   00000066   0x7386             STRB     R6,[R0, #+14]
   \   00000068   0x7BC6             LDRB     R6,[R0, #+15]
   \   0000006A   0x400E             ANDS     R6,R6,R1
   \   0000006C   0x73C6             STRB     R6,[R0, #+15]
   \   0000006E   0x401E             ANDS     R6,R6,R3
   \   00000070   0x73C6             STRB     R6,[R0, #+15]
   \   00000072   0x4026             ANDS     R6,R6,R4
   \   00000074   0x73C6             STRB     R6,[R0, #+15]
   \   00000076   0x7B86             LDRB     R6,[R0, #+14]
   \   00000078   0x402E             ANDS     R6,R6,R5
   \   0000007A   0x7386             STRB     R6,[R0, #+14]
   \   0000007C   0x400E             ANDS     R6,R6,R1
   \   0000007E   0x7386             STRB     R6,[R0, #+14]
   \   00000080   0x4026             ANDS     R6,R6,R4
   \   00000082   0x7386             STRB     R6,[R0, #+14]
   \   00000084   0x7BC6             LDRB     R6,[R0, #+15]
   \   00000086   0x401E             ANDS     R6,R6,R3
   \   00000088   0x73C6             STRB     R6,[R0, #+15]
   \   0000008A   0x4026             ANDS     R6,R6,R4
   \   0000008C   0x73C6             STRB     R6,[R0, #+15]
    717              _LCD_SML_SYMB_OFF();
   \   0000008E   0x7846             LDRB     R6,[R0, #+1]
   \   00000090   0x400E             ANDS     R6,R6,R1
   \   00000092   0x7046             STRB     R6,[R0, #+1]
   \   00000094   0x401E             ANDS     R6,R6,R3
   \   00000096   0x7046             STRB     R6,[R0, #+1]
   \   00000098   0x7806             LDRB     R6,[R0, #+0]
   \   0000009A   0x4032             ANDS     R2,R2,R6
   \   0000009C   0x7002             STRB     R2,[R0, #+0]
   \   0000009E   0x7842             LDRB     R2,[R0, #+1]
   \   000000A0   0x402A             ANDS     R2,R2,R5
   \   000000A2   0x7042             STRB     R2,[R0, #+1]
   \   000000A4   0x401A             ANDS     R2,R2,R3
   \   000000A6   0x7042             STRB     R2,[R0, #+1]
   \   000000A8   0x400A             ANDS     R2,R2,R1
   \   000000AA   0x7042             STRB     R2,[R0, #+1]
   \   000000AC   0x4015             ANDS     R5,R5,R2
   \   000000AE   0x7045             STRB     R5,[R0, #+1]
   \   000000B0   0x402C             ANDS     R4,R4,R5
   \   000000B2   0x7044             STRB     R4,[R0, #+1]
   \   000000B4   0x4021             ANDS     R1,R1,R4
   \   000000B6   0x7041             STRB     R1,[R0, #+1]
   \   000000B8   0x400B             ANDS     R3,R3,R1
   \   000000BA   0x7043             STRB     R3,[R0, #+1]
   \   000000BC   0x7801             LDRB     R1,[R0, #+0]
   \   000000BE   0x0649             LSLS     R1,R1,#+25
   \   000000C0   0x0E49             LSRS     R1,R1,#+25
   \   000000C2   0x7001             STRB     R1,[R0, #+0]
   \   000000C4   0x22BF             MOVS     R2,#+191
   \   000000C6   0x400A             ANDS     R2,R2,R1
   \   000000C8   0x7002             STRB     R2,[R0, #+0]
    718              
    719              _LCD_BIG_F_ON();
   \   000000CA   0x7B82             LDRB     R2,[R0, #+14]
   \   000000CC   0x2108             MOVS     R1,#+8
   \   000000CE   0x4311             ORRS     R1,R1,R2
   \   000000D0   0x7381             STRB     R1,[R0, #+14]
   \   000000D2   0x2220             MOVS     R2,#+32
   \   000000D4   0x430A             ORRS     R2,R2,R1
   \   000000D6   0x7382             STRB     R2,[R0, #+14]
   \   000000D8   0x2104             MOVS     R1,#+4
   \   000000DA   0x430A             ORRS     R2,R2,R1
   \   000000DC   0x7382             STRB     R2,[R0, #+14]
   \   000000DE   0x7BC3             LDRB     R3,[R0, #+15]
   \   000000E0   0x2210             MOVS     R2,#+16
   \   000000E2   0x431A             ORRS     R2,R2,R3
   \   000000E4   0x73C2             STRB     R2,[R0, #+15]
   \   000000E6   0x4311             ORRS     R1,R1,R2
   \   000000E8   0x73C1             STRB     R1,[R0, #+15]
    720              _LCD_HZ_ON();
   \   000000EA   0x7801             LDRB     R1,[R0, #+0]
   \   000000EC   0x2240             MOVS     R2,#+64
   \   000000EE                      REQUIRE ?Subroutine2
   \   000000EE                      ;; // Fall through to label ?Subroutine2
    721              _LCD_P3_ON();
    722          }
    723          

   \                                 In section .text, align 2, keep-with-next
    724          static void menu_disp_vbat  (void)
    725          {
   \                     menu_disp_vbat: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
    726            register uint16 tmp16;
    727            static uint8 flg = 1;
    728            
    729            _LCD_BIG_SYMB_OFF();
   \   00000002   0x....             LDR      R0,??DataTable116  ;; 0x40043031
   \   00000004   0x7B81             LDRB     R1,[R0, #+14]
   \   00000006   0x22FE             MOVS     R2,#+254
   \   00000008   0x400A             ANDS     R2,R2,R1
   \   0000000A   0x7382             STRB     R2,[R0, #+14]
   \   0000000C   0x21DF             MOVS     R1,#+223
   \   0000000E   0x400A             ANDS     R2,R2,R1
   \   00000010   0x7382             STRB     R2,[R0, #+14]
   \   00000012   0x22FD             MOVS     R2,#+253
   \   00000014   0x7BC3             LDRB     R3,[R0, #+15]
   \   00000016   0x4013             ANDS     R3,R3,R2
   \   00000018   0x73C3             STRB     R3,[R0, #+15]
   \   0000001A   0x23EF             MOVS     R3,#+239
   \   0000001C   0x7B84             LDRB     R4,[R0, #+14]
   \   0000001E   0x401C             ANDS     R4,R4,R3
   \   00000020   0x7384             STRB     R4,[R0, #+14]
   \   00000022   0x7BC6             LDRB     R6,[R0, #+15]
   \   00000024   0x401E             ANDS     R6,R6,R3
   \   00000026   0x73C6             STRB     R6,[R0, #+15]
   \   00000028   0x24FB             MOVS     R4,#+251
   \   0000002A   0x4026             ANDS     R6,R6,R4
   \   0000002C   0x73C6             STRB     R6,[R0, #+15]
   \   0000002E   0x25F7             MOVS     R5,#+247
   \   00000030   0x402E             ANDS     R6,R6,R5
   \   00000032   0x73C6             STRB     R6,[R0, #+15]
   \   00000034   0x7B86             LDRB     R6,[R0, #+14]
   \   00000036   0x4026             ANDS     R6,R6,R4
   \   00000038   0x7386             STRB     R6,[R0, #+14]
   \   0000003A   0x7BC6             LDRB     R6,[R0, #+15]
   \   0000003C   0x4026             ANDS     R6,R6,R4
   \   0000003E   0x73C6             STRB     R6,[R0, #+15]
   \   00000040   0x7B86             LDRB     R6,[R0, #+14]
   \   00000042   0x402E             ANDS     R6,R6,R5
   \   00000044   0x7386             STRB     R6,[R0, #+14]
   \   00000046   0x400E             ANDS     R6,R6,R1
   \   00000048   0x7386             STRB     R6,[R0, #+14]
   \   0000004A   0x4026             ANDS     R6,R6,R4
   \   0000004C   0x7386             STRB     R6,[R0, #+14]
   \   0000004E   0x7BC6             LDRB     R6,[R0, #+15]
   \   00000050   0x400E             ANDS     R6,R6,R1
   \   00000052   0x73C6             STRB     R6,[R0, #+15]
   \   00000054   0x401E             ANDS     R6,R6,R3
   \   00000056   0x73C6             STRB     R6,[R0, #+15]
   \   00000058   0x4026             ANDS     R6,R6,R4
   \   0000005A   0x73C6             STRB     R6,[R0, #+15]
   \   0000005C   0x7B86             LDRB     R6,[R0, #+14]
   \   0000005E   0x402E             ANDS     R6,R6,R5
   \   00000060   0x7386             STRB     R6,[R0, #+14]
   \   00000062   0x400E             ANDS     R6,R6,R1
   \   00000064   0x7386             STRB     R6,[R0, #+14]
   \   00000066   0x4026             ANDS     R6,R6,R4
   \   00000068   0x7386             STRB     R6,[R0, #+14]
   \   0000006A   0x7BC6             LDRB     R6,[R0, #+15]
   \   0000006C   0x401E             ANDS     R6,R6,R3
   \   0000006E   0x73C6             STRB     R6,[R0, #+15]
   \   00000070   0x4026             ANDS     R6,R6,R4
   \   00000072   0x73C6             STRB     R6,[R0, #+15]
    730            _LCD_SML_SYMB_OFF();
   \   00000074   0x7846             LDRB     R6,[R0, #+1]
   \   00000076   0x400E             ANDS     R6,R6,R1
   \   00000078   0x7046             STRB     R6,[R0, #+1]
   \   0000007A   0x401E             ANDS     R6,R6,R3
   \   0000007C   0x7046             STRB     R6,[R0, #+1]
   \   0000007E   0x7806             LDRB     R6,[R0, #+0]
   \   00000080   0x4032             ANDS     R2,R2,R6
   \   00000082   0x7002             STRB     R2,[R0, #+0]
   \   00000084   0x7842             LDRB     R2,[R0, #+1]
   \   00000086   0x402A             ANDS     R2,R2,R5
   \   00000088   0x7042             STRB     R2,[R0, #+1]
   \   0000008A   0x401A             ANDS     R2,R2,R3
   \   0000008C   0x7042             STRB     R2,[R0, #+1]
   \   0000008E   0x400A             ANDS     R2,R2,R1
   \   00000090   0x7042             STRB     R2,[R0, #+1]
   \   00000092   0x4015             ANDS     R5,R5,R2
   \   00000094   0x7045             STRB     R5,[R0, #+1]
   \   00000096   0x402C             ANDS     R4,R4,R5
   \   00000098   0x7044             STRB     R4,[R0, #+1]
   \   0000009A   0x4021             ANDS     R1,R1,R4
   \   0000009C   0x7041             STRB     R1,[R0, #+1]
   \   0000009E   0x400B             ANDS     R3,R3,R1
   \   000000A0   0x7043             STRB     R3,[R0, #+1]
   \   000000A2   0x7801             LDRB     R1,[R0, #+0]
   \   000000A4   0x0649             LSLS     R1,R1,#+25
   \   000000A6   0x0E49             LSRS     R1,R1,#+25
   \   000000A8   0x7001             STRB     R1,[R0, #+0]
   \   000000AA   0x22BF             MOVS     R2,#+191
   \   000000AC   0x400A             ANDS     R2,R2,R1
   \   000000AE   0x7002             STRB     R2,[R0, #+0]
    731           
    732            _LCD_Volts_ON(); // small symbol
   \   000000B0   0x7842             LDRB     R2,[R0, #+1]
   \   000000B2   0x2120             MOVS     R1,#+32
   \   000000B4   0x4311             ORRS     R1,R1,R2
   \   000000B6   0x7041             STRB     R1,[R0, #+1]
    733            _LCD_P3_ON();
   \   000000B8   0x2202             MOVS     R2,#+2
   \   000000BA   0x430A             ORRS     R2,R2,R1
   \   000000BC   0x7042             STRB     R2,[R0, #+1]
   \   000000BE   0x2080             MOVS     R0,#+128
   \   000000C0   0x....             LDR      R1,??DataTable124  ;; 0x4002b000
    734            
    735            /* read battery voltage and initiate next conversion                        */
    736            while (!ADC_Ready(CHA));
   \                     ??menu_disp_vbat_0: (+1)
   \   000000C2   0x680A             LDR      R2,[R1, #+0]
   \   000000C4   0x4002             ANDS     R2,R2,R0
   \   000000C6   0xD0FC             BEQ      ??menu_disp_vbat_0
    737            tmp16=(uint16)ADC_Read(CHA);
   \   000000C8   0x698D             LDR      R5,[R1, #+24]
   \   000000CA   0xB2AD             UXTH     R5,R5
    738            sprintf((char*)buf,"bat %5.3f",ADC2VBAT(tmp16));
   \   000000CC   0x....             LDR      R4,??DataTable115
   \   000000CE   0x0028             MOVS     R0,R5
   \   000000D0   0x.... 0x....      BL       __aeabi_ui2d
   \   000000D4   0x....             ADR      R2,??DataTable125
   \   000000D6   0xCA0C             LDM      R2,{R2,R3}
   \   000000D8   0x.... 0x....      BL       __aeabi_dmul
   \   000000DC   0x0002             MOVS     R2,R0
   \   000000DE   0x000B             MOVS     R3,R1
   \   000000E0   0x....             LDR      R1,??DataTable125_1
   \   000000E2   0x0020             MOVS     R0,R4
   \   000000E4   0x3048             ADDS     R0,R0,#+72
   \   000000E6   0x.... 0x....      BL       sprintf
    739            ADC_Start (CHA,AD9);
   \   000000EA   0x2003             MOVS     R0,#+3
   \   000000EC   0x....             LDR      R1,??DataTable125_2  ;; 0x5022b000
   \   000000EE   0x6008             STR      R0,[R1, #+0]
    740            
    741            if (tmp16 < VBAT2ADC(3.5)) { flg = !flg; }
   \   000000F0   0x....             LDR      R0,??DataTable127  ;; 0xd8f2
   \   000000F2   0x4285             CMP      R5,R0
   \   000000F4   0xDA04             BGE      ??menu_disp_vbat_1
   \   000000F6   0x7C61             LDRB     R1,[R4, #+17]
   \   000000F8   0x1E48             SUBS     R0,R1,#+1
   \   000000FA   0x4180             SBCS     R0,R0,R0
   \   000000FC   0x0FC0             LSRS     R0,R0,#+31
   \   000000FE   0xE000             B        ??menu_disp_vbat_2
    742            else                       { flg =    1; } 
   \                     ??menu_disp_vbat_1: (+1)
   \   00000100   0x2001             MOVS     R0,#+1
   \                     ??menu_disp_vbat_2: (+1)
   \   00000102   0x7460             STRB     R0,[R4, #+17]
    743            
    744            vfnLCD_Write_Str(buf,1);                 /* display text on LCD             */ 
   \   00000104   0x2101             MOVS     R1,#+1
   \   00000106   0x3448             ADDS     R4,R4,#+72
   \   00000108   0x0020             MOVS     R0,R4
   \   0000010A   0x.... 0x....      BL       vfnLCD_Write_Str
    745          }
   \   0000010E   0xBD70             POP      {R4-R6,PC}       ;; return

   \                                 In section .data, align 8
   \                     wTime:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \                     rTime:
   \   00000008   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \                     fcmd_idx:
   \   00000010   0x00               DC8 0
   \   00000011   0x01               DC8 1
   \                     password:
   \   00000012   0x0000             DC16 0
   \                     pulse_index:
   \   00000014   0x00               DC8 0
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         
   \                     urms:
   \   00000018   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \                     irms:
   \   00000020   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \                     w:
   \   00000028   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \                     var:
   \   00000030   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \                     va:
   \   00000038   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000040   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000048   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
    746          

   \                                 In section .text, align 4, keep-with-next
    747          static void menu_disp_pnum1 (void)
    748          {
   \                     menu_disp_pnum1: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
    749              sprintf((char*)buf,"P1%7d", pulses[ramcfg.wh_idx]);
   \   00000002   0x....             LDR      R4,??DataTable115
   \   00000004   0x....             LDR      R0,??DataTable127_1
   \   00000006   0x8880             LDRH     R0,[R0, #+4]
   \   00000008   0x0080             LSLS     R0,R0,#+2
   \   0000000A   0x....             LDR      R1,??DataTable127_2
   \   0000000C   0x580A             LDR      R2,[R1, R0]
   \   0000000E   0xBF00             Nop      
   \   00000010   0x....             ADR.N    R1,`?<Constant "P1%7d">`
   \   00000012   0x....             B.N      ?Subroutine1
    750              vfnLCD_Write_Str(buf,1);              /* display text on LCD              */
    751              
    752             _LCD_BIG_SYMB_OFF();
    753             _LCD_SML_SYMB_OFF();
    754             _LCD_P3_OFF();
    755          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1: (+1)
   \   00000000   0x0020             MOVS     R0,R4
   \   00000002   0x3048             ADDS     R0,R0,#+72
   \   00000004   0x.... 0x....      BL       sprintf
   \   00000008                      REQUIRE ??Subroutine5_0
   \   00000008                      ;; // Fall through to label ??Subroutine5_0

   \                                 In section .text, align 2, keep-with-next
   \                     ??Subroutine5_0: (+1)
   \   00000000   0x2101             MOVS     R1,#+1
   \   00000002   0x3448             ADDS     R4,R4,#+72
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0x.... 0x....      BL       vfnLCD_Write_Str
   \   0000000A   0x....             LDR      R0,??DataTable116  ;; 0x40043031
   \   0000000C   0x7B81             LDRB     R1,[R0, #+14]
   \   0000000E   0x22FE             MOVS     R2,#+254
   \   00000010   0x400A             ANDS     R2,R2,R1
   \   00000012   0x7382             STRB     R2,[R0, #+14]
   \   00000014   0x21DF             MOVS     R1,#+223
   \   00000016   0x400A             ANDS     R2,R2,R1
   \   00000018   0x7382             STRB     R2,[R0, #+14]
   \   0000001A   0x22FD             MOVS     R2,#+253
   \   0000001C   0x7BC3             LDRB     R3,[R0, #+15]
   \   0000001E   0x4013             ANDS     R3,R3,R2
   \   00000020   0x73C3             STRB     R3,[R0, #+15]
   \   00000022   0x23EF             MOVS     R3,#+239
   \   00000024   0x7B84             LDRB     R4,[R0, #+14]
   \   00000026   0x401C             ANDS     R4,R4,R3
   \   00000028   0x7384             STRB     R4,[R0, #+14]
   \   0000002A   0x7BC6             LDRB     R6,[R0, #+15]
   \   0000002C   0x401E             ANDS     R6,R6,R3
   \   0000002E   0x73C6             STRB     R6,[R0, #+15]
   \   00000030   0x24FB             MOVS     R4,#+251
   \   00000032   0x4026             ANDS     R6,R6,R4
   \   00000034   0x73C6             STRB     R6,[R0, #+15]
   \   00000036   0x25F7             MOVS     R5,#+247
   \   00000038   0x402E             ANDS     R6,R6,R5
   \   0000003A   0x73C6             STRB     R6,[R0, #+15]
   \   0000003C   0x7B86             LDRB     R6,[R0, #+14]
   \   0000003E   0x4026             ANDS     R6,R6,R4
   \   00000040   0x7386             STRB     R6,[R0, #+14]
   \   00000042   0x7BC6             LDRB     R6,[R0, #+15]
   \   00000044   0x4026             ANDS     R6,R6,R4
   \   00000046   0x73C6             STRB     R6,[R0, #+15]
   \   00000048   0x7B86             LDRB     R6,[R0, #+14]
   \   0000004A   0x402E             ANDS     R6,R6,R5
   \   0000004C   0x7386             STRB     R6,[R0, #+14]
   \   0000004E   0x400E             ANDS     R6,R6,R1
   \   00000050   0x7386             STRB     R6,[R0, #+14]
   \   00000052   0x4026             ANDS     R6,R6,R4
   \   00000054   0x7386             STRB     R6,[R0, #+14]
   \   00000056   0x7BC6             LDRB     R6,[R0, #+15]
   \   00000058   0x400E             ANDS     R6,R6,R1
   \   0000005A   0x73C6             STRB     R6,[R0, #+15]
   \   0000005C   0x401E             ANDS     R6,R6,R3
   \   0000005E   0x73C6             STRB     R6,[R0, #+15]
   \   00000060   0x4026             ANDS     R6,R6,R4
   \   00000062   0x73C6             STRB     R6,[R0, #+15]
   \   00000064   0x7B86             LDRB     R6,[R0, #+14]
   \   00000066   0x402E             ANDS     R6,R6,R5
   \   00000068   0x7386             STRB     R6,[R0, #+14]
   \   0000006A   0x400E             ANDS     R6,R6,R1
   \   0000006C   0x7386             STRB     R6,[R0, #+14]
   \   0000006E   0x4026             ANDS     R6,R6,R4
   \   00000070   0x7386             STRB     R6,[R0, #+14]
   \   00000072   0x7BC6             LDRB     R6,[R0, #+15]
   \   00000074   0x401E             ANDS     R6,R6,R3
   \   00000076   0x73C6             STRB     R6,[R0, #+15]
   \   00000078   0x4026             ANDS     R6,R6,R4
   \   0000007A   0x73C6             STRB     R6,[R0, #+15]
   \   0000007C   0x7846             LDRB     R6,[R0, #+1]
   \   0000007E   0x400E             ANDS     R6,R6,R1
   \   00000080   0x7046             STRB     R6,[R0, #+1]
   \   00000082   0x401E             ANDS     R6,R6,R3
   \   00000084   0x7046             STRB     R6,[R0, #+1]
   \   00000086   0x7806             LDRB     R6,[R0, #+0]
   \   00000088   0x4016             ANDS     R6,R6,R2
   \   0000008A   0x7006             STRB     R6,[R0, #+0]
   \   0000008C   0x7846             LDRB     R6,[R0, #+1]
   \   0000008E   0x402E             ANDS     R6,R6,R5
   \   00000090   0x7046             STRB     R6,[R0, #+1]
   \   00000092   0x401E             ANDS     R6,R6,R3
   \   00000094   0x7046             STRB     R6,[R0, #+1]
   \   00000096   0x400E             ANDS     R6,R6,R1
   \   00000098   0x7046             STRB     R6,[R0, #+1]
   \   0000009A   0x4035             ANDS     R5,R5,R6
   \   0000009C   0x7045             STRB     R5,[R0, #+1]
   \   0000009E   0x402C             ANDS     R4,R4,R5
   \   000000A0   0x7044             STRB     R4,[R0, #+1]
   \   000000A2   0x4021             ANDS     R1,R1,R4
   \   000000A4   0x7041             STRB     R1,[R0, #+1]
   \   000000A6   0x400B             ANDS     R3,R3,R1
   \   000000A8   0x7043             STRB     R3,[R0, #+1]
   \   000000AA   0x7801             LDRB     R1,[R0, #+0]
   \   000000AC   0x0649             LSLS     R1,R1,#+25
   \   000000AE   0x0E49             LSRS     R1,R1,#+25
   \   000000B0   0x7001             STRB     R1,[R0, #+0]
   \   000000B2   0x23BF             MOVS     R3,#+191
   \   000000B4   0x400B             ANDS     R3,R3,R1
   \   000000B6   0x7003             STRB     R3,[R0, #+0]
   \   000000B8   0x7841             LDRB     R1,[R0, #+1]
   \   000000BA   0x400A             ANDS     R2,R2,R1
   \   000000BC   0x7042             STRB     R2,[R0, #+1]
   \   000000BE   0xBD70             POP      {R4-R6,PC}       ;; return
    756          

   \                                 In section .text, align 2, keep-with-next
    757          static void menu_disp_pnum2 (void)
    758          {
   \                     menu_disp_pnum2: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
    759            sprintf((char*)buf,"P2%7d", pulses[ramcfg.varh_idx]);
   \   00000002   0x....             LDR      R4,??DataTable115
   \   00000004   0x....             LDR      R0,??DataTable127_1
   \   00000006   0x88C0             LDRH     R0,[R0, #+6]
   \   00000008   0x0080             LSLS     R0,R0,#+2
   \   0000000A   0x....             LDR      R1,??DataTable127_2
   \   0000000C   0x580A             LDR      R2,[R1, R0]
   \   0000000E   0x....             LDR      R1,??DataTable127_3
   \   00000010                      REQUIRE ?Subroutine1
   \   00000010                      ;; // Fall through to label ?Subroutine1
    760            vfnLCD_Write_Str    (buf,1);
    761            
    762            _LCD_BIG_SYMB_OFF();
    763            _LCD_SML_SYMB_OFF();
    764            _LCD_P3_OFF();
    765          }
    766          

   \                                 In section .text, align 4, keep-with-next
    767          static void menu_disp_snum  (void)
    768          {
   \                     menu_disp_snum: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
    769            sprintf((char*)buf,"R2051-%03d", ramcfg.id);
   \   00000002   0x....             LDR      R4,??DataTable127_4
   \   00000004   0x....             LDR      R0,??DataTable127_1
   \   00000006   0x8802             LDRH     R2,[R0, #+0]
   \   00000008   0x....             ADR.N    R1,`?<Constant "R2051-%03d">`
   \   0000000A   0x....             B.N      ?Subroutine1
    770            vfnLCD_Write_Str(buf,1);                /* display text on LCD              */
    771            
    772            _LCD_BIG_SYMB_OFF();
    773            _LCD_SML_SYMB_OFF();
    774            _LCD_P3_OFF();
    775          }
    776          

   \                                 In section .text, align 4, keep-with-next
    777          static void menu_disp_class (void)
    778          {
   \                     menu_disp_class: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
    779            sprintf((char*)buf, METER_CL);
   \   00000002   0x....             LDR      R4,??DataTable127_4
   \   00000004   0x....             ADR.N    R1,`?<Constant " C 5-120A">`
   \   00000006   0x0020             MOVS     R0,R4
   \   00000008   0x3048             ADDS     R0,R0,#+72
   \   0000000A   0x.... 0x....      BL       sprintf
    780            vfnLCD_Write_Str(buf,1);                /* display text on LCD              */
   \   0000000E   0x....             B.N      ??Subroutine5_0
    781            
    782            _LCD_BIG_SYMB_OFF();
    783            _LCD_SML_SYMB_OFF();
    784            _LCD_P3_OFF();
    785          }
    786          
    787          /******************************************************************************
    788           * FreeMASTER commands definition
    789           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    790          static void fcmd_dummy_fcn  (void) 
    791          {                  
    792            fcmd_idx=0;             
   \                     fcmd_dummy_fcn: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x....             LDR      R1,??DataTable127_4
   \   00000004   0x7408             STRB     R0,[R1, #+16]
    793          }
   \   00000006   0x4770             BX       LR               ;; return
    794          

   \                                 In section .text, align 2, keep-with-next
    795          static void fcmd_sw_reset   (void) 
    796          { 
    797            ramcnt.hardfault = FALSE; /* clear hard fault notification                  */
   \                     fcmd_sw_reset: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x....             LDR      R1,??DataTable127_5
   \   00000004   0x8188             STRH     R0,[R1, #+12]
    798            SystemReset (); 
   \   00000006   0x....             LDR      R0,??DataTable127_6  ;; 0x5fa0004
   \   00000008   0x....             LDR      R1,??DataTable127_7  ;; 0xe000ed0c
   \   0000000A   0x6008             STR      R0,[R1, #+0]
   \                     ??fcmd_sw_reset_0: (+1)
   \   0000000C   0xE7FE             B        ??fcmd_sw_reset_0
    799          }
    800          

   \                                 In section .text, align 2, keep-with-next
    801          static void fcmd_clr_counter(void)
    802          {  
   \                     fcmd_clr_counter: (+1)
   \   00000000   0xB410             PUSH     {R4}
    803            ramcnt.wh_cnt     = 0l;
   \   00000002   0x....             LDR      R2,??DataTable127_5
   \   00000004   0x2300             MOVS     R3,#+0
   \   00000006   0x6013             STR      R3,[R2, #+0]
    804            mlib.Wh.dispRem   = 0ll;
   \   00000008   0x....             LDR      R4,??DataTable127_8
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x2100             MOVS     R1,#+0
   \   0000000E   0xC403             STM      R4!,{R0,R1}
   \   00000010   0x3440             ADDS     R4,R4,#+64
    805            ramcnt.varh_cnt   = 0l;
   \   00000012   0x6053             STR      R3,[R2, #+4]
    806            mlib.VARh.dispRem = 0ll;  
   \   00000014   0xC403             STM      R4!,{R0,R1}
    807            fcmd_idx = 0;
   \   00000016   0x....             LDR      R0,??DataTable127_4
   \   00000018   0x7403             STRB     R3,[R0, #+16]
    808          }
   \   0000001A   0xBC10             POP      {R4}
   \   0000001C   0x4770             BX       LR               ;; return
    809          

   \                                 In section .text, align 2, keep-with-next
    810          static void fcmd_clr_tampers(void)
    811          {  
    812            IRTC_ClrIsrFlag (IRTC_TAMPER0_MASK|IRTC_TAMPER1_MASK|IRTC_TAMPER2_MASK);
   \                     fcmd_clr_tampers: (+1)
   \   00000000   0x2280             MOVS     R2,#+128
   \   00000002   0x2002             MOVS     R0,#+2
   \   00000004   0x....             LDR      R1,??DataTable127_9  ;; 0x40050012
   \   00000006   0xE000             B        ??fcmd_clr_tampers_0
   \                     ??fcmd_clr_tampers_1: (+1)
   \   00000008   0x700A             STRB     R2,[R1, #+0]
   \                     ??fcmd_clr_tampers_0: (+1)
   \   0000000A   0x880B             LDRH     R3,[R1, #+0]
   \   0000000C   0x4203             TST      R3,R0
   \   0000000E   0xD0FB             BEQ      ??fcmd_clr_tampers_1
   \                     ??fcmd_clr_tampers_2: (+1)
   \   00000010   0x2200             MOVS     R2,#+0
   \   00000012   0x880B             LDRH     R3,[R1, #+0]
   \   00000014   0x4203             TST      R3,R0
   \   00000016   0xD007             BEQ      ??fcmd_clr_tampers_3
   \   00000018   0x700A             STRB     R2,[R1, #+0]
   \   0000001A   0x2240             MOVS     R2,#+64
   \   0000001C   0x700A             STRB     R2,[R1, #+0]
   \   0000001E   0x22C0             MOVS     R2,#+192
   \   00000020   0x700A             STRB     R2,[R1, #+0]
   \   00000022   0x2280             MOVS     R2,#+128
   \   00000024   0x700A             STRB     R2,[R1, #+0]
   \   00000026   0xE7F3             B        ??fcmd_clr_tampers_2
   \                     ??fcmd_clr_tampers_3: (+1)
   \   00000028   0x20E0             MOVS     R0,#+224
   \   0000002A   0x00C0             LSLS     R0,R0,#+3        ;; #+1792
   \   0000002C   0x8408             STRH     R0,[R1, #+32]
   \   0000002E   0x804A             STRH     R2,[R1, #+2]
    813            fcmd_idx = 0;  
   \   00000030   0x....             LDR      R0,??DataTable127_4
   \   00000032   0x7402             STRB     R2,[R0, #+16]
    814          }
   \   00000034   0x4770             BX       LR               ;; return
    815          

   \                                 In section .text, align 2, keep-with-next
    816          static void fcmd_set_clock  (void) 
    817          { 
   \                     fcmd_set_clock: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    818            IRTC_SetClock (&wTime);
   \   00000002   0x....             LDR      R4,??DataTable127_4
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0x.... 0x....      BL       IRTC_SetClock
    819            fcmd_idx=0;
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x7420             STRB     R0,[R4, #+16]
    820          }
   \   0000000E   0xBD10             POP      {R4,PC}          ;; return
    821          

   \                                 In section .text, align 2, keep-with-next
    822          static void fcmd_set_pulse1 (void)
    823          {
    824            ramcfg.wh_idx     = pulse_index;
   \                     fcmd_set_pulse1: (+1)
   \   00000000   0x....             LDR      R2,??DataTable127_4
   \   00000002   0x2014             MOVS     R0,#+20
   \   00000004   0x5610             LDRSB    R0,[R2, R0]
   \   00000006   0x....             LDR      R1,??DataTable127_1
   \   00000008   0x8088             STRH     R0,[R1, #+4]
    825            mlib.Wh.pulsRem   = 0ll;
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x2100             MOVS     R1,#+0
   \   0000000E   0x....             LDR      R3,??DataTable127_10
   \   00000010   0xC303             STM      R3!,{R0,R1}
    826            fcmd_idx = 0;
   \   00000012   0x7410             STRB     R0,[R2, #+16]
    827          }
   \   00000014   0x4770             BX       LR               ;; return
    828          

   \                                 In section .text, align 2, keep-with-next
    829          static void fcmd_set_pulse2 (void)
    830          {
    831            ramcfg.varh_idx   = pulse_index;
   \                     fcmd_set_pulse2: (+1)
   \   00000000   0x....             LDR      R2,??DataTable127_4
   \   00000002   0x2014             MOVS     R0,#+20
   \   00000004   0x5610             LDRSB    R0,[R2, R0]
   \   00000006   0x....             LDR      R1,??DataTable127_1
   \   00000008   0x80C8             STRH     R0,[R1, #+6]
    832            mlib.VARh.pulsRem = 0ll;
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x2100             MOVS     R1,#+0
   \   0000000E   0x....             LDR      R3,??DataTable127_11
   \   00000010   0xC303             STM      R3!,{R0,R1}
    833            fcmd_idx = 0;
   \   00000012   0x7410             STRB     R0,[R2, #+16]
    834          }
   \   00000014   0x4770             BX       LR               ;; return
    835          

   \                                 In section .text, align 4, keep-with-next
    836          static void fcmd_calibrate(void)
    837          {  
   \                     fcmd_calibrate: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    838            if (password == PASSWORD) 
   \   00000002   0x....             LDR      R0,??DataTable127_4
   \   00000004   0x8A41             LDRH     R1,[R0, #+18]
   \   00000006   0x....             LDR      R2,??DataTable127_12  ;; 0x2b67
   \   00000008   0x4291             CMP      R1,R2
   \   0000000A   0xD108             BNE      ??fcmd_calibrate_0
    839            { 
    840              DisableInterrupts ();
   \   0000000C   0xB672             CPSID i
    841              CONFIG_SaveFlash  ((tCONFIG_FLASH_DATA*)&ramcfg, 0xffff); 
   \   0000000E   0x....             LDR      R1,??DataTable127_13  ;; 0xffff
   \   00000010   0x....             LDR      R0,??DataTable127_1
   \   00000012   0x.... 0x....      BL       CONFIG_SaveFlash
    842              SystemReset       (); 
   \   00000016   0x....             LDR      R0,??DataTable127_6  ;; 0x5fa0004
   \   00000018   0x....             LDR      R1,??DataTable127_7  ;; 0xe000ed0c
   \   0000001A   0x6008             STR      R0,[R1, #+0]
   \                     ??fcmd_calibrate_1: (+1)
   \   0000001C   0xE7FE             B        ??fcmd_calibrate_1
    843            }
    844            password = 0;
   \                     ??fcmd_calibrate_0: (+1)
   \   0000001E   0x2100             MOVS     R1,#+0
   \   00000020   0x8241             STRH     R1,[R0, #+18]
    845            fcmd_idx = 0;
   \   00000022   0x7401             STRB     R1,[R0, #+16]
    846          }
   \   00000024   0xBD01             POP      {R0,PC}          ;; return
    847          

   \                                 In section .text, align 4, keep-with-next
    848          static void fcmd_save_config (void) 
    849          { 
   \                     fcmd_save_config: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    850            if (password == PASSWORD) 
   \   00000002   0x....             LDR      R0,??DataTable127_4
   \   00000004   0x8A41             LDRH     R1,[R0, #+18]
   \   00000006   0x....             LDR      R2,??DataTable127_12  ;; 0x2b67
   \   00000008   0x4291             CMP      R1,R2
   \   0000000A   0xD109             BNE      ??fcmd_save_config_0
    851            {
    852              DisableInterrupts ();
   \   0000000C   0xB672             CPSID i
    853              CONFIG_SaveFlash  ((tCONFIG_FLASH_DATA*)&ramcfg, ramcfg.flag); 
   \   0000000E   0x....             LDR      R0,??DataTable127_1
   \   00000010   0x2174             MOVS     R1,#+116
   \   00000012   0x5A41             LDRH     R1,[R0, R1]
   \   00000014   0x.... 0x....      BL       CONFIG_SaveFlash
    854              SystemReset       (); 
   \   00000018   0x....             LDR      R0,??DataTable127_6  ;; 0x5fa0004
   \   0000001A   0x....             LDR      R1,??DataTable127_7  ;; 0xe000ed0c
   \   0000001C   0x6008             STR      R0,[R1, #+0]
   \                     ??fcmd_save_config_1: (+1)
   \   0000001E   0xE7FE             B        ??fcmd_save_config_1
    855            }
    856            password = 0;
   \                     ??fcmd_save_config_0: (+1)
   \   00000020   0x2100             MOVS     R1,#+0
   \   00000022   0x8241             STRH     R1,[R0, #+18]
    857            fcmd_idx = 0;
   \   00000024   0x7401             STRB     R1,[R0, #+16]
    858          }
   \   00000026   0xBD01             POP      {R0,PC}          ;; return
    859          
    860          /******************************************************************************
    861           * HardFault handler
    862           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    863          void hardfault_isr (void)
    864          {
    865            ramcnt.hardfault = TRUE;  /* mark occurence of the hard fault exception     */
   \                     hardfault_isr: (+1)
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x....             LDR      R1,??DataTable127_5
   \   00000004   0x8188             STRH     R0,[R1, #+12]
    866            for(;;)                   /* enter software loop to wait for watchdog reset */
   \                     ??hardfault_isr_0: (+1)
   \   00000006   0xE7FE             B        ??hardfault_isr_0
    867            {
    868            }
    869          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable99:
   \   00000000   0x........         DC32     ??fmstr_tsatable

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable99_1:
   \   00000000   0x........         DC32     ??fmstr_tsatable_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable99_2:
   \   00000000   0x........         DC32     ??fmstr_tsatable_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable99_3:
   \   00000000   0x........         DC32     ??fmstr_tsatable_3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable99_4:
   \   00000000   0x0000FFFF         DC32     0xffff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable99_5:
   \   00000000   0x4007B004         DC32     0x4007b004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable99_6:
   \   00000000   0x........         DC32     `?<Constant (tREG){17}>`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable99_7:
   \   00000000   0x........         DC32     `?<Constant (tLVD){80, 64}>`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable99_8:
   \   00000000   0x4803F038         DC32     0x4803f038

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable99_9:
   \   00000000   0x........         DC32     `?<Constant (tPORT){0L, 0L}>`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable99_10:
   \   00000000   0x........         DC32     ramcnt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable99_11:
   \   00000000   0x00005555         DC32     0x5555

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable99_12:
   \   00000000   0x........         DC32     nvmcnt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable99_13:
   \   00000000   0x........         DC32     wTime

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable99_14:
   \   00000000   0x........         DC32     `?<Constant (tTAMPER){0, 181}>_1`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable99_15:
   \   00000000   0x........         DC32     `?<Constant (tTAMPER){0, 181}>`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable99_16:
   \   00000000   0x........         DC32     `?<Constant (tTAMPER){0, 53}>`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable99_17:
   \   00000000   0x........         DC32     `?<Constant (tIRTC){0, 0, 21248}>`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable99_18:
   \   00000000   0x40050012         DC32     0x40050012

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable99_19:
   \   00000000   0x0000FFF5         DC32     0xfff5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable100:
   \   00000000   0x........         DC32     ramcfg

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable100_1:
   \   00000000   0x4003F004         DC32     0x4003f004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable100_2:
   \   00000000   0x7808AC30         DC32     0x7808ac30

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable100_3:
   \   00000000   0x03A97FC8         DC32     0x3a97fc8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable100_4:
   \   00000000   0xD0010801         DC32     0xd0010801

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable100_5:
   \   00000000   0x80010000         DC32     0x80010000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable100_6:
   \   00000000   0x........         DC32     `?<Constant (tPLL){0, 128, 96, 72, 0, 0, 128}>`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable100_7:
   \   00000000   0x........         DC32     `?<Constant (tVREF_S){536870912L, 0}>`

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "password">`:
   \   00000000   0x70 0x61          DC8 "password"
   \              0x73 0x73    
   \              0x77 0x6F    
   \              0x72 0x64    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 2, keep-with-next
   \                     `?<Constant "\\341">`:
   \   00000000   0xE1 0x00          DC8 "\341"

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "pulse_index">`:
   \   00000000   0x70 0x75          DC8 "pulse_index"
   \              0x6C 0x73    
   \              0x65 0x5F    
   \              0x69 0x6E    
   \              0x64 0x65    
   \              0x78 0x00    

   \                                 In section .rodata, align 2, keep-with-next
   \                     `?<Constant "\\360">`:
   \   00000000   0xF0 0x00          DC8 "\360"

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "fcmd_idx">`:
   \   00000000   0x66 0x63          DC8 "fcmd_idx"
   \              0x6D 0x64    
   \              0x5F 0x69    
   \              0x64 0x78    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "ramcnt.menu_idx">`:
   \   00000000   0x72 0x61          DC8 "ramcnt.menu_idx"
   \              0x6D 0x63    
   \              0x6E 0x74    
   \              0x2E 0x6D    
   \              0x65 0x6E    
   \              0x75 0x5F    
   \              0x69 0x64    
   \              0x78 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "ramcnt.pulse_out">`:
   \   00000000   0x72 0x61          DC8 "ramcnt.pulse_out"
   \              0x6D 0x63    
   \              0x6E 0x74    
   \              0x2E 0x70    
   \              0x75 0x6C    
   \              0x73 0x65    
   \              0x5F 0x6F    
   \              0x75 0x74    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "wTime">`:
   \   00000000   0x77 0x54          DC8 "wTime"
   \              0x69 0x6D    
   \              0x65 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "tTIME">`:
   \   00000000   0x74 0x54          DC8 "tTIME"
   \              0x49 0x4D    
   \              0x45 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "sec">`:
   \   00000000   0x73 0x65          DC8 "sec"
   \              0x63 0x00    

   \                                 In section .rodata, align 2, keep-with-next
   \                     `?<Constant "\\340">`:
   \   00000000   0xE0 0x00          DC8 "\340"

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "min">`:
   \   00000000   0x6D 0x69          DC8 "min"
   \              0x6E 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "hour">`:
   \   00000000   0x68 0x6F          DC8 "hour"
   \              0x75 0x72    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "day">`:
   \   00000000   0x64 0x61          DC8 "day"
   \              0x79 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "wday">`:
   \   00000000   0x77 0x64          DC8 "wday"
   \              0x61 0x79    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "mon">`:
   \   00000000   0x6D 0x6F          DC8 "mon"
   \              0x6E 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "year">`:
   \   00000000   0x79 0x65          DC8 "year"
   \              0x61 0x72    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "u24_sample">`:
   \   00000000   0x75 0x32          DC8 "u24_sample"
   \              0x34 0x5F    
   \              0x73 0x61    
   \              0x6D 0x70    
   \              0x6C 0x65    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .rodata, align 2, keep-with-next
   \                     `?<Constant "\\366">`:
   \   00000000   0xF6 0x00          DC8 "\366"

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "i24_sample">`:
   \   00000000   0x69 0x32          DC8 "i24_sample"
   \              0x34 0x5F    
   \              0x73 0x61    
   \              0x6D 0x70    
   \              0x6C 0x65    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "mlib.uDcb[1].yIIR">`:
   \   00000000   0x6D 0x6C          DC8 "mlib.uDcb[1].yIIR"
   \              0x69 0x62    
   \              0x2E 0x75    
   \              0x44 0x63    
   \              0x62 0x5B    
   \              0x31 0x5D    
   \              0x2E 0x79    
   \              0x49 0x49    
   \              0x52 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "mlib.iDcb[1].yIIR">`:
   \   00000000   0x6D 0x6C          DC8 "mlib.iDcb[1].yIIR"
   \              0x69 0x62    
   \              0x2E 0x69    
   \              0x44 0x63    
   \              0x62 0x5B    
   \              0x31 0x5D    
   \              0x2E 0x79    
   \              0x49 0x49    
   \              0x52 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "wh">`:
   \   00000000   0x77 0x68          DC8 "wh"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 2, keep-with-next
   \                     `?<Constant "\\373">`:
   \   00000000   0xFB 0x00          DC8 "\373"

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "varh">`:
   \   00000000   0x76 0x61          DC8 "varh"
   \              0x72 0x68    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "urms">`:
   \   00000000   0x75 0x72          DC8 "urms"
   \              0x6D 0x73    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "irms">`:
   \   00000000   0x69 0x72          DC8 "irms"
   \              0x6D 0x73    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 2, keep-with-next
   \                     `?<Constant "w">`:
   \   00000000   0x77 0x00          DC8 "w"

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "var">`:
   \   00000000   0x76 0x61          DC8 "var"
   \              0x72 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "va">`:
   \   00000000   0x76 0x61          DC8 "va"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "freq">`:
   \   00000000   0x66 0x72          DC8 "freq"
   \              0x65 0x71    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "ramcnt.wh_cnt">`:
   \   00000000   0x72 0x61          DC8 "ramcnt.wh_cnt"
   \              0x6D 0x63    
   \              0x6E 0x74    
   \              0x2E 0x77    
   \              0x68 0x5F    
   \              0x63 0x6E    
   \              0x74 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 2, keep-with-next
   \                     `?<Constant "\\342">`:
   \   00000000   0xE2 0x00          DC8 "\342"

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "ramcnt.varh_cnt">`:
   \   00000000   0x72 0x61          DC8 "ramcnt.varh_cnt"
   \              0x6D 0x63    
   \              0x6E 0x74    
   \              0x2E 0x76    
   \              0x61 0x72    
   \              0x68 0x5F    
   \              0x63 0x6E    
   \              0x74 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "ramcfg.wh_idx">`:
   \   00000000   0x72 0x61          DC8 "ramcfg.wh_idx"
   \              0x6D 0x63    
   \              0x66 0x67    
   \              0x2E 0x77    
   \              0x68 0x5F    
   \              0x69 0x64    
   \              0x78 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "ramcfg.varh_idx">`:
   \   00000000   0x72 0x61          DC8 "ramcfg.varh_idx"
   \              0x6D 0x63    
   \              0x66 0x67    
   \              0x2E 0x76    
   \              0x61 0x72    
   \              0x68 0x5F    
   \              0x69 0x64    
   \              0x78 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "ramcfg.u_gain">`:
   \   00000000   0x72 0x61          DC8 "ramcfg.u_gain"
   \              0x6D 0x63    
   \              0x66 0x67    
   \              0x2E 0x75    
   \              0x5F 0x67    
   \              0x61 0x69    
   \              0x6E 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "ramcfg.i_gain">`:
   \   00000000   0x72 0x61          DC8 "ramcfg.i_gain"
   \              0x6D 0x63    
   \              0x66 0x67    
   \              0x2E 0x69    
   \              0x5F 0x67    
   \              0x61 0x69    
   \              0x6E 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "ramcfg.delay">`:
   \   00000000   0x72 0x61          DC8 "ramcfg.delay"
   \              0x6D 0x63    
   \              0x66 0x67    
   \              0x2E 0x64    
   \              0x65 0x6C    
   \              0x61 0x79    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 2, keep-with-next
   \                     `?<Constant "\\361">`:
   \   00000000   0xF1 0x00          DC8 "\361"

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "ramcfg.flag">`:
   \   00000000   0x72 0x61          DC8 "ramcfg.flag"
   \              0x6D 0x63    
   \              0x66 0x67    
   \              0x2E 0x66    
   \              0x6C 0x61    
   \              0x67 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "rTime">`:
   \   00000000   0x72 0x54          DC8 "rTime"
   \              0x69 0x6D    
   \              0x65 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "CMP1_SCR">`:
   \   00000000   0x43 0x4D          DC8 "CMP1_SCR"
   \              0x50 0x31    
   \              0x5F 0x53    
   \              0x43 0x52    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "TMR0_CNTR">`:
   \   00000000   0x54 0x4D          DC8 "TMR0_CNTR"
   \              0x52 0x30    
   \              0x5F 0x43    
   \              0x4E 0x54    
   \              0x52 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "TMR0_CAPT">`:
   \   00000000   0x54 0x4D          DC8 "TMR0_CAPT"
   \              0x52 0x30    
   \              0x5F 0x43    
   \              0x41 0x50    
   \              0x54 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "tamper_flags">`:
   \   00000000   0x74 0x61          DC8 "tamper_flags"
   \              0x6D 0x70    
   \              0x65 0x72    
   \              0x5F 0x66    
   \              0x6C 0x61    
   \              0x67 0x73    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "reset_source">`:
   \   00000000   0x72 0x65          DC8 "reset_source"
   \              0x73 0x65    
   \              0x74 0x5F    
   \              0x73 0x6F    
   \              0x75 0x72    
   \              0x63 0x65    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant (tLVD){80, 64}>`:
   \   00000000   0x50 0x40          DC8 80, 64, 0, 0
   \              0x00 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant (tREG){17}>`:
   \   00000000   0x11 0x00          DC8 17, 0, 0, 0
   \              0x00 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant (tPORT){0L, 0L}>`:
   \   00000000   0x00000000         DC32 0, 0
   \              0x00000000   

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant (tIRTC){0, 0, 21248}>`:
   \   00000000   0x0000 0x0000      DC16 0, 0, 21248
   \              0x5300       
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant (tTAMPER){0, 53}>`:
   \   00000000   0x0000 0x0035      DC16 0, 53

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant (tTAMPER){0, 181}>`:
   \   00000000   0x0000 0x00B5      DC16 0, 181

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant (tTAMPER){0, 181}>_1`:
   \   00000000   0x0000 0x00B5      DC16 0, 181

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant (tSMC){34}>`:
   \   00000000   0x22 0x00          DC8 34, 0, 0, 0
   \              0x00 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant (tPLL){0, 128, 96, 72, 0, 0, 128}>`:
   \   00000000   0x00 0x80          DC8 0, 128, 96, 72, 0, 0, 128, 0
   \              0x60 0x48    
   \              0x00 0x00    
   \              0x80 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant (tTMR_CH){13312, 64, 2048}>`:
   \   00000000   0x3400 0x0040      DC16 13312, 64, 2048
   \              0x0800       
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable101:
   \   00000000   0x0000FFA5         DC32     0xffa5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable101_1:
   \   00000000   0x........         DC32     `?<Constant (tSMC){34}>`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable101_2:
   \   00000000   0x4007E000         DC32     0x4007e000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable101_3:
   \   00000000   0x4003E000         DC32     0x4003e000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable101_4:
   \   00000000   0x........         DC32     `?<Constant (tVREF){64, 193, 8}>`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable101_5:
   \   00000000   0x4006F000         DC32     0x4006f000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable101_6:
   \   00000000   0x........         DC32     `?<Constant (tPORT){655619L, 4294967295L}>`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable101_7:
   \   00000000   0xF8000003         DC32     0xf8000003

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable101_8:
   \   00000000   0x........         DC32     button_callback

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable101_9:
   \   00000000   0x........         DC32     `?<Constant (tPORT){655619L, 4294967295L}>_1`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable101_10:
   \   00000000   0xF8000040         DC32     0xf8000040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable101_11:
   \   00000000   0x........         DC32     `?<Constant (tPORT){256L, 0L}>`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable101_12:
   \   00000000   0x........         DC32     `?<Constant (tPORT){512L, 0L}>`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable101_13:
   \   00000000   0x........         DC32     `?<Constant (tPORT){512L, 0L}>_1`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable101_14:
   \   00000000   0x........         DC32     `?<Constant (tUART){0, 20, 0, 44, 0, 0, 0, 0, 0`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable101_15:
   \   00000000   0x........         DC32     FMSTR_Isr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable101_16:
   \   00000000   0x........         DC32     auxcalc_callback

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable101_17:
   \   00000000   0x........         DC32     display_callback

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable101_18:
   \   00000000   0x520BF06C         DC32     0x520bf06c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable101_19:
   \   00000000   0x........         DC32     `?<Constant (tAFE_CH){2148036608L}>`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable101_20:
   \   00000000   0x........         DC32     afech2_callback

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable101_21:
   \   00000000   0x........         DC32     `?<Constant (tAFE_CH){2148036608L}>_1`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable101_22:
   \   00000000   0x40030018         DC32     0x40030018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable101_23:
   \   00000000   0x8064F400         DC32     0x8064f400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable101_24:
   \   00000000   0x........         DC32     `?<Constant (tADC_CH){31L}>_2`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable101_25:
   \   00000000   0x........         DC32     `?<Constant (tADC_CH){31L}>_1`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable101_26:
   \   00000000   0x........         DC32     `?<Constant (tADC_CH){31L}>`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable101_27:
   \   00000000   0x........         DC32     `?<Constant (tADC_CH){3L}>`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable101_28:
   \   00000000   0x........         DC32     `?<Constant (tADC){143L, 11L, 0L, 0L, 2L, 0L}>`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable101_29:
   \   00000000   0x........         DC32     `?<Constant (tXBAR){0}>`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable101_30:
   \   00000000   0x........         DC32     `?<Constant (tPORT){1024L, 0L}>`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable101_31:
   \   00000000   0x........         DC32     `?<Constant (tPORT){768L, 0L}>`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable101_32:
   \   00000000   0x........         DC32     `?<Constant (tPORT){256L, 0L}>_1`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable102:
   \   00000000   0x........         DC32     `?<Constant (tTMR_CH){4322, 13, 0}>`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable102_1:
   \   00000000   0x........         DC32     `?<Constant (tTMR_CH){4450, 13, 0}>`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable102_2:
   \   00000000   0x502D5014         DC32     0x502d5014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable102_3:
   \   00000000   0x542D5004         DC32     0x542d5004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable102_4:
   \   00000000   0x........         DC32     `?<Constant (tCMP){115, 17, 255, 0, 135}>`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable102_5:
   \   00000000   0x5D9B0018         DC32     0x5d9b0018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable102_6:
   \   00000000   0x........         DC32     u24_sample

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable102_7:
   \   00000000   0x40030044         DC32     0x40030044

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable102_8:
   \   00000000   0x........         DC32     ramcfg

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable102_9:
   \   00000000   0x........         DC32     swisrcnt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable102_10:
   \   00000000   0xE000E200         DC32     0xe000e200

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable102_11:
   \   00000000   0x........         DC32     mlib+0x5A8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable102_12:
   \   00000000   0x5695800C         DC32     0x5695800c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable102_13:
   \   00000000   0x5015800C         DC32     0x5015800c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable102_14:
   \   00000000   0x........         DC32     kwh_pulses+0x100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable102_15:
   \   00000000   0x40058000         DC32     0x40058000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable102_16:
   \   00000000   0x5185800E         DC32     0x5185800e

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable102_17:
   \   00000000   0x4805800E         DC32     0x4805800e

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable102_18:
   \   00000000   0x5695900C         DC32     0x5695900c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable102_19:
   \   00000000   0x5015900C         DC32     0x5015900c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable102_20:
   \   00000000   0x40059000         DC32     0x40059000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable102_21:
   \   00000000   0x5185900E         DC32     0x5185900e

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable102_22:
   \   00000000   0x4805900E         DC32     0x4805900e

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable103:
   \   00000000   0x........         DC32     mlib

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable103_1:
   \   00000000   0x........         DC32     ramcnt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable103_2:
   \   00000000   0x........         DC32     kwh_pulses

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable105:
   \   00000000   0xF8000041         DC32     0xf8000041

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable105_1:
   \   00000000   0x........         DC32     tamper_flags+0x80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable105_2:
   \   00000000   0x........         DC32     tamper_flags+0x78

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable105_3:
   \   00000000   0x........         DC32     wTime+0x38

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable105_4:
   \   00000000   0x........         DC32     wTime+0x30

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable105_5:
   \   00000000   0x........         DC32     wTime+0x28

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable105_6:
   \   00000000   0x........         DC32     wTime+0x20

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable105_7:
   \   00000000   0x........         DC32     wTime+0x18

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable105_8:
   \   00000000   0x........         DC32     ramcfg

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable105_9:
   \   00000000   0xF8000040         DC32     0xf8000040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable105_10:
   \   00000000   0x........         DC32     ramcfg+0x74

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable105_11:
   \   00000000   0x........         DC32     wTime+0x8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable105_12:
   \   00000000   0x40050032         DC32     0x40050032

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%02d%02d %04d">`:
   \   00000000   0x25 0x30          DC8 "%02d%02d %04d"
   \              0x32 0x64    
   \              0x25 0x30    
   \              0x32 0x64    
   \              0x20 0x25    
   \              0x30 0x34    
   \              0x64 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable106:
   \   00000000   0x........         DC32     tamper_flags

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable106_1:
   \   00000000   0x40043031         DC32     0x40043031

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable106_2:
   \   00000000   0x40057004         DC32     0x40057004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable106_3:
   \   00000000   0x0000F7FF         DC32     0xf7ff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable106_4:
   \   00000000   0x4405700E         DC32     0x4405700e

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable106_5:
   \   00000000   0x........         DC32     tamper_flags+0x10

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable106_6:
   \   00000000   0x41377000         DC32     0x41377000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable106_7:
   \   00000000   0x3FE00000         DC32     0x3fe00000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable106_8:
   \   00000000   0x........         DC32     tamper_flags+0x8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable106_9:
   \   00000000   0x40140000         DC32     0x40140000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable106_10:
   \   00000000   0x........         DC32     wTime+0x40

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable107:
   \   00000000   0x........         DC32     wTime

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable107_1:
   \   00000000   0x........         DC32     ramcnt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable107_2:
   \   00000000   0x400FF050         DC32     0x400ff050

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable107_3:
   \   00000000   0x40050012         DC32     0x40050012

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable108:
   \   00000000   0x........         DC32     `?<Constant " %02d %02d %02d">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable109:
   \   00000000   0x........         DC32     `?<Constant " %8.3f">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable109_1:
   \   00000000   0x40043031         DC32     0x40043031

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable110:
   \   00000000   0x........         DC32     wTime

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable111:
   \   00000000   0x408F4000         DC32     0x408f4000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable111_1:
   \   00000000   0x........         DC32     `?<Constant "%9.3f">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable111_2:
   \   00000000   0x40043031         DC32     0x40043031

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable112:
   \   00000000   0x........         DC32     wTime

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable112_1:
   \   00000000   0x40043031         DC32     0x40043031

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable112_2:
   \   00000000   0x........         DC32     ramcnt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable112_3:
   \   00000000   0x40F86A00         DC32     0x40f86a00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable112_4:
   \   00000000   0x........         DC32     `?<Constant "%09.3f">`

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "P1%7d">`:
   \   00000000   0x50 0x31          DC8 "P1%7d"
   \              0x25 0x37    
   \              0x64 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable115:
   \   00000000   0x........         DC32     wTime

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable115_1:
   \   00000000   0x........         DC32     `?<Constant " %8.3f">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable116:
   \   00000000   0x40043031         DC32     0x40043031

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "R2051-%03d">`:
   \   00000000   0x52 0x32          DC8 "R2051-%03d"
   \              0x30 0x35    
   \              0x31 0x2D    
   \              0x25 0x30    
   \              0x33 0x64    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant " C 5-120A">`:
   \   00000000   0x20 0x43          DC8 " C 5-120A"
   \              0x20 0x35    
   \              0x2D 0x31    
   \              0x32 0x30    
   \              0x41 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable124:
   \   00000000   0x4002B000         DC32     0x4002b000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable125:
   \   00000000   0x3D812906         DC32     0x3D812906,0x3F10852F
   \              0x3F10852F   

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable125_1:
   \   00000000   0x........         DC32     `?<Constant "bat %5.3f">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable125_2:
   \   00000000   0x5022B000         DC32     0x5022b000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable127:
   \   00000000   0x0000D8F2         DC32     0xd8f2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable127_1:
   \   00000000   0x........         DC32     ramcfg

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable127_2:
   \   00000000   0x........         DC32     pulses

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable127_3:
   \   00000000   0x........         DC32     `?<Constant "P2%7d">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable127_4:
   \   00000000   0x........         DC32     wTime

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable127_5:
   \   00000000   0x........         DC32     ramcnt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable127_6:
   \   00000000   0x05FA0004         DC32     0x5fa0004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable127_7:
   \   00000000   0xE000ED0C         DC32     0xe000ed0c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable127_8:
   \   00000000   0x........         DC32     mlib+0x598

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable127_9:
   \   00000000   0x40050012         DC32     0x40050012

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable127_10:
   \   00000000   0x........         DC32     mlib+0x5A0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable127_11:
   \   00000000   0x........         DC32     mlib+0x5E8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable127_12:
   \   00000000   0x00002B67         DC32     0x2b67

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable127_13:
   \   00000000   0x0000FFFF         DC32     0xffff

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant (tVREF){64, 193, 8}>`:
   \   00000000   0x40 0xC1          DC8 64, 193, 8, 0
   \              0x08 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant (tVREF_S){536870912L, 0}>`:
   \   00000000   0x20000000         DC32 536870912
   \   00000004   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant (tPORT){655619L, 4294967295L}>`:
   \   00000000   0x000A0103         DC32 655619, 4294967295
   \              0xFFFFFFFF   

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant (tPORT){655619L, 4294967295L}>_1`:
   \   00000000   0x000A0103         DC32 655619, 4294967295
   \              0xFFFFFFFF   

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant (tPORT){256L, 0L}>`:
   \   00000000   0x00000100         DC32 256, 0
   \              0x00000000   

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant (tPORT){512L, 0L}>`:
   \   00000000   0x00000200         DC32 512, 0
   \              0x00000000   

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant (tPORT){512L, 0L}>_1`:
   \   00000000   0x00000200         DC32 512, 0
   \              0x00000000   

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant (tUART){0, 20, 0, 44, 0, 0, 0, 0, 0`:
   \   00000000   0x00 0x14          DC8 0, 20, 0, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 10, 0, 0, 0, 0, 0
   \              0x00 0x2C    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x0A    
   \              0x0A 0x00    
   \              0x00 0x00    
   \              0x00 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant (tAFE_CH){2148036608L}>`:
   \   00000000   0x80087000         DC32 2148036608

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant (tAFE_CH){2148036608L}>_1`:
   \   00000000   0x80087000         DC32 2148036608

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant (tADC){143L, 11L, 0L, 0L, 2L, 0L}>`:
   \   00000000   0x0000008F         DC32 143, 11, 0, 0, 2, 0
   \              0x0000000B   
   \              0x00000000   
   \              0x00000000   
   \              0x00000002   
   \              0x00000000   
   \   00000018   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant (tADC_CH){3L}>`:
   \   00000000   0x00000003         DC32 3

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant (tADC_CH){31L}>`:
   \   00000000   0x0000001F         DC32 31

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant (tADC_CH){31L}>_1`:
   \   00000000   0x0000001F         DC32 31

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant (tADC_CH){31L}>_2`:
   \   00000000   0x0000001F         DC32 31

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant (tXBAR){0}>`:
   \   00000000   0x0000             DC16 0
   \   00000002   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant (tPORT){1024L, 0L}>`:
   \   00000000   0x00000400         DC32 1024, 0
   \              0x00000000   

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant (tPORT){768L, 0L}>`:
   \   00000000   0x00000300         DC32 768, 0
   \              0x00000000   

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant (tPORT){256L, 0L}>_1`:
   \   00000000   0x00000100         DC32 256, 0
   \              0x00000000   

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant (tTMR_CH){4322, 13, 0}>`:
   \   00000000   0x10E2 0x000D      DC16 4322, 13, 0
   \              0x0000       
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant (tTMR_CH){4450, 13, 0}>`:
   \   00000000   0x1162 0x000D      DC16 4450, 13, 0
   \              0x0000       
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant (tCMP){115, 17, 255, 0, 135}>`:
   \   00000000   0x73 0x11          DC8 115, 17, 255, 0, 135, 0, 0, 0
   \              0xFF 0x00    
   \              0x87 0x00    
   \              0x00 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant " %02d %02d %02d">`:
   \   00000000   0x20 0x25          DC8 " %02d %02d %02d"
   \              0x30 0x32    
   \              0x64 0x20    
   \              0x25 0x30    
   \              0x32 0x64    
   \              0x20 0x25    
   \              0x30 0x32    
   \              0x64 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant " %8.3f">`:
   \   00000000   0x20 0x25          DC8 " %8.3f"
   \              0x38 0x2E    
   \              0x33 0x66    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "%9.3f">`:
   \   00000000   0x25 0x39          DC8 "%9.3f"
   \              0x2E 0x33    
   \              0x66 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "%09.3f">`:
   \   00000000   0x25 0x30          DC8 "%09.3f"
   \              0x39 0x2E    
   \              0x33 0x66    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "bat %5.3f">`:
   \   00000000   0x62 0x61          DC8 "bat %5.3f"
   \              0x74 0x20    
   \              0x25 0x35    
   \              0x2E 0x33    
   \              0x66 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "P2%7d">`:
   \   00000000   0x50 0x32          DC8 "P2%7d"
   \              0x25 0x37    
   \              0x64 0x00    
   \   00000006   0x00 0x00          DC8 0, 0
    870          /******************************************************************************
    871           * End of module
    872           ******************************************************************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   FMSTR_TsaGetTable
       0   FMSTR_TsaGetTable_ctrl
       0   FMSTR_TsaGetTable_meas
       0   FMSTR_TsaGetTable_other
       0   FMSTR_TsaGetTable_param
       8   afech2_callback
         8   -> CONFIG_UpdateOffsets
         8   -> FMSTR_Poll
      24   auxcalc_callback
        24   -> FMSTR_Recorder
        24   -> FRACLIB_FFMUL32
        24   -> METERLIB1PH_CalcAuxiliary
        24   -> METERLIB1PH_CalcVarHours
        24   -> METERLIB1PH_CalcWattHours
        24   -> METERLIB1PH_RemoveDcBias
       0   button_callback
      48   display_callback
        48   -- Indirect call
        48   -> CONFIG_PreProcessing
        48   -> IRTC_GetClock
        48   -> METERLIB1PH_ReadResults
        48   -> __aeabi_dadd
        48   -> __aeabi_ddiv
        48   -> __aeabi_dmul
        48   -> __aeabi_ui2d
       8   fcmd_calibrate
         8   -> CONFIG_SaveFlash
       4   fcmd_clr_counter
       0   fcmd_clr_tampers
       0   fcmd_dummy_fcn
       8   fcmd_save_config
         8   -> CONFIG_SaveFlash
       8   fcmd_set_clock
         8   -> IRTC_SetClock
       0   fcmd_set_pulse1
       0   fcmd_set_pulse2
       0   fcmd_sw_reset
       0   hardfault_isr
      32   main
        32   -> CONFIG_CalcCalibData
        32   -> CONFIG_ReadFlash
        32   -> CONFIG_SaveFlash
        32   -> IRTC_Init
        32   -> IRTC_SetClock
        32   -> PMC_Init
        32   -> PORTA_Init
        32   -> __aeabi_memcpy
        32   -> norm_mode_hw_init
      16   menu_disp_class
        16   -> sprintf
        16   -> vfnLCD_Write_Str
      24   menu_disp_date
        24   -> sprintf
        24   -> vfnLCD_Write_Str
      16   menu_disp_freq
        16   -> sprintf
        16   -> vfnLCD_Write_Str
      16   menu_disp_irms
        16   -> sprintf
        16   -> vfnLCD_Write_Str
      16   menu_disp_kVA
        16   -> __aeabi_ddiv
        16   -> sprintf
        16   -> vfnLCD_Write_Str
      16   menu_disp_kVAR
        16   -> __aeabi_ddiv
        16   -> sprintf
        16   -> vfnLCD_Write_Str
      16   menu_disp_kVARh
        16   -> __aeabi_ddiv
        16   -> __aeabi_i2d
        16   -> sprintf
        16   -> vfnLCD_Write_Str
      16   menu_disp_kW
        16   -> __aeabi_ddiv
        16   -> sprintf
        16   -> vfnLCD_Write_Str
      16   menu_disp_kWh
        16   -> __aeabi_ddiv
        16   -> __aeabi_i2d
        16   -> sprintf
        16   -> vfnLCD_Write_Str
      16   menu_disp_pnum1
        16   -> sprintf
        16   -> vfnLCD_Write_Str
      16   menu_disp_pnum2
        16   -> sprintf
        16   -> vfnLCD_Write_Str
      16   menu_disp_snum
        16   -> sprintf
        16   -> vfnLCD_Write_Str
      24   menu_disp_time
        24   -> sprintf
        24   -> vfnLCD_Write_Str
      16   menu_disp_urms
        16   -> sprintf
        16   -> vfnLCD_Write_Str
      16   menu_disp_vbat
        16   -> __aeabi_dmul
        16   -> __aeabi_ui2d
        16   -> sprintf
        16   -> vfnLCD_Write_Str
      80   norm_mode_hw_init
        64   -> ADC_Init
        64   -> AFE_CH0_Init
        64   -> AFE_CH2_Init
        64   -> CMP1_Init
        64   -> CONFIG_CalcCalibData
        64   -> CONFIG_SaveFlash
        64   -> FMSTR_Init
        64   -> PLL_Init
        64   -> PORTD_Init
        64   -> PORTE_Init
        64   -> PORTF_Init
        64   -> PORTI_Init
        64   -> PORT_InstallCallback
        64   -> SWISR0_HandlerInit
        64   -> SWISR1_HandlerInit
        64   -> TMR_CH0_Init
        64   -> TMR_CH1_Init
        64   -> TMR_CH2_Init
        64   -> UART1_Init
        64   -> UART_InstallCallbackUART0_UART1
        64   -> VREF_Init
        64   -> XBAR_Init
        80   -> __aeabi_memcpy4
        64   -> vfnLCD_Init


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      16  ?<Constant " %02d %02d %02d">
       8  ?<Constant " %8.3f">
      12  ?<Constant " C 5-120A">
      16  ?<Constant "%02d%02d %04d">
       8  ?<Constant "%09.3f">
       8  ?<Constant "%9.3f">
      12  ?<Constant "CMP1_SCR">
       8  ?<Constant "P1%7d">
       8  ?<Constant "P2%7d">
      12  ?<Constant "R2051-%03d">
      12  ?<Constant "TMR0_CAPT">
      12  ?<Constant "TMR0_CNTR">
       2  ?<Constant "\340">
       2  ?<Constant "\341">
       2  ?<Constant "\342">
       2  ?<Constant "\360">
       2  ?<Constant "\361">
       2  ?<Constant "\366">
       2  ?<Constant "\373">
      12  ?<Constant "bat %5.3f">
       4  ?<Constant "day">
      12  ?<Constant "fcmd_idx">
       8  ?<Constant "freq">
       8  ?<Constant "hour">
      12  ?<Constant "i24_sample">
       8  ?<Constant "irms">
       4  ?<Constant "min">
      20  ?<Constant "mlib.iDcb[1].yIIR">
      20  ?<Constant "mlib.uDcb[1].yIIR">
       4  ?<Constant "mon">
      12  ?<Constant "password">
      12  ?<Constant "pulse_index">
       8  ?<Constant "rTime">
      16  ?<Constant "ramcfg.delay">
      12  ?<Constant "ramcfg.flag">
      16  ?<Constant "ramcfg.i_gain">
      16  ?<Constant "ramcfg.u_gain">
      16  ?<Constant "ramcfg.varh_idx">
      16  ?<Constant "ramcfg.wh_idx">
      16  ?<Constant "ramcnt.menu_idx">
      20  ?<Constant "ramcnt.pulse_out">
      16  ?<Constant "ramcnt.varh_cnt">
      16  ?<Constant "ramcnt.wh_cnt">
      16  ?<Constant "reset_source">
       4  ?<Constant "sec">
       8  ?<Constant "tTIME">
      16  ?<Constant "tamper_flags">
      12  ?<Constant "u24_sample">
       8  ?<Constant "urms">
       4  ?<Constant "va">
       4  ?<Constant "var">
       8  ?<Constant "varh">
       2  ?<Constant "w">
       8  ?<Constant "wTime">
       8  ?<Constant "wday">
       4  ?<Constant "wh">
       8  ?<Constant "year">
      28  ?<Constant (tADC){143L, 11L, 0L, 0L, 2L, 0L}>
       4  ?<Constant (tADC_CH){31L}>
       4  ?<Constant (tADC_CH){31L}>_1
       4  ?<Constant (tADC_CH){31L}>_2
       4  ?<Constant (tADC_CH){3L}>
       4  ?<Constant (tAFE_CH){2148036608L}>
       4  ?<Constant (tAFE_CH){2148036608L}>_1
       8  ?<Constant (tCMP){115, 17, 255, 0, 135}>
       8  ?<Constant (tIRTC){0, 0, 21248}>
       4  ?<Constant (tLVD){80, 64}>
       8  ?<Constant (tPLL){0, 128, 96, 72, 0, 0, 128}>
       8  ?<Constant (tPORT){0L, 0L}>
       8  ?<Constant (tPORT){1024L, 0L}>
       8  ?<Constant (tPORT){256L, 0L}>
       8  ?<Constant (tPORT){256L, 0L}>_1
       8  ?<Constant (tPORT){512L, 0L}>
       8  ?<Constant (tPORT){512L, 0L}>_1
       8  ?<Constant (tPORT){655619L, 4294967295L}>
       8  ?<Constant (tPORT){655619L, 4294967295L}>_1
       8  ?<Constant (tPORT){768L, 0L}>
       4  ?<Constant (tREG){17}>
       4  ?<Constant (tSMC){34}>
       4  ?<Constant (tTAMPER){0, 181}>
       4  ?<Constant (tTAMPER){0, 181}>_1
       4  ?<Constant (tTAMPER){0, 53}>
       8  ?<Constant (tTMR_CH){13312, 64, 2048}>
       8  ?<Constant (tTMR_CH){4322, 13, 0}>
       8  ?<Constant (tTMR_CH){4450, 13, 0}>
      20  ?<Constant (tUART){0, 20, 0, 44, 0, 0, 0, 0, 0
       4  ?<Constant (tVREF){64, 193, 8}>
       8  ?<Constant (tVREF_S){536870912L, 0}>
       4  ?<Constant (tXBAR){0}>
       4  ??DataTable100
       4  ??DataTable100_1
       4  ??DataTable100_2
       4  ??DataTable100_3
       4  ??DataTable100_4
       4  ??DataTable100_5
       4  ??DataTable100_6
       4  ??DataTable100_7
       4  ??DataTable101
       4  ??DataTable101_1
       4  ??DataTable101_10
       4  ??DataTable101_11
       4  ??DataTable101_12
       4  ??DataTable101_13
       4  ??DataTable101_14
       4  ??DataTable101_15
       4  ??DataTable101_16
       4  ??DataTable101_17
       4  ??DataTable101_18
       4  ??DataTable101_19
       4  ??DataTable101_2
       4  ??DataTable101_20
       4  ??DataTable101_21
       4  ??DataTable101_22
       4  ??DataTable101_23
       4  ??DataTable101_24
       4  ??DataTable101_25
       4  ??DataTable101_26
       4  ??DataTable101_27
       4  ??DataTable101_28
       4  ??DataTable101_29
       4  ??DataTable101_3
       4  ??DataTable101_30
       4  ??DataTable101_31
       4  ??DataTable101_32
       4  ??DataTable101_4
       4  ??DataTable101_5
       4  ??DataTable101_6
       4  ??DataTable101_7
       4  ??DataTable101_8
       4  ??DataTable101_9
       4  ??DataTable102
       4  ??DataTable102_1
       4  ??DataTable102_10
       4  ??DataTable102_11
       4  ??DataTable102_12
       4  ??DataTable102_13
       4  ??DataTable102_14
       4  ??DataTable102_15
       4  ??DataTable102_16
       4  ??DataTable102_17
       4  ??DataTable102_18
       4  ??DataTable102_19
       4  ??DataTable102_2
       4  ??DataTable102_20
       4  ??DataTable102_21
       4  ??DataTable102_22
       4  ??DataTable102_3
       4  ??DataTable102_4
       4  ??DataTable102_5
       4  ??DataTable102_6
       4  ??DataTable102_7
       4  ??DataTable102_8
       4  ??DataTable102_9
       4  ??DataTable103
       4  ??DataTable103_1
       4  ??DataTable103_2
       4  ??DataTable105
       4  ??DataTable105_1
       4  ??DataTable105_10
       4  ??DataTable105_11
       4  ??DataTable105_12
       4  ??DataTable105_2
       4  ??DataTable105_3
       4  ??DataTable105_4
       4  ??DataTable105_5
       4  ??DataTable105_6
       4  ??DataTable105_7
       4  ??DataTable105_8
       4  ??DataTable105_9
       4  ??DataTable106
       4  ??DataTable106_1
       4  ??DataTable106_10
       4  ??DataTable106_2
       4  ??DataTable106_3
       4  ??DataTable106_4
       4  ??DataTable106_5
       4  ??DataTable106_6
       4  ??DataTable106_7
       4  ??DataTable106_8
       4  ??DataTable106_9
       4  ??DataTable107
       4  ??DataTable107_1
       4  ??DataTable107_2
       4  ??DataTable107_3
       4  ??DataTable108
       4  ??DataTable109
       4  ??DataTable109_1
       4  ??DataTable110
       4  ??DataTable111
       4  ??DataTable111_1
       4  ??DataTable111_2
       4  ??DataTable112
       4  ??DataTable112_1
       4  ??DataTable112_2
       4  ??DataTable112_3
       4  ??DataTable112_4
       4  ??DataTable115
       4  ??DataTable115_1
       4  ??DataTable116
       4  ??DataTable124
       8  ??DataTable125
       4  ??DataTable125_1
       4  ??DataTable125_2
       4  ??DataTable127
       4  ??DataTable127_1
       4  ??DataTable127_10
       4  ??DataTable127_11
       4  ??DataTable127_12
       4  ??DataTable127_13
       4  ??DataTable127_2
       4  ??DataTable127_3
       4  ??DataTable127_4
       4  ??DataTable127_5
       4  ??DataTable127_6
       4  ??DataTable127_7
       4  ??DataTable127_8
       4  ??DataTable127_9
       4  ??DataTable99
       4  ??DataTable99_1
       4  ??DataTable99_10
       4  ??DataTable99_11
       4  ??DataTable99_12
       4  ??DataTable99_13
       4  ??DataTable99_14
       4  ??DataTable99_15
       4  ??DataTable99_16
       4  ??DataTable99_17
       4  ??DataTable99_18
       4  ??DataTable99_19
       4  ??DataTable99_2
       4  ??DataTable99_3
       4  ??DataTable99_4
       4  ??DataTable99_5
       4  ??DataTable99_6
       4  ??DataTable99_7
       4  ??DataTable99_8
       4  ??DataTable99_9
       6  ??Subroutine4_0
     192  ??Subroutine5_0
     200  ?Subroutine0
       8  ?Subroutine1
       8  ?Subroutine2
      10  ?Subroutine3
      82  FMSTR_TsaGetTable
      12  FMSTR_TsaGetTable_ctrl
      12  FMSTR_TsaGetTable_meas
      12  FMSTR_TsaGetTable_other
      12  FMSTR_TsaGetTable_param
      62  afech2_callback
     286  auxcalc_callback
     124  button_callback
     396  display_callback
      38  fcmd_calibrate
      30  fcmd_clr_counter
      54  fcmd_clr_tampers
       8  fcmd_dummy_fcn
      40  fcmd_save_config
      16  fcmd_set_clock
      22  fcmd_set_pulse1
      22  fcmd_set_pulse2
      14  fcmd_sw_reset
      96  fmstr_tsatable
     224  fmstr_tsatable
     224  fmstr_tsatable
     224  fmstr_tsatable
       8  hardfault_isr
     264  kwh_pulses
          kvarh_pulses
          cnt_1
          cnt_2
     228  main
      16  menu_disp_class
      20  menu_disp_date
     238  menu_disp_freq
     238  menu_disp_irms
     262  menu_disp_kVA
     254  menu_disp_kVAR
     238  menu_disp_kVARh
     260  menu_disp_kW
     230  menu_disp_kWh
      20  menu_disp_pnum1
      16  menu_disp_pnum2
      12  menu_disp_snum
      16  menu_disp_time
     268  menu_disp_urms
     272  menu_disp_vbat
    1560  mlib
     570  norm_mode_hw_init
      64  pulses
       2  reset_source
     136  tamper_flags
          i
          freq
          freqTMP
          menu_fcn
          fcmd_fcn
          umax
          imax
       8  u24_sample
          i24_sample
       8  varh
      92  wTime
          rTime
          fcmd_idx
          flg
          password
          pulse_index
          urms
          irms
          w
          var
          va
          freqAVG
          buf
       8  wh

 
    26 bytes in section .bss
 2 052 bytes in section .data
 1 472 bytes in section .rodata
 5 580 bytes in section .text
 
 5 580 bytes of CODE  memory
 1 472 bytes of CONST memory
 2 078 bytes of DATA  memory

Errors: none
Warnings: 1
