###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.1.6676/W32 for ARM        30/Jan/2016  15:22:31
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\src\freemaster\freemaster_tsa.c
#    Command line =  
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\src\freemaster\freemaster_tsa.c
#        -D NDEBUG -lCN
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\Release\List\
#        -o
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\Release\Obj\
#        --debug --endian=little --cpu=Cortex-M0+ --no_mem_idioms -e --fpu=None
#        --dlib_config "D:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\..\..\..\..\build\iar_6_50\fraclib\
#        -I
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\..\..\..\..\build\iar_6_50\meterlib\
#        -I
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\..\..\..\..\src\fraclib\
#        -I
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\..\..\..\..\src\meterlib\
#        -I
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\..\..\..\..\src\common\
#        -I
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\..\..\..\..\src\drivers\
#        -I
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\..\..\..\..\src\freemaster\
#        -I
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\..\..\..\..\src\projects\_twr_emeter_demo\
#        -Oh --require_prototypes
#    List file    =  
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\Release\List\freemaster_tsa.lst
#    Object file  =  
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\Release\Obj\freemaster_tsa.o
#
###############################################################################

E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\src\freemaster\freemaster_tsa.c
      1          /******************************************************************************
      2          *
      3          * Freescale Semiconductor Inc.
      4          * (c) Copyright 2004-2010 Freescale Semiconductor
      5          * ALL RIGHTS RESERVED.
      6          *
      7          ****************************************************************************//*!
      8          *
      9          * @file   freemaster_tsa.c
     10          *
     11          * @brief  FreeMASTER TSA implementation
     12          *
     13          * @version 1.0.1.0
     14          * 
     15          * @date May-4-2012
     16          * 
     17          *******************************************************************************
     18          *
     19          * This file implements a new FreeMASTER feature called Targer-side address
     20          * translation.
     21          * 
     22          *******************************************************************************/
     23          
     24          #include "freemaster.h"
     25          #include "freemaster_private.h"
     26          #include "freemaster_protocol.h"
     27          
     28          #if FMSTR_USE_TSA
     29          
     30          /**************************************************************************//*!
     31          *
     32          * @brief    TSA Initialization
     33          *
     34          ******************************************************************************/
     35          

   \                                 In section .text, align 2, keep-with-next
     36          void FMSTR_InitTsa(void)
     37          {   
     38          }
   \                     FMSTR_InitTsa: (+1)
   \   00000000   0x4770             BX       LR               ;; return
     39          
     40          /**************************************************************************//*!
     41          *
     42          * @brief    Handling GETTSAINFO and GETTSAINFO_EX command
     43          *
     44          * @param    pMessageIO - original command (in) and response buffer (out) 
     45          *
     46          * @return   As all command handlers, the return value should be the buffer 
     47          *           pointer where the response output finished (except checksum)
     48          *
     49          ******************************************************************************/
     50          

   \                                 In section .text, align 2, keep-with-next
     51          FMSTR_BPTR FMSTR_GetTsaInfo(FMSTR_BPTR pMessageIO)
     52          {
   \                     FMSTR_GetTsaInfo: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
     53              FMSTR_BPTR pResponse = pMessageIO;
   \   00000002   0x0004             MOVS     R4,R0
     54              const FMSTR_TSA_ENTRY* pTbl;
     55              FMSTR_TSA_TINDEX nTblIndex;
     56              FMSTR_TSA_TSIZE nTblSize = 0U;
   \   00000004   0x2500             MOVS     R5,#+0
   \   00000006   0x4669             MOV      R1,SP
   \   00000008   0x800D             STRH     R5,[R1, #+0]
     57              FMSTR_ADDR tmpAddr;
     58              FMSTR_U16 tmp16;
     59          
     60              /* get index of table the PC is requesting   */
     61              pMessageIO = FMSTR_SkipInBuffer(pMessageIO, 2U);
     62              pMessageIO = FMSTR_ValueFromBuffer16(&nTblIndex, pMessageIO);
   \   0000000A   0x1C81             ADDS     R1,R0,#+2
   \   0000000C   0xA800             ADD      R0,SP,#+0
   \   0000000E   0x1C80             ADDS     R0,R0,#+2
   \   00000010   0x.... 0x....      BL       FMSTR_ValueFromBuffer16
     63              
     64              /* TSA flags */
     65              tmp16 = FMSTR_TSA_VERSION | FMSTR_TSA_FLAGS;
     66          
     67              /* sizeof TSA table entry items */
     68              /*lint -e{506,774} constant value boolean */
     69              if((sizeof(FMSTR_TSA_ENTRY)/4U) == 4U)
     70              {
     71                  tmp16 |= FMSTR_TSA_INFO_32BIT;  /* 32bit TSA entries */
     72              }
     73              
     74              /* success, flags */
     75              pResponse = FMSTR_ConstToBuffer8(pResponse, FMSTR_STS_OK);
   \   00000014   0x7025             STRB     R5,[R4, #+0]
   \   00000016   0x1C60             ADDS     R0,R4,#+1
     76              pResponse = FMSTR_ValueToBuffer16(pResponse, tmp16);
   \   00000018   0x2181             MOVS     R1,#+129
   \   0000001A   0x0049             LSLS     R1,R1,#+1        ;; #+258
   \   0000001C   0x.... 0x....      BL       FMSTR_ValueToBuffer16
   \   00000020   0x0005             MOVS     R5,R0
     77          
     78              /* get the table (or NULL if no table on given index) */
     79              pTbl = FMSTR_TsaGetTable(nTblIndex, &nTblSize);
   \   00000022   0x4669             MOV      R1,SP
   \   00000024   0x4668             MOV      R0,SP
   \   00000026   0x8840             LDRH     R0,[R0, #+2]
   \   00000028   0x.... 0x....      BL       FMSTR_TsaGetTable
   \   0000002C   0x0004             MOVS     R4,R0
     80              FMSTR_PTR2ADDR(tmpAddr, pTbl);
     81          
     82              /* table size in bytes */
     83              nTblSize *= FMSTR_CFG_BUS_WIDTH;
     84              pResponse = FMSTR_ValueToBuffer16(pResponse, nTblSize);
   \   0000002E   0x4668             MOV      R0,SP
   \   00000030   0x8801             LDRH     R1,[R0, #+0]
   \   00000032   0x0028             MOVS     R0,R5
   \   00000034   0x.... 0x....      BL       FMSTR_ValueToBuffer16
     85              
     86              /* table address */
     87              return FMSTR_AddressToBuffer(pResponse, tmpAddr);
   \   00000038   0x0021             MOVS     R1,R4
   \   0000003A   0x.... 0x....      BL       FMSTR_AddressToBuffer
   \   0000003E   0xBD32             POP      {R1,R4,R5,PC}    ;; return
     88          }
     89          
     90          /**************************************************************************//*!
     91          *
     92          * @brief    Handling GETSTRLEN and GETSTRLEN_EX commands
     93          *
     94          * @param    pMessageIO - original command (in) and response buffer (out) 
     95          *
     96          * @return   As all command handlers, the return value should be the buffer 
     97          *           pointer where the response output finished (except checksum)
     98          *
     99          ******************************************************************************/
    100          

   \                                 In section .text, align 2, keep-with-next
    101          FMSTR_BPTR FMSTR_GetStringLen(FMSTR_BPTR pMessageIO)
    102          {
   \                     FMSTR_GetStringLen: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
    103              FMSTR_BPTR pResponse = pMessageIO;
   \   00000004   0x0004             MOVS     R4,R0
    104              FMSTR_ADDR nAddr;
    105              FMSTR_U16 nLen = 0U;
    106              
    107              pMessageIO = FMSTR_SkipInBuffer(pMessageIO, 1U);
    108              pMessageIO = FMSTR_AddressFromBuffer(&nAddr, pMessageIO);
   \   00000006   0x1C41             ADDS     R1,R0,#+1
   \   00000008   0x4668             MOV      R0,SP
   \   0000000A   0x.... 0x....      BL       FMSTR_AddressFromBuffer
    109          
    110              nLen = FMSTR_StrLen(nAddr);
   \   0000000E   0x9800             LDR      R0,[SP, #+0]
   \   00000010   0x.... 0x....      BL       FMSTR_StrLen
   \   00000014   0x0001             MOVS     R1,R0
    111          
    112              /* return strign size in bytes (even on 16bit DSP) */
    113              nLen *= FMSTR_CFG_BUS_WIDTH ;
    114                  
    115              pResponse = FMSTR_ConstToBuffer8(pResponse, FMSTR_STS_OK);
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x7020             STRB     R0,[R4, #+0]
   \   0000001A   0x1C60             ADDS     R0,R4,#+1
    116              return FMSTR_ValueToBuffer16(pResponse, nLen);
   \   0000001C   0x.... 0x....      BL       FMSTR_ValueToBuffer16
   \   00000020   0xBD16             POP      {R1,R2,R4,PC}    ;; return
    117          }
    118          
    119          /**************************************************************************//*!
    120          *
    121          * @brief    Helper (inline) function for TSA memory region check
    122          *
    123          * @param    nAddrUser - address of region to be checked
    124          * @param    nSizeUser - size of region to be checked
    125          * @param    nAddrSafe - address of known "safe" region
    126          * @param    wSizeSafe - size of safe region
    127          *
    128          * @return   This function returns non-zero if given user space is safe 
    129          *           (i.e. it lies in given safe space)
    130          *
    131          ******************************************************************************/
    132          
    133          #if defined(FMSTR_PLATFORM_56F8xxx) || defined(FMSTR_PLATFORM_56F8xx)
    134          /* make inline */
    135          inline FMSTR_BOOL FMSTR_CheckMemSpace(FMSTR_ADDR nAddrUser, FMSTR_SIZE8 nSizeUser, 
    136              FMSTR_ADDR nAddrSafe, FMSTR_SIZE wSizeSafe);
    137              
    138          inline
    139          #else
    140          /* declare function prototype */
    141          static FMSTR_BOOL FMSTR_CheckMemSpace(FMSTR_ADDR nAddrUser, FMSTR_SIZE8 nSizeUser, 
    142              FMSTR_ADDR nAddrSafe, FMSTR_SIZE wSizeSafe);
    143              
    144          static
    145          #endif
    146          
    147          FMSTR_BOOL FMSTR_CheckMemSpace(FMSTR_ADDR nAddrUser, FMSTR_SIZE8 nSizeUser, 
    148                                         FMSTR_ADDR nAddrSafe, FMSTR_SIZE wSizeSafe)
    149          {
    150              FMSTR_BOOL bRet = FMSTR_FALSE;
    151              
    152              #ifdef __HCS12X__
    153              /* convert from logical to global if needed */
    154              nAddrUser = FMSTR_FixHcs12xAddr(nAddrUser);
    155              nAddrSafe = FMSTR_FixHcs12xAddr(nAddrSafe);
    156              #endif
    157          
    158              if(nAddrUser >= nAddrSafe)
    159              {
    160                  bRet = (FMSTR_BOOL)
    161                      (((nAddrUser + nSizeUser) <= (nAddrSafe + wSizeSafe)) ? FMSTR_TRUE : FMSTR_FALSE);
    162              }
    163              
    164              return bRet;
    165          }
    166          
    167          /**************************************************************************//*!
    168          *
    169          * @brief    Check wether given memory region is "safe" (covered by TSA)
    170          *
    171          * @param    dwAddr - address of the memory to be checked
    172          * @param    nSize  - size of the memory to be checked
    173          * @param    bWriteAccess - write access is required
    174          *
    175          * @return   This function returns non-zero if user space is safe
    176          *
    177          ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    178          FMSTR_BOOL FMSTR_CheckTsaSpace(FMSTR_ADDR dwAddr, FMSTR_SIZE8 nSize, FMSTR_BOOL bWriteAccess)
    179          {
   \                     FMSTR_CheckTsaSpace: (+1)
   \   00000000   0xB5F7             PUSH     {R0-R2,R4-R7,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x2400             MOVS     R4,#+0
   \   00000006   0x4608             MOV      R0,R1
   \   00000008   0x9902             LDR      R1,[SP, #+8]
   \   0000000A   0x1808             ADDS     R0,R1,R0
   \   0000000C   0x9001             STR      R0,[SP, #+4]
   \   0000000E   0xE01B             B        ??FMSTR_CheckTsaSpace_0
    180              const FMSTR_TSA_ENTRY* pte;
    181              FMSTR_TSA_TINDEX nTableIndex;
    182              FMSTR_TSA_TSIZE i, cnt;
    183              FMSTR_SIZE nInfo;
    184          
    185          #if FMSTR_CFG_BUS_WIDTH >= 2U
    186              /* TSA tables use sizeof() operator which returns size in "bus-widths" (e.g. 56F8xx) */
    187              nSize = (nSize + 1) / FMSTR_CFG_BUS_WIDTH;
    188          #endif
    189              
    190              /* to be as fast as possible during normal opearaion, 
    191                 check variable entries in all tables first */
    192              for(nTableIndex=0U; (pte=FMSTR_TsaGetTable(nTableIndex, &cnt)) != NULL; nTableIndex++)
    193              {
    194                  /* number of items in a table */
    195                  cnt /= (FMSTR_TSA_TSIZE) sizeof(FMSTR_TSA_ENTRY);
    196          
    197                  /* all table entries */
    198                  for(i=0U; i<cnt; i++)
    199                  {
    200                      /*lint -e{506,774} condition always true/false */
    201                      if(sizeof(pte->addr.p) < sizeof(pte->addr.n))
    202                          nInfo = (FMSTR_SIZE)(unsigned long) pte->info.n;
    203                      else              
    204                          nInfo = (FMSTR_SIZE)(unsigned long) pte->info.p;
   \                     ??FMSTR_CheckTsaSpace_1: (+1)
   \   00000010   0x68E8             LDR      R0,[R5, #+12]
   \   00000012   0xB280             UXTH     R0,R0
    205                      
    206                      /* variable entry only (also check read-write flag) */
    207                      if((nInfo & FMSTR_TSA_INFO_VAR_FLAG) && (!bWriteAccess || (nInfo & FMSTR_TSA_INFO_RWV_FLAG)))
   \   00000014   0x07C1             LSLS     R1,R0,#+31
   \   00000016   0xD50F             BPL      ??FMSTR_CheckTsaSpace_2
   \   00000018   0x4669             MOV      R1,SP
   \   0000001A   0x7C09             LDRB     R1,[R1, #+16]
   \   0000001C   0x2900             CMP      R1,#+0
   \   0000001E   0xD001             BEQ      ??FMSTR_CheckTsaSpace_3
   \   00000020   0x0781             LSLS     R1,R0,#+30
   \   00000022   0xD509             BPL      ??FMSTR_CheckTsaSpace_2
    208                      {
    209                          /* need to take the larger of the two in union (will be optimized by compiler anyway) */
    210                          /*lint -e{506,774} condition always true/false */
    211                          if(sizeof(pte->addr.p) < sizeof(pte->addr.n))
    212                          {
    213                              if(FMSTR_CheckMemSpace(dwAddr, nSize, (FMSTR_ADDR) pte->addr.n, (FMSTR_SIZE) (nInfo >> 2)))
    214                              {
    215                                  return FMSTR_TRUE; /* access granted! */
    216                              }
    217                          }
    218                          else
    219                          {
    220                              /*lint -e{923} casting pointer to long (on some architectures) */
    221                              if(FMSTR_CheckMemSpace(dwAddr, nSize, (FMSTR_ADDR) pte->addr.p, (FMSTR_SIZE) (nInfo >> 2)))
   \                     ??FMSTR_CheckTsaSpace_3: (+1)
   \   00000024   0x68A9             LDR      R1,[R5, #+8]
   \   00000026   0x9A02             LDR      R2,[SP, #+8]
   \   00000028   0x428A             CMP      R2,R1
   \   0000002A   0xD305             BCC      ??FMSTR_CheckTsaSpace_2
   \   0000002C   0x0380             LSLS     R0,R0,#+14
   \   0000002E   0x0C00             LSRS     R0,R0,#+16
   \   00000030   0x1808             ADDS     R0,R1,R0
   \   00000032   0x9901             LDR      R1,[SP, #+4]
   \   00000034   0x4288             CMP      R0,R1
   \   00000036   0xD25D             BCS      ??FMSTR_CheckTsaSpace_4
    222                              {
    223                                  return FMSTR_TRUE; /* access granted! */
    224                              }
    225                          }
    226                      }
    227                      
    228                      pte++;
   \                     ??FMSTR_CheckTsaSpace_2: (+1)
   \   00000038   0x3510             ADDS     R5,R5,#+16
    229                  }
   \   0000003A   0x1C76             ADDS     R6,R6,#+1
   \                     ??FMSTR_CheckTsaSpace_5: (+1)
   \   0000003C   0x4668             MOV      R0,SP
   \   0000003E   0x8800             LDRH     R0,[R0, #+0]
   \   00000040   0xB2B6             UXTH     R6,R6
   \   00000042   0x4286             CMP      R6,R0
   \   00000044   0xD3E4             BCC      ??FMSTR_CheckTsaSpace_1
   \   00000046   0x1C64             ADDS     R4,R4,#+1
   \                     ??FMSTR_CheckTsaSpace_0: (+1)
   \   00000048   0x4669             MOV      R1,SP
   \   0000004A   0xB2A0             UXTH     R0,R4
   \   0000004C   0x.... 0x....      BL       FMSTR_TsaGetTable
   \   00000050   0x0005             MOVS     R5,R0
   \   00000052   0x4668             MOV      R0,SP
   \   00000054   0xD005             BEQ      ??FMSTR_CheckTsaSpace_6
   \   00000056   0x8800             LDRH     R0,[R0, #+0]
   \   00000058   0x0900             LSRS     R0,R0,#+4
   \   0000005A   0x4669             MOV      R1,SP
   \   0000005C   0x8008             STRH     R0,[R1, #+0]
   \   0000005E   0x2600             MOVS     R6,#+0
   \   00000060   0xE7EC             B        ??FMSTR_CheckTsaSpace_5
    230              }
    231          
    232              /* no more writeable memory chunks available */
    233              if(bWriteAccess)
   \                     ??FMSTR_CheckTsaSpace_6: (+1)
   \   00000062   0x7C00             LDRB     R0,[R0, #+16]
   \   00000064   0x2800             CMP      R0,#+0
   \   00000066   0xD147             BNE      ??FMSTR_CheckTsaSpace_7
    234              {
    235                  return FMSTR_FALSE;
    236              }
    237              
    238              /* allow reading of recorder buffer */
    239          #if FMSTR_USE_RECORDER
    240              if(FMSTR_IsInRecBuffer(dwAddr, nSize))
   \   00000068   0x4668             MOV      R0,SP
   \   0000006A   0x7B01             LDRB     R1,[R0, #+12]
   \   0000006C   0x9802             LDR      R0,[SP, #+8]
   \   0000006E   0x.... 0x....      BL       FMSTR_IsInRecBuffer
   \   00000072   0x2800             CMP      R0,#+0
   \   00000074   0xD13E             BNE      ??FMSTR_CheckTsaSpace_4
    241              {
    242                  return FMSTR_TRUE;
    243              }
    244          #endif
    245          
    246              /* allow reading of any C-constant string referenced in TSA tables */
    247              for(nTableIndex=0U; (pte=FMSTR_TsaGetTable(nTableIndex, &cnt)) != NULL; nTableIndex++)
   \   00000076   0x2400             MOVS     R4,#+0
   \   00000078   0x4668             MOV      R0,SP
   \   0000007A   0x7B00             LDRB     R0,[R0, #+12]
   \   0000007C   0x9902             LDR      R1,[SP, #+8]
   \   0000007E   0x1808             ADDS     R0,R1,R0
   \   00000080   0x9001             STR      R0,[SP, #+4]
   \   00000082   0xE000             B        ??FMSTR_CheckTsaSpace_8
   \                     ??FMSTR_CheckTsaSpace_9: (+1)
   \   00000084   0x1C64             ADDS     R4,R4,#+1
   \                     ??FMSTR_CheckTsaSpace_8: (+1)
   \   00000086   0x4669             MOV      R1,SP
   \   00000088   0xB2A0             UXTH     R0,R4
   \   0000008A   0x.... 0x....      BL       FMSTR_TsaGetTable
   \   0000008E   0x0005             MOVS     R5,R0
   \   00000090   0xD032             BEQ      ??FMSTR_CheckTsaSpace_7
    248              {
    249                  FMSTR_ADDR tmpAddr;
    250                  
    251                  /* allow reading of the TSA table itself */
    252                  FMSTR_PTR2ADDR(tmpAddr, pte);
    253                  if(FMSTR_CheckMemSpace(dwAddr, nSize, tmpAddr, cnt))
   \   00000092   0x9802             LDR      R0,[SP, #+8]
   \   00000094   0x42A8             CMP      R0,R5
   \   00000096   0xD305             BCC      ??FMSTR_CheckTsaSpace_10
   \   00000098   0x4668             MOV      R0,SP
   \   0000009A   0x8800             LDRH     R0,[R0, #+0]
   \   0000009C   0x1828             ADDS     R0,R5,R0
   \   0000009E   0x9901             LDR      R1,[SP, #+4]
   \   000000A0   0x4288             CMP      R0,R1
   \   000000A2   0xD227             BCS      ??FMSTR_CheckTsaSpace_4
    254                  {
    255                      return FMSTR_TRUE;
    256                  }
    257                  
    258                  /* number of items in a table */
    259                  cnt /= (FMSTR_TSA_TSIZE) sizeof(FMSTR_TSA_ENTRY);
   \                     ??FMSTR_CheckTsaSpace_10: (+1)
   \   000000A4   0x4668             MOV      R0,SP
   \   000000A6   0x8800             LDRH     R0,[R0, #+0]
   \   000000A8   0x0900             LSRS     R0,R0,#+4
   \   000000AA   0x4669             MOV      R1,SP
   \   000000AC   0x8008             STRH     R0,[R1, #+0]
    260          
    261                  /* all table entries */
    262                  for(i=0U; i<cnt; i++)
   \   000000AE   0x2600             MOVS     R6,#+0
   \   000000B0   0xE001             B        ??FMSTR_CheckTsaSpace_11
    263                  {
    264                      /* system strings are always accessible at C-pointers */
    265                      FMSTR_PTR2ADDR(tmpAddr, pte->name.p);
    266                      if(pte->name.p)
    267                      {
    268                          if(FMSTR_CheckMemSpace(dwAddr, nSize, tmpAddr, FMSTR_StrLen(tmpAddr)))
    269                          {
    270                              return FMSTR_TRUE;
    271                          }
    272                      }
    273                      
    274                      FMSTR_PTR2ADDR(tmpAddr, pte->type.p);
    275                      if(pte->type.p)
    276                      {
    277                          if(FMSTR_CheckMemSpace(dwAddr, nSize, tmpAddr, FMSTR_StrLen(tmpAddr)))
    278                          {
    279                              return FMSTR_TRUE;
    280                          }
    281                      }
    282                      
    283                      pte++;
   \                     ??FMSTR_CheckTsaSpace_12: (+1)
   \   000000B2   0x3510             ADDS     R5,R5,#+16
   \   000000B4   0x1C76             ADDS     R6,R6,#+1
   \                     ??FMSTR_CheckTsaSpace_11: (+1)
   \   000000B6   0x4668             MOV      R0,SP
   \   000000B8   0x8800             LDRH     R0,[R0, #+0]
   \   000000BA   0xB2B6             UXTH     R6,R6
   \   000000BC   0x4286             CMP      R6,R0
   \   000000BE   0xD2E1             BCS      ??FMSTR_CheckTsaSpace_9
   \   000000C0   0x682F             LDR      R7,[R5, #+0]
   \   000000C2   0x2F00             CMP      R7,#+0
   \   000000C4   0xD009             BEQ      ??FMSTR_CheckTsaSpace_13
   \   000000C6   0x0038             MOVS     R0,R7
   \   000000C8   0x.... 0x....      BL       FMSTR_StrLen
   \   000000CC   0x9902             LDR      R1,[SP, #+8]
   \   000000CE   0x42B9             CMP      R1,R7
   \   000000D0   0xD303             BCC      ??FMSTR_CheckTsaSpace_13
   \   000000D2   0x1838             ADDS     R0,R7,R0
   \   000000D4   0x9901             LDR      R1,[SP, #+4]
   \   000000D6   0x4288             CMP      R0,R1
   \   000000D8   0xD20C             BCS      ??FMSTR_CheckTsaSpace_4
   \                     ??FMSTR_CheckTsaSpace_13: (+1)
   \   000000DA   0x686F             LDR      R7,[R5, #+4]
   \   000000DC   0x2F00             CMP      R7,#+0
   \   000000DE   0xD0E8             BEQ      ??FMSTR_CheckTsaSpace_12
   \   000000E0   0x0038             MOVS     R0,R7
   \   000000E2   0x.... 0x....      BL       FMSTR_StrLen
   \   000000E6   0x9902             LDR      R1,[SP, #+8]
   \   000000E8   0x42B9             CMP      R1,R7
   \   000000EA   0xD3E2             BCC      ??FMSTR_CheckTsaSpace_12
   \   000000EC   0x1838             ADDS     R0,R7,R0
   \   000000EE   0x9901             LDR      R1,[SP, #+4]
   \   000000F0   0x4288             CMP      R0,R1
   \   000000F2   0xD3DE             BCC      ??FMSTR_CheckTsaSpace_12
   \                     ??FMSTR_CheckTsaSpace_4: (+1)
   \   000000F4   0x2001             MOVS     R0,#+1
   \   000000F6   0xE000             B        ??FMSTR_CheckTsaSpace_14
    284                  }
    285              }
    286          
    287              /* no valid TSA entry found => not-safe to access the memory */
    288              return FMSTR_FALSE;
   \                     ??FMSTR_CheckTsaSpace_7: (+1)
   \   000000F8   0x2000             MOVS     R0,#+0
   \                     ??FMSTR_CheckTsaSpace_14: (+1)
   \   000000FA   0xB005             ADD      SP,SP,#+20
   \   000000FC   0xBDF0             POP      {R4-R7,PC}       ;; return
    289          } 
    290          
    291          #else /* FMSTR_USE_TSA */
    292          
    293          /*lint -efile(766, freemaster_protocol.h) include file is not used in this case */
    294          
    295          #endif /* FMSTR_USE_TSA */
    296          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      40   FMSTR_CheckTsaSpace
        40   -> FMSTR_IsInRecBuffer
        40   -> FMSTR_StrLen
        40   -> FMSTR_TsaGetTable
      16   FMSTR_GetStringLen
        16   -> FMSTR_AddressFromBuffer
        16   -> FMSTR_StrLen
        16   -> FMSTR_ValueToBuffer16
      16   FMSTR_GetTsaInfo
        16   -> FMSTR_AddressToBuffer
        16   -> FMSTR_TsaGetTable
        16   -> FMSTR_ValueFromBuffer16
        16   -> FMSTR_ValueToBuffer16
       0   FMSTR_InitTsa


   Section sizes:

   Bytes  Function/Label
   -----  --------------
     254  FMSTR_CheckTsaSpace
      34  FMSTR_GetStringLen
      64  FMSTR_GetTsaInfo
       2  FMSTR_InitTsa

 
 354 bytes in section .text
 
 354 bytes of CODE memory

Errors: none
Warnings: none
