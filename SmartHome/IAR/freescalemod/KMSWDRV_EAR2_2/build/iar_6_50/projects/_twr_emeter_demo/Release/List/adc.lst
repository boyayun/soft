###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.1.6676/W32 for ARM        30/Jan/2016  15:22:27
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\src\drivers\adc\adc.c
#    Command line =  
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\src\drivers\adc\adc.c
#        -D NDEBUG -lCN
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\Release\List\
#        -o
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\Release\Obj\
#        --debug --endian=little --cpu=Cortex-M0+ --no_mem_idioms -e --fpu=None
#        --dlib_config "D:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\..\..\..\..\build\iar_6_50\fraclib\
#        -I
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\..\..\..\..\build\iar_6_50\meterlib\
#        -I
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\..\..\..\..\src\fraclib\
#        -I
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\..\..\..\..\src\meterlib\
#        -I
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\..\..\..\..\src\common\
#        -I
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\..\..\..\..\src\drivers\
#        -I
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\..\..\..\..\src\freemaster\
#        -I
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\..\..\..\..\src\projects\_twr_emeter_demo\
#        -Oh --require_prototypes
#    List file    =  
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\Release\List\adc.lst
#    Object file  =  
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\Release\Obj\adc.o
#
###############################################################################

E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\src\drivers\adc\adc.c
      1          /*****************************************************************************
      2           * (c) Copyright 2010-2013, Freescale Semiconductor Inc.
      3           * ALL RIGHTS RESERVED.
      4           ***************************************************************************//*!
      5           * @file      adc.c
      6           * @version   1.0.3.0
      7           * @date      May-14-2012
      8           * @brief     Analog-to-Digital Converter (ADC) driver source code.
      9           ******************************************************************************/
     10          #include "common.h"
     11          #include "adc.h"
     12          
     13          /******************************************************************************
     14           * data type definitions                                                      *
     15           ******************************************************************************/

   \                                 In section .bss, align 4
     16          static ADC_CALLBACK pCallbackADC=NULL;
   \                     pCallbackADC:
   \   00000000                      DS8 4
     17          
     18          /******************************************************************************
     19           * interrupt function prototypes                                              *
     20           ******************************************************************************/
     21          void adc_isr (void);
     22          
     23          /******************************************************************************
     24           * Public function definitions                                                *
     25           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     26          void ADC_Init  (tADC adc, uint8 avg, tADC_CH CHA, tADC_CH CHB, tADC_CH CHC, 
     27                          tADC_CH CHD, uint8 ip, ADC_CALLBACK pCallback)
     28          {
   \                     ADC_Init: (+1)
   \   00000000   0xB40F             PUSH     {R0-R3}
   \   00000002   0xB4F8             PUSH     {R3-R7}
   \   00000004   0x980D             LDR      R0,[SP, #+52]
   \   00000006   0x990E             LDR      R1,[SP, #+56]
   \   00000008   0x9A0F             LDR      R2,[SP, #+60]
   \   0000000A   0x9B10             LDR      R3,[SP, #+64]
   \   0000000C   0x9C12             LDR      R4,[SP, #+72]
     29            if (pCallback != NULL) { pCallbackADC = pCallback; NVIC_SetIsr(INT_ADC,ip);}
   \   0000000E   0x0025             MOVS     R5,R4
   \   00000010   0xD011             BEQ      ??ADC_Init_0
   \   00000012   0x....             LDR      R5,??DataTable3
   \   00000014   0x602C             STR      R4,[R5, #+0]
   \   00000016   0x2480             MOVS     R4,#+128
   \   00000018   0x0264             LSLS     R4,R4,#+9        ;; #+65536
   \   0000001A   0x....             LDR      R5,??DataTable3_1  ;; 0xe000e280
   \   0000001C   0x682E             LDR      R6,[R5, #+0]
   \   0000001E   0x4326             ORRS     R6,R6,R4
   \   00000020   0x602E             STR      R6,[R5, #+0]
   \   00000022   0x....             LDR      R5,??DataTable3_2  ;; 0xe000e100
   \   00000024   0x682E             LDR      R6,[R5, #+0]
   \   00000026   0x4334             ORRS     R4,R4,R6
   \   00000028   0x602C             STR      R4,[R5, #+0]
   \   0000002A   0x....             LDR      R4,??DataTable3_3  ;; 0xe000e410
   \   0000002C   0x6825             LDR      R5,[R4, #+0]
   \   0000002E   0x9E11             LDR      R6,[SP, #+68]
   \   00000030   0x01B6             LSLS     R6,R6,#+6
   \   00000032   0x432E             ORRS     R6,R6,R5
   \   00000034   0x6026             STR      R6,[R4, #+0]
     30            ADC_CFG2 = adc.CFG2;
   \                     ??ADC_Init_0: (+1)
   \   00000036   0x....             LDR      R4,??DataTable3_4  ;; 0x4002b000
   \   00000038   0x9D06             LDR      R5,[SP, #+24]
   \   0000003A   0x6165             STR      R5,[R4, #+20]
     31            ADC_CFG1 = adc.CFG1;
   \   0000003C   0x9D05             LDR      R5,[SP, #+20]
   \   0000003E   0x6125             STR      R5,[R4, #+16]
     32            ADC_CV1  = adc.CV1;
   \   00000040   0x9D07             LDR      R5,[SP, #+28]
   \   00000042   0x62A5             STR      R5,[R4, #+40]
     33            ADC_CV2  = adc.CV2;
   \   00000044   0x9D08             LDR      R5,[SP, #+32]
   \   00000046   0x62E5             STR      R5,[R4, #+44]
     34            ADC_SC2  = adc.SC2;
   \   00000048   0x9D09             LDR      R5,[SP, #+36]
   \   0000004A   0x6325             STR      R5,[R4, #+48]
   \   0000004C   0x9E0C             LDR      R6,[SP, #+48]
     35            if (avg != HWAVG_OFF) { adc.SC3 |= (ADC_SC3_AVGE_MASK | ADC_SC3_AVGS(avg)); }
   \   0000004E   0x2EFF             CMP      R6,#+255
   \   00000050   0xD006             BEQ      ??ADC_Init_1
   \   00000052   0x9D0A             LDR      R5,[SP, #+40]
   \   00000054   0x07B7             LSLS     R7,R6,#+30
   \   00000056   0x0FBF             LSRS     R7,R7,#+30
   \   00000058   0x2604             MOVS     R6,#+4
   \   0000005A   0x433E             ORRS     R6,R6,R7
   \   0000005C   0x432E             ORRS     R6,R6,R5
   \   0000005E   0x960A             STR      R6,[SP, #+40]
     36            ADC_SC3  = adc.SC3;
   \                     ??ADC_Init_1: (+1)
   \   00000060   0x9D0A             LDR      R5,[SP, #+40]
   \   00000062   0x6365             STR      R5,[R4, #+52]
     37            ADC_SC1B = CHB.SC1;  
   \   00000064   0x6061             STR      R1,[R4, #+4]
     38            ADC_SC1C = CHC.SC1;
   \   00000066   0x60A2             STR      R2,[R4, #+8]
     39            ADC_SC1D = CHD.SC1;
   \   00000068   0x60E3             STR      R3,[R4, #+12]
     40            ADC_SC1A = CHA.SC1; 
   \   0000006A   0x6020             STR      R0,[R4, #+0]
     41          }
   \   0000006C   0xBCF1             POP      {R0,R4-R7}
   \   0000006E   0xB004             ADD      SP,SP,#+16
   \   00000070   0x4770             BX       LR               ;; return
     42          
     43          #define TWO_POWER_N_SAMPLES  6  /* select carefully - COP Timer not updated */

   \                                 In section .text, align 2, keep-with-next
     44          int ADC_ExecCalib (tADC adc, tADC_CALIB *pCALIB)
     45          {
   \                     ADC_ExecCalib: (+1)
   \   00000000   0xB40F             PUSH     {R0-R3}
   \   00000002   0xB4F0             PUSH     {R4-R7}
   \   00000004   0xB087             SUB      SP,SP,#+28
     46            long tmp=0;
   \   00000006   0x2200             MOVS     R2,#+0
   \   00000008   0x2100             MOVS     R1,#+0
     47            unsigned long tmp32[7]={0,0,0,0,0,0,0}; 
   \   0000000A   0x9205             STR      R2,[SP, #+20]
   \   0000000C   0x9204             STR      R2,[SP, #+16]
   \   0000000E   0x9203             STR      R2,[SP, #+12]
   \   00000010   0x9202             STR      R2,[SP, #+8]
   \   00000012   0x9201             STR      R2,[SP, #+4]
   \   00000014   0x9200             STR      R2,[SP, #+0]
   \   00000016   0x2300             MOVS     R3,#+0
     48            register uint16 i=0, numLoops = ((uint16)1<<TWO_POWER_N_SAMPLES);
     49            
     50            ADC_CFG1 = adc.CFG1;
   \   00000018   0x....             LDR      R0,??DataTable3_4  ;; 0x4002b000
   \   0000001A   0x9C0B             LDR      R4,[SP, #+44]
   \   0000001C   0x6104             STR      R4,[R0, #+16]
     51            ADC_CFG2 = adc.CFG2;
   \   0000001E   0x9C0C             LDR      R4,[SP, #+48]
   \   00000020   0x6144             STR      R4,[R0, #+20]
     52            ADC_SC2  = (adc.SC2 & (~ADC_SC2_ADTRG_MASK));
   \   00000022   0x9C0F             LDR      R4,[SP, #+60]
   \   00000024   0x2540             MOVS     R5,#+64
   \   00000026   0x43AC             BICS     R4,R4,R5
   \   00000028   0x6304             STR      R4,[R0, #+48]
   \   0000002A   0x2440             MOVS     R4,#+64
     53            
     54            /* calibration loop                                                       */
     55            while ((i++) < numLoops)
     56            { 
     57              /* The input channel, conversion mode continuous function, compare      */
     58              /* function, resolution mode, and differential/single-ended mode are    */
     59              /* all ignored during the calibration function.                         */
     60              ADC_SC1A = 0x1f;
   \                     ??ADC_ExecCalib_0: (+1)
   \   0000002C   0x261F             MOVS     R6,#+31
   \   0000002E   0x6006             STR      R6,[R0, #+0]
     61              ADC_SC3  = (adc.SC3 & (~ADC_SC3_CAL_MASK) & ADC_SC3_AVGE_MASK & ADC_SC3_AVGS(3));
   \   00000030   0x6342             STR      R2,[R0, #+52]
     62              ADC_SC3 |= ADC_SC3_CAL_MASK;
   \   00000032   0x6B46             LDR      R6,[R0, #+52]
   \   00000034   0x2780             MOVS     R7,#+128
   \   00000036   0x4337             ORRS     R7,R7,R6
   \   00000038   0x6347             STR      R7,[R0, #+52]
   \   0000003A   0x1E6D             SUBS     R5,R5,#+1
     63              while (!ADC_Ready (CHA));
   \                     ??ADC_ExecCalib_1: (+1)
   \   0000003C   0x6806             LDR      R6,[R0, #+0]
   \   0000003E   0x0636             LSLS     R6,R6,#+24
   \   00000040   0xD5FC             BPL      ??ADC_ExecCalib_1
     64              if (ADC_SC3 & ADC_SC3_CALF_MASK) { ADC_SC3 |= ADC_SC3_CALF_MASK; return 1; }
   \   00000042   0x6B46             LDR      R6,[R0, #+52]
   \   00000044   0x4026             ANDS     R6,R6,R4
   \   00000046   0xD004             BEQ      ??ADC_ExecCalib_2
   \   00000048   0x6B41             LDR      R1,[R0, #+52]
   \   0000004A   0x430C             ORRS     R4,R4,R1
   \   0000004C   0x6344             STR      R4,[R0, #+52]
   \   0000004E   0x2001             MOVS     R0,#+1
   \   00000050   0xE056             B        ??ADC_ExecCalib_3
     65              
     66              tmp+= (short int)ADC_OFS;
   \                     ??ADC_ExecCalib_2: (+1)
   \   00000052   0x6B86             LDR      R6,[R0, #+56]
   \   00000054   0xB236             SXTH     R6,R6
   \   00000056   0x1989             ADDS     R1,R1,R6
     67              
     68              tmp32[0]+=(unsigned long)ADC_CLP0;
   \   00000058   0x9E05             LDR      R6,[SP, #+20]
   \   0000005A   0x6DC7             LDR      R7,[R0, #+92]
   \   0000005C   0x19F6             ADDS     R6,R6,R7
   \   0000005E   0x9605             STR      R6,[SP, #+20]
     69              tmp32[1]+=(unsigned long)ADC_CLP1;
   \   00000060   0x9E04             LDR      R6,[SP, #+16]
   \   00000062   0x6D87             LDR      R7,[R0, #+88]
   \   00000064   0x19F6             ADDS     R6,R6,R7
   \   00000066   0x9604             STR      R6,[SP, #+16]
     70              tmp32[2]+=(unsigned long)ADC_CLP2;
   \   00000068   0x9E03             LDR      R6,[SP, #+12]
   \   0000006A   0x6D47             LDR      R7,[R0, #+84]
   \   0000006C   0x19F6             ADDS     R6,R6,R7
   \   0000006E   0x9603             STR      R6,[SP, #+12]
     71              tmp32[3]+=(unsigned long)ADC_CLP3;
   \   00000070   0x9E02             LDR      R6,[SP, #+8]
   \   00000072   0x6D07             LDR      R7,[R0, #+80]
   \   00000074   0x19F6             ADDS     R6,R6,R7
   \   00000076   0x9602             STR      R6,[SP, #+8]
     72              tmp32[4]+=(unsigned long)ADC_CLP4;
   \   00000078   0x9E01             LDR      R6,[SP, #+4]
   \   0000007A   0x6CC7             LDR      R7,[R0, #+76]
   \   0000007C   0x19F6             ADDS     R6,R6,R7
   \   0000007E   0x9601             STR      R6,[SP, #+4]
     73              tmp32[5]+=(unsigned long)ADC_CLPS;
   \   00000080   0x9E00             LDR      R6,[SP, #+0]
   \   00000082   0x6C87             LDR      R7,[R0, #+72]
   \   00000084   0x19F6             ADDS     R6,R6,R7
   \   00000086   0x9600             STR      R6,[SP, #+0]
     74              tmp32[6]+=(unsigned long)ADC_CLPD;
   \   00000088   0x6C46             LDR      R6,[R0, #+68]
   \   0000008A   0x199B             ADDS     R3,R3,R6
     75            }
   \   0000008C   0x2D00             CMP      R5,#+0
   \   0000008E   0xD1CD             BNE      ??ADC_ExecCalib_0
   \   00000090   0x9A12             LDR      R2,[SP, #+72]
     76            pCALIB->OFS  = tmp >> TWO_POWER_N_SAMPLES;
   \   00000092   0x1189             ASRS     R1,R1,#+6
   \   00000094   0x6011             STR      R1,[R2, #+0]
     77            
     78            pCALIB->CLP[0] = tmp32[0] >> TWO_POWER_N_SAMPLES;  
   \   00000096   0x9905             LDR      R1,[SP, #+20]
   \   00000098   0x0989             LSRS     R1,R1,#+6
   \   0000009A   0x6151             STR      R1,[R2, #+20]
     79            pCALIB->CLP[1] = tmp32[1] >> TWO_POWER_N_SAMPLES;  
   \   0000009C   0x9904             LDR      R1,[SP, #+16]
   \   0000009E   0x0989             LSRS     R1,R1,#+6
   \   000000A0   0x6191             STR      R1,[R2, #+24]
     80            pCALIB->CLP[2] = tmp32[2] >> TWO_POWER_N_SAMPLES;  
   \   000000A2   0x9903             LDR      R1,[SP, #+12]
   \   000000A4   0x0989             LSRS     R1,R1,#+6
   \   000000A6   0x61D1             STR      R1,[R2, #+28]
     81            pCALIB->CLP[3] = tmp32[3] >> TWO_POWER_N_SAMPLES;  
   \   000000A8   0x9902             LDR      R1,[SP, #+8]
   \   000000AA   0x0989             LSRS     R1,R1,#+6
   \   000000AC   0x6211             STR      R1,[R2, #+32]
     82            pCALIB->CLP[4] = tmp32[4] >> TWO_POWER_N_SAMPLES;  
   \   000000AE   0x9901             LDR      R1,[SP, #+4]
   \   000000B0   0x0989             LSRS     R1,R1,#+6
   \   000000B2   0x6251             STR      R1,[R2, #+36]
     83            pCALIB->CLPS   = tmp32[5] >> TWO_POWER_N_SAMPLES;  
   \   000000B4   0x9900             LDR      R1,[SP, #+0]
   \   000000B6   0x0989             LSRS     R1,R1,#+6
   \   000000B8   0x6111             STR      R1,[R2, #+16]
     84            pCALIB->CLPD   = tmp32[6] >> TWO_POWER_N_SAMPLES;    
   \   000000BA   0x099B             LSRS     R3,R3,#+6
   \   000000BC   0x60D3             STR      R3,[R2, #+12]
     85            
     86            tmp = tmp32[0]+tmp32[1]+tmp32[2]+tmp32[3]+tmp32[4]+tmp32[5];
     87            pCALIB->PG  = ((tmp>>(1+TWO_POWER_N_SAMPLES))|0x8000);
   \   000000BE   0x9C05             LDR      R4,[SP, #+20]
   \   000000C0   0x9D04             LDR      R5,[SP, #+16]
   \   000000C2   0x1964             ADDS     R4,R4,R5
   \   000000C4   0x9D03             LDR      R5,[SP, #+12]
   \   000000C6   0x1964             ADDS     R4,R4,R5
   \   000000C8   0x9D02             LDR      R5,[SP, #+8]
   \   000000CA   0x1964             ADDS     R4,R4,R5
   \   000000CC   0x9D01             LDR      R5,[SP, #+4]
   \   000000CE   0x1964             ADDS     R4,R4,R5
   \   000000D0   0x9D00             LDR      R5,[SP, #+0]
   \   000000D2   0x1964             ADDS     R4,R4,R5
   \   000000D4   0x11E4             ASRS     R4,R4,#+7
   \   000000D6   0x2580             MOVS     R5,#+128
   \   000000D8   0x022D             LSLS     R5,R5,#+8        ;; #+32768
   \   000000DA   0x4325             ORRS     R5,R5,R4
   \   000000DC   0x6055             STR      R5,[R2, #+4]
     88              
     89            ADC_SaveCalib (pCALIB);       /* update calibration registers         */
   \   000000DE   0x6954             LDR      R4,[R2, #+20]
   \   000000E0   0x65C4             STR      R4,[R0, #+92]
   \   000000E2   0x6994             LDR      R4,[R2, #+24]
   \   000000E4   0x6584             STR      R4,[R0, #+88]
   \   000000E6   0x69D4             LDR      R4,[R2, #+28]
   \   000000E8   0x6544             STR      R4,[R0, #+84]
   \   000000EA   0x6A14             LDR      R4,[R2, #+32]
   \   000000EC   0x6504             STR      R4,[R0, #+80]
   \   000000EE   0x6A54             LDR      R4,[R2, #+36]
   \   000000F0   0x64C4             STR      R4,[R0, #+76]
   \   000000F2   0x6481             STR      R1,[R0, #+72]
   \   000000F4   0x6443             STR      R3,[R0, #+68]
   \   000000F6   0x6851             LDR      R1,[R2, #+4]
   \   000000F8   0x63C1             STR      R1,[R0, #+60]
   \   000000FA   0x6811             LDR      R1,[R2, #+0]
   \   000000FC   0x6381             STR      R1,[R0, #+56]
     90          
     91            return 0; 
   \   000000FE   0x2000             MOVS     R0,#+0
   \                     ??ADC_ExecCalib_3: (+1)
   \   00000100   0xB007             ADD      SP,SP,#+28
   \   00000102   0xBCF0             POP      {R4-R7}
   \   00000104   0xB004             ADD      SP,SP,#+16
   \   00000106   0x4770             BX       LR               ;; return
     92          }
     93          

   \                                 In section .text, align 2, keep-with-next
     94          void ADC_SaveCalib (tADC_CALIB *pCALIB)
     95          {
     96            ADC_CLP0 = pCALIB->CLP[0]; 
   \                     ADC_SaveCalib: (+1)
   \   00000000   0x....             LDR      R1,??DataTable3_5  ;; 0x4002b038
   \   00000002   0x6942             LDR      R2,[R0, #+20]
   \   00000004   0x624A             STR      R2,[R1, #+36]
     97            ADC_CLP1 = pCALIB->CLP[1];
   \   00000006   0x6982             LDR      R2,[R0, #+24]
   \   00000008   0x620A             STR      R2,[R1, #+32]
     98            ADC_CLP2 = pCALIB->CLP[2];
   \   0000000A   0x69C2             LDR      R2,[R0, #+28]
   \   0000000C   0x61CA             STR      R2,[R1, #+28]
     99            ADC_CLP3 = pCALIB->CLP[3];
   \   0000000E   0x6A02             LDR      R2,[R0, #+32]
   \   00000010   0x618A             STR      R2,[R1, #+24]
    100            ADC_CLP4 = pCALIB->CLP[4];
   \   00000012   0x6A42             LDR      R2,[R0, #+36]
   \   00000014   0x614A             STR      R2,[R1, #+20]
    101            ADC_CLPS = pCALIB->CLPS;
   \   00000016   0x6902             LDR      R2,[R0, #+16]
   \   00000018   0x610A             STR      R2,[R1, #+16]
    102            ADC_CLPD = pCALIB->CLPD;  
   \   0000001A   0x68C2             LDR      R2,[R0, #+12]
   \   0000001C   0x60CA             STR      R2,[R1, #+12]
    103            ADC_PG   = pCALIB->PG; 
   \   0000001E   0x6842             LDR      R2,[R0, #+4]
   \   00000020   0x604A             STR      R2,[R1, #+4]
    104            ADC_OFS  = pCALIB->OFS;     
   \   00000022   0x6800             LDR      R0,[R0, #+0]
   \   00000024   0x6008             STR      R0,[R1, #+0]
    105          }
   \   00000026   0x4770             BX       LR               ;; return
    106          
    107          /******************************************************************************
    108           * interrupt function definitions                                             *
    109           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    110          void adc_isr (void) 
    111          { 
   \                     adc_isr: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
    112            if (pCallbackADC != (ADC_CALLBACK)NULL) 
   \   00000002   0x....             LDR      R6,??DataTable3
   \   00000004   0x6832             LDR      R2,[R6, #+0]
   \   00000006   0x0010             MOVS     R0,R2
   \   00000008   0xD020             BEQ      ??adc_isr_0
    113            { 
    114              if (ADC_SC1A & ADC_SC1_COCO_MASK) { pCallbackADC (CHA_CALLBACK, ADC_RA); }
   \   0000000A   0x2480             MOVS     R4,#+128
   \   0000000C   0x....             LDR      R5,??DataTable3_4  ;; 0x4002b000
   \   0000000E   0x6828             LDR      R0,[R5, #+0]
   \   00000010   0x4020             ANDS     R0,R0,R4
   \   00000012   0xD003             BEQ      ??adc_isr_1
   \   00000014   0x69A9             LDR      R1,[R5, #+24]
   \   00000016   0xB209             SXTH     R1,R1
   \   00000018   0x2001             MOVS     R0,#+1
   \   0000001A   0x4790             BLX      R2
    115              if (ADC_SC1B & ADC_SC1_COCO_MASK) { pCallbackADC (CHB_CALLBACK, ADC_RB); }
   \                     ??adc_isr_1: (+1)
   \   0000001C   0x6868             LDR      R0,[R5, #+4]
   \   0000001E   0x4020             ANDS     R0,R0,R4
   \   00000020   0xD004             BEQ      ??adc_isr_2
   \   00000022   0x69E9             LDR      R1,[R5, #+28]
   \   00000024   0xB209             SXTH     R1,R1
   \   00000026   0x2002             MOVS     R0,#+2
   \   00000028   0x6832             LDR      R2,[R6, #+0]
   \   0000002A   0x4790             BLX      R2
    116              if (ADC_SC1C & ADC_SC1_COCO_MASK) { pCallbackADC (CHC_CALLBACK, ADC_RC); }
   \                     ??adc_isr_2: (+1)
   \   0000002C   0x68A8             LDR      R0,[R5, #+8]
   \   0000002E   0x4020             ANDS     R0,R0,R4
   \   00000030   0xD004             BEQ      ??adc_isr_3
   \   00000032   0x6A29             LDR      R1,[R5, #+32]
   \   00000034   0xB209             SXTH     R1,R1
   \   00000036   0x2004             MOVS     R0,#+4
   \   00000038   0x6832             LDR      R2,[R6, #+0]
   \   0000003A   0x4790             BLX      R2
    117              if (ADC_SC1D & ADC_SC1_COCO_MASK) { pCallbackADC (CHD_CALLBACK, ADC_RD); }
   \                     ??adc_isr_3: (+1)
   \   0000003C   0x68E8             LDR      R0,[R5, #+12]
   \   0000003E   0x4004             ANDS     R4,R4,R0
   \   00000040   0xD004             BEQ      ??adc_isr_0
   \   00000042   0x6A69             LDR      R1,[R5, #+36]
   \   00000044   0xB209             SXTH     R1,R1
   \   00000046   0x2008             MOVS     R0,#+8
   \   00000048   0x6832             LDR      R2,[R6, #+0]
   \   0000004A   0x4790             BLX      R2
    118            }
    119          }
   \                     ??adc_isr_0: (+1)
   \   0000004C   0xBD70             POP      {R4-R6,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x........         DC32     pCallbackADC

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0xE000E280         DC32     0xe000e280

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0xE000E100         DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   0xE000E410         DC32     0xe000e410

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \   00000000   0x4002B000         DC32     0x4002b000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \   00000000   0x4002B038         DC32     0x4002b038
    120          /******************************************************************************
    121           * End of module                                                              *
    122           ******************************************************************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      60   ADC_ExecCalib
      36   ADC_Init
       0   ADC_SaveCalib
      16   adc_isr
        16   -- Indirect call


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
     264  ADC_ExecCalib
     114  ADC_Init
      40  ADC_SaveCalib
      78  adc_isr
       4  pCallbackADC

 
   4 bytes in section .bss
 520 bytes in section .text
 
 520 bytes of CODE memory
   4 bytes of DATA memory

Errors: none
Warnings: none
