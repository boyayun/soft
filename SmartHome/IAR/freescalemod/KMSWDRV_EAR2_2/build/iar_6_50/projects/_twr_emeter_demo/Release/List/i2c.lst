###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.1.6676/W32 for ARM        30/Jan/2016  15:22:31
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\src\drivers\i2c\i2c.c
#    Command line =  
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\src\drivers\i2c\i2c.c
#        -D NDEBUG -lCN
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\Release\List\
#        -o
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\Release\Obj\
#        --debug --endian=little --cpu=Cortex-M0+ --no_mem_idioms -e --fpu=None
#        --dlib_config "D:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\..\..\..\..\build\iar_6_50\fraclib\
#        -I
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\..\..\..\..\build\iar_6_50\meterlib\
#        -I
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\..\..\..\..\src\fraclib\
#        -I
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\..\..\..\..\src\meterlib\
#        -I
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\..\..\..\..\src\common\
#        -I
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\..\..\..\..\src\drivers\
#        -I
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\..\..\..\..\src\freemaster\
#        -I
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\..\..\..\..\src\projects\_twr_emeter_demo\
#        -Oh --require_prototypes
#    List file    =  
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\Release\List\i2c.lst
#    Object file  =  
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\Release\Obj\i2c.o
#
###############################################################################

E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\src\drivers\i2c\i2c.c
      1          /*****************************************************************************
      2           * (c) Copyright 2010-2013, Freescale Semiconductor Inc.
      3           * ALL RIGHTS RESERVED.
      4           ***************************************************************************//*!
      5           * @file      i2c.c
      6           * @version   1.0.2.0
      7           * @date      Dec-20-2011
      8           * @brief     I2C bus controller (I2C) driver source code.
      9          ******************************************************************************/
     10          #include "common.h"
     11          #include "i2c.h"
     12          
     13          /******************************************************************************
     14           * data type definitions                                                      *
     15           ******************************************************************************/

   \                                 In section .bss, align 4
     16          static I2C_CALLBACK volatile pCallbackI2C0_I2C1=NULL;
   \                     pCallbackI2C0_I2C1:
   \   00000000                      DS8 4
     17          
     18          /******************************************************************************
     19           * interrupt functions prototype                                              *
     20           ******************************************************************************/
     21          void I2C0_I2C1_isr (void);
     22          
     23          /******************************************************************************
     24           * Public functions definitions                                               *
     25           ******************************************************************************/
     26          #pragma diag_suppress=Pa082

   \                                 In section .text, align 2, keep-with-next
     27          void I2C_InstallCallback (uint8 ip, I2C_CALLBACK pCallback)
     28          {
     29            if (pCallback != NULL)  
   \                     I2C_InstallCallback: (+1)
   \   00000000   0x000A             MOVS     R2,R1
   \   00000002   0xD010             BEQ      ??I2C_InstallCallback_0
     30            { 
     31              pCallbackI2C0_I2C1 = pCallback; 
   \   00000004   0x....             LDR      R2,??DataTable2
   \   00000006   0x6011             STR      R1,[R2, #+0]
     32              NVIC_SetIsr(INT_I2C0_I2C1,ip); 
   \   00000008   0x2180             MOVS     R1,#+128
   \   0000000A   0x04C9             LSLS     R1,R1,#+19       ;; #+67108864
   \   0000000C   0x....             LDR      R2,??DataTable2_1  ;; 0xe000e280
   \   0000000E   0x6813             LDR      R3,[R2, #+0]
   \   00000010   0x430B             ORRS     R3,R3,R1
   \   00000012   0x6013             STR      R3,[R2, #+0]
   \   00000014   0x....             LDR      R2,??DataTable2_2  ;; 0xe000e100
   \   00000016   0x6813             LDR      R3,[R2, #+0]
   \   00000018   0x4319             ORRS     R1,R1,R3
   \   0000001A   0x6011             STR      R1,[R2, #+0]
   \   0000001C   0x....             LDR      R1,??DataTable2_3  ;; 0xe000e418
   \   0000001E   0x680A             LDR      R2,[R1, #+0]
   \   00000020   0x0580             LSLS     R0,R0,#+22
   \   00000022   0x4310             ORRS     R0,R0,R2
   \   00000024   0x6008             STR      R0,[R1, #+0]
     33            }
     34          }
   \                     ??I2C_InstallCallback_0: (+1)
   \   00000026   0x4770             BX       LR               ;; return
     35          

   \                                 In section .text, align 2, keep-with-next
     36          void I2C0_Init (tI2C i2c)
     37          {
   \                     I2C0_Init: (+1)
   \   00000000   0xB407             PUSH     {R0-R2}
     38            I2C0_A1    = i2c.A1;
   \   00000002   0x....             LDR      R0,??DataTable2_4  ;; 0x40067000
   \   00000004   0x....             B.N      ?Subroutine0
     39            I2C0_F     = i2c.F;
     40            I2C0_C1    = i2c.C1;
     41            I2C0_C2    = i2c.C2;
     42            I2C0_FLT   = i2c.FLT;
     43            I2C0_RA    = i2c.RA;
     44            I2C0_SMB   = i2c.SMB;
     45            I2C0_A2    = i2c.A2;
     46            I2C0_SLTH  = i2c.SLTH;
     47            I2C0_SLTL  = i2c.SLTL;
     48          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \   00000000   0x4669             MOV      R1,SP
   \   00000002   0x7809             LDRB     R1,[R1, #+0]
   \   00000004   0x7001             STRB     R1,[R0, #+0]
   \   00000006   0x4669             MOV      R1,SP
   \   00000008   0x7849             LDRB     R1,[R1, #+1]
   \   0000000A   0x7041             STRB     R1,[R0, #+1]
   \   0000000C   0x4669             MOV      R1,SP
   \   0000000E   0x7889             LDRB     R1,[R1, #+2]
   \   00000010   0x7081             STRB     R1,[R0, #+2]
   \   00000012   0x4669             MOV      R1,SP
   \   00000014   0x78C9             LDRB     R1,[R1, #+3]
   \   00000016   0x7141             STRB     R1,[R0, #+5]
   \   00000018   0x4669             MOV      R1,SP
   \   0000001A   0x7909             LDRB     R1,[R1, #+4]
   \   0000001C   0x7181             STRB     R1,[R0, #+6]
   \   0000001E   0x4669             MOV      R1,SP
   \   00000020   0x7949             LDRB     R1,[R1, #+5]
   \   00000022   0x71C1             STRB     R1,[R0, #+7]
   \   00000024   0x4669             MOV      R1,SP
   \   00000026   0x7989             LDRB     R1,[R1, #+6]
   \   00000028   0x7201             STRB     R1,[R0, #+8]
   \   0000002A   0x4669             MOV      R1,SP
   \   0000002C   0x79C9             LDRB     R1,[R1, #+7]
   \   0000002E   0x7241             STRB     R1,[R0, #+9]
   \   00000030   0x4669             MOV      R1,SP
   \   00000032   0x7A09             LDRB     R1,[R1, #+8]
   \   00000034   0x7281             STRB     R1,[R0, #+10]
   \   00000036   0x4669             MOV      R1,SP
   \   00000038   0x7A49             LDRB     R1,[R1, #+9]
   \   0000003A   0x72C1             STRB     R1,[R0, #+11]
   \   0000003C   0xB003             ADD      SP,SP,#+12
   \   0000003E   0x4770             BX       LR               ;; return
     49          

   \                                 In section .text, align 2, keep-with-next
     50          void I2C1_Init (tI2C i2c)
     51          {       
   \                     I2C1_Init: (+1)
   \   00000000   0xB407             PUSH     {R0-R2}
     52            I2C1_A1    = i2c.A1;
   \   00000002   0x....             LDR      R0,??DataTable2_5  ;; 0x40068000
   \   00000004                      REQUIRE ?Subroutine0
   \   00000004                      ;; // Fall through to label ?Subroutine0
     53            I2C1_F     = i2c.F;
     54            I2C1_C1    = i2c.C1;
     55            I2C1_C2    = i2c.C2;
     56            I2C1_FLT   = i2c.FLT;
     57            I2C1_RA    = i2c.RA;
     58            I2C1_SMB   = i2c.SMB;
     59            I2C1_A2    = i2c.A2;
     60            I2C1_SLTH  = i2c.SLTH;
     61            I2C1_SLTL  = i2c.SLTL;
     62          }
     63          
     64          /******************************************************************************
     65           * interrupt functions definitions                                            *
     66           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     67          void I2C0_I2C1_isr (void) 
     68          { 
   \                     I2C0_I2C1_isr: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
     69            /* process I2C0 interrupt                                                   */
     70            if (SIM_SCGC4 & SIM_SCGC4_I2C0_MASK)
   \   00000002   0x....             LDR      R4,??DataTable2_6  ;; 0x4003f034
   \   00000004   0x6820             LDR      R0,[R4, #+0]
   \   00000006   0x0600             LSLS     R0,R0,#+24
   \   00000008   0xD50D             BPL      ??I2C0_I2C1_isr_0
     71            {
     72              if (I2C_GetIsrFlag(I2C0))
   \   0000000A   0x2002             MOVS     R0,#+2
   \   0000000C   0x....             LDR      R1,??DataTable2_7  ;; 0x40067003
   \   0000000E   0x780A             LDRB     R2,[R1, #+0]
   \   00000010   0x4202             TST      R2,R0
   \   00000012   0xD008             BEQ      ??I2C0_I2C1_isr_0
     73              {
     74                I2C_ClrIsrFlag(I2C0);
   \   00000014   0x780A             LDRB     R2,[R1, #+0]
   \   00000016   0x23EF             MOVS     R3,#+239
   \   00000018   0x4013             ANDS     R3,R3,R2
   \   0000001A   0x4318             ORRS     R0,R0,R3
   \   0000001C   0x7008             STRB     R0,[R1, #+0]
     75                pCallbackI2C0_I2C1 (I2C0_CALLBACK);
   \   0000001E   0x2001             MOVS     R0,#+1
   \   00000020   0x....             LDR      R1,??DataTable2
   \   00000022   0x6809             LDR      R1,[R1, #+0]
   \   00000024   0x4788             BLX      R1
     76              }
     77            }
     78            
     79            /* process I2C1 interrupt                                                   */
     80            if (SIM_SCGC4 & SIM_SCGC4_I2C1_MASK)
   \                     ??I2C0_I2C1_isr_0: (+1)
   \   00000026   0x6820             LDR      R0,[R4, #+0]
   \   00000028   0x05C0             LSLS     R0,R0,#+23
   \   0000002A   0xD50D             BPL      ??I2C0_I2C1_isr_1
     81            {
     82              if (I2C_GetIsrFlag(I2C1))
   \   0000002C   0x2002             MOVS     R0,#+2
   \   0000002E   0x....             LDR      R1,??DataTable2_8  ;; 0x40068003
   \   00000030   0x780A             LDRB     R2,[R1, #+0]
   \   00000032   0x4202             TST      R2,R0
   \   00000034   0xD008             BEQ      ??I2C0_I2C1_isr_1
     83              {
     84                I2C_ClrIsrFlag(I2C1);
   \   00000036   0x780A             LDRB     R2,[R1, #+0]
   \   00000038   0x23EF             MOVS     R3,#+239
   \   0000003A   0x4013             ANDS     R3,R3,R2
   \   0000003C   0x4318             ORRS     R0,R0,R3
   \   0000003E   0x7008             STRB     R0,[R1, #+0]
     85                pCallbackI2C0_I2C1 (I2C1_CALLBACK);
   \   00000040   0x2002             MOVS     R0,#+2
   \   00000042   0x....             LDR      R1,??DataTable2
   \   00000044   0x6809             LDR      R1,[R1, #+0]
   \   00000046   0x4788             BLX      R1
     86              }
     87            }
     88          }
   \                     ??I2C0_I2C1_isr_1: (+1)
   \   00000048   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x........         DC32     pCallbackI2C0_I2C1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0xE000E280         DC32     0xe000e280

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0xE000E100         DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   0xE000E418         DC32     0xe000e418

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \   00000000   0x40067000         DC32     0x40067000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_5:
   \   00000000   0x40068000         DC32     0x40068000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_6:
   \   00000000   0x4003F034         DC32     0x4003f034

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_7:
   \   00000000   0x40067003         DC32     0x40067003

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_8:
   \   00000000   0x40068003         DC32     0x40068003
     89          /******************************************************************************
     90           * End of module                                                              *
     91           ******************************************************************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   I2C0_I2C1_isr
         8   -- Indirect call
      12   I2C0_Init
      12   I2C1_Init
       0   I2C_InstallCallback


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ??DataTable2_4
       4  ??DataTable2_5
       4  ??DataTable2_6
       4  ??DataTable2_7
       4  ??DataTable2_8
      64  ?Subroutine0
      74  I2C0_I2C1_isr
       6  I2C0_Init
       4  I2C1_Init
      40  I2C_InstallCallback
       4  pCallbackI2C0_I2C1

 
   4 bytes in section .bss
 224 bytes in section .text
 
 224 bytes of CODE memory
   4 bytes of DATA memory

Errors: none
Warnings: none
