###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.1.6676/W32 for ARM        30/Jan/2016  15:22:36
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\src\drivers\swisr\swisr.c
#    Command line =  
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\src\drivers\swisr\swisr.c
#        -D NDEBUG -lCN
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\Release\List\
#        -o
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\Release\Obj\
#        --debug --endian=little --cpu=Cortex-M0+ --no_mem_idioms -e --fpu=None
#        --dlib_config "D:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\..\..\..\..\build\iar_6_50\fraclib\
#        -I
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\..\..\..\..\build\iar_6_50\meterlib\
#        -I
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\..\..\..\..\src\fraclib\
#        -I
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\..\..\..\..\src\meterlib\
#        -I
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\..\..\..\..\src\common\
#        -I
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\..\..\..\..\src\drivers\
#        -I
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\..\..\..\..\src\freemaster\
#        -I
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\..\..\..\..\src\projects\_twr_emeter_demo\
#        -Oh --require_prototypes
#    List file    =  
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\Release\List\swisr.lst
#    Object file  =  
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\Release\Obj\swisr.o
#
###############################################################################

E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\src\drivers\swisr\swisr.c
      1          /*****************************************************************************
      2           * (c) Copyright 2010-2013, Freescale Semiconductor Inc.
      3           * ALL RIGHTS RESERVED.
      4           ***************************************************************************//*!
      5           * @file      swisr.c
      6           * @version   1.0.2.0
      7           * @date      May-14-2012
      8           * @brief     Software Interrupt (SWISR) driver source code.
      9           ******************************************************************************/
     10          #include "common.h"
     11          #include "swisr.h"
     12          
     13          /******************************************************************************
     14           * public data type definitions                                               *
     15           ******************************************************************************/

   \                                 In section .bss, align 4
     16          uint16 swisrcnt[] = {0,0,0};
   \                     swisrcnt:
   \   00000000                      DS8 8
     17          
     18          /******************************************************************************
     19           * data type definitions                                                      *
     20           ******************************************************************************/

   \                                 In section .bss, align 4
     21          static SWISR_CALLBACK pCallback0 = NULL;
   \                     pCallback0:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     22          static SWISR_CALLBACK pCallback1 = NULL;
   \                     pCallback1:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     23          static SWISR_CALLBACK pCallback2 = NULL;
   \                     pCallback2:
   \   00000000                      DS8 4
     24          
     25          /******************************************************************************
     26           * interrupt function prototypes                                              *
     27           ******************************************************************************/
     28          void swisr0_isr  (void);
     29          void swisr1_isr  (void);
     30          void swisr2_isr  (void);
     31          
     32          /******************************************************************************
     33           * Public function definitions                                                *
     34           ******************************************************************************/
     35          #pragma diag_suppress=Pa082

   \                                 In section .text, align 2, keep-with-next
     36          void SWISR0_HandlerInit  (uint16 ip, SWISR_CALLBACK pCallback)
     37          {
     38            if (pCallback != NULL) { pCallback0 = pCallback; NVIC_SetIsr(SWISR_VECTOR_0,ip); }
   \                     SWISR0_HandlerInit: (+1)
   \   00000000   0x000A             MOVS     R2,R1
   \   00000002   0xD010             BEQ      ??SWISR0_HandlerInit_0
   \   00000004   0x....             LDR      R2,??DataTable5
   \   00000006   0x6011             STR      R1,[R2, #+0]
   \   00000008   0x2180             MOVS     R1,#+128
   \   0000000A   0x0189             LSLS     R1,R1,#+6        ;; #+8192
   \   0000000C   0x....             LDR      R2,??DataTable5_1  ;; 0xe000e280
   \   0000000E   0x6813             LDR      R3,[R2, #+0]
   \   00000010   0x430B             ORRS     R3,R3,R1
   \   00000012   0x6013             STR      R3,[R2, #+0]
   \   00000014   0x....             LDR      R2,??DataTable5_2  ;; 0xe000e100
   \   00000016   0x6813             LDR      R3,[R2, #+0]
   \   00000018   0x4319             ORRS     R1,R1,R3
   \   0000001A   0x6011             STR      R1,[R2, #+0]
   \   0000001C   0x....             LDR      R1,??DataTable5_3  ;; 0xe000e40c
   \   0000001E   0x680A             LDR      R2,[R1, #+0]
   \   00000020   0x0380             LSLS     R0,R0,#+14
   \   00000022   0x4310             ORRS     R0,R0,R2
   \   00000024   0x6008             STR      R0,[R1, #+0]
     39          }
   \                     ??SWISR0_HandlerInit_0: (+1)
   \   00000026   0x4770             BX       LR               ;; return
     40          

   \                                 In section .text, align 2, keep-with-next
     41          void SWISR1_HandlerInit  (uint16 ip, SWISR_CALLBACK pCallback)
     42          {
     43            if (pCallback != NULL) { pCallback1 = pCallback; NVIC_SetIsr(SWISR_VECTOR_1,ip); }
   \                     SWISR1_HandlerInit: (+1)
   \   00000000   0x000A             MOVS     R2,R1
   \   00000002   0xD010             BEQ      ??SWISR1_HandlerInit_0
   \   00000004   0x....             LDR      R2,??DataTable5_4
   \   00000006   0x6011             STR      R1,[R2, #+0]
   \   00000008   0x2180             MOVS     R1,#+128
   \   0000000A   0x0509             LSLS     R1,R1,#+20       ;; #+134217728
   \   0000000C   0x....             LDR      R2,??DataTable5_1  ;; 0xe000e280
   \   0000000E   0x6813             LDR      R3,[R2, #+0]
   \   00000010   0x430B             ORRS     R3,R3,R1
   \   00000012   0x6013             STR      R3,[R2, #+0]
   \   00000014   0x....             LDR      R2,??DataTable5_2  ;; 0xe000e100
   \   00000016   0x6813             LDR      R3,[R2, #+0]
   \   00000018   0x4319             ORRS     R1,R1,R3
   \   0000001A   0x6011             STR      R1,[R2, #+0]
   \   0000001C   0x....             LDR      R1,??DataTable5_5  ;; 0xe000e418
   \   0000001E   0x680A             LDR      R2,[R1, #+0]
   \   00000020   0x0780             LSLS     R0,R0,#+30
   \   00000022   0x4310             ORRS     R0,R0,R2
   \   00000024   0x6008             STR      R0,[R1, #+0]
     44          }
   \                     ??SWISR1_HandlerInit_0: (+1)
   \   00000026   0x4770             BX       LR               ;; return
     45          

   \                                 In section .text, align 2, keep-with-next
     46          void SWISR2_HandlerInit  (uint16 ip, SWISR_CALLBACK pCallback)
     47          {
     48            if (pCallback != NULL) { pCallback2 = pCallback; NVIC_SetIsr(SWISR_VECTOR_2,ip); }
   \                     SWISR2_HandlerInit: (+1)
   \   00000000   0x000A             MOVS     R2,R1
   \   00000002   0xD010             BEQ      ??SWISR2_HandlerInit_0
   \   00000004   0x....             LDR      R2,??DataTable5_6
   \   00000006   0x6011             STR      R1,[R2, #+0]
   \   00000008   0x2180             MOVS     R1,#+128
   \   0000000A   0x0589             LSLS     R1,R1,#+22       ;; #+536870912
   \   0000000C   0x....             LDR      R2,??DataTable5_1  ;; 0xe000e280
   \   0000000E   0x6813             LDR      R3,[R2, #+0]
   \   00000010   0x430B             ORRS     R3,R3,R1
   \   00000012   0x6013             STR      R3,[R2, #+0]
   \   00000014   0x....             LDR      R2,??DataTable5_2  ;; 0xe000e100
   \   00000016   0x6813             LDR      R3,[R2, #+0]
   \   00000018   0x4319             ORRS     R1,R1,R3
   \   0000001A   0x6011             STR      R1,[R2, #+0]
   \   0000001C   0x....             LDR      R1,??DataTable5_7  ;; 0xe000e41c
   \   0000001E   0x680A             LDR      R2,[R1, #+0]
   \   00000020   0x0380             LSLS     R0,R0,#+14
   \   00000022   0x4310             ORRS     R0,R0,R2
   \   00000024   0x6008             STR      R0,[R1, #+0]
     49          }
   \                     ??SWISR2_HandlerInit_0: (+1)
   \   00000026   0x4770             BX       LR               ;; return
     50          
     51          /******************************************************************************
     52           * interrupt functions definitions                                            *
     53           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     54          void swisr0_isr (void) { if (pCallback0 != (SWISR_CALLBACK)NULL) pCallback0 (); } 
   \                     swisr0_isr: (+1)
   \   00000000   0x....             LDR      R0,??DataTable5
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x0001             MOVS     R1,R0
   \   00000006   0xD100             BNE      ??swisr0_isr_0
   \   00000008   0x4770             BX       LR
   \                     ??swisr0_isr_0: (+1)
   \   0000000A   0xB580             PUSH     {R7,LR}
   \   0000000C   0x4780             BLX      R0
   \   0000000E   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
     55          void swisr1_isr (void) { if (pCallback1 != (SWISR_CALLBACK)NULL) pCallback1 (); } 
   \                     swisr1_isr: (+1)
   \   00000000   0x....             LDR      R0,??DataTable5_4
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x0001             MOVS     R1,R0
   \   00000006   0xD100             BNE      ??swisr1_isr_0
   \   00000008   0x4770             BX       LR
   \                     ??swisr1_isr_0: (+1)
   \   0000000A   0xB580             PUSH     {R7,LR}
   \   0000000C   0x4780             BLX      R0
   \   0000000E   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
     56          void swisr2_isr (void) { if (pCallback2 != (SWISR_CALLBACK)NULL) pCallback2 (); } 
   \                     swisr2_isr: (+1)
   \   00000000   0x....             LDR      R0,??DataTable5_6
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x0001             MOVS     R1,R0
   \   00000006   0xD100             BNE      ??swisr2_isr_0
   \   00000008   0x4770             BX       LR
   \                     ??swisr2_isr_0: (+1)
   \   0000000A   0xB580             PUSH     {R7,LR}
   \   0000000C   0x4780             BLX      R0
   \   0000000E   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x........         DC32     pCallback0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0xE000E280         DC32     0xe000e280

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0xE000E100         DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   0xE000E40C         DC32     0xe000e40c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \   00000000   0x........         DC32     pCallback1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_5:
   \   00000000   0xE000E418         DC32     0xe000e418

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_6:
   \   00000000   0x........         DC32     pCallback2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_7:
   \   00000000   0xE000E41C         DC32     0xe000e41c
     57          
     58          /******************************************************************************
     59           * End of module                                                              *
     60           ******************************************************************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   SWISR0_HandlerInit
       0   SWISR1_HandlerInit
       0   SWISR2_HandlerInit
       8   swisr0_isr
         8   -- Indirect call
       8   swisr1_isr
         8   -- Indirect call
       8   swisr2_isr
         8   -- Indirect call


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_2
       4  ??DataTable5_3
       4  ??DataTable5_4
       4  ??DataTable5_5
       4  ??DataTable5_6
       4  ??DataTable5_7
      40  SWISR0_HandlerInit
      40  SWISR1_HandlerInit
      40  SWISR2_HandlerInit
       4  pCallback0
       4  pCallback1
       4  pCallback2
      16  swisr0_isr
      16  swisr1_isr
      16  swisr2_isr
       8  swisrcnt

 
  20 bytes in section .bss
 200 bytes in section .text
 
 200 bytes of CODE memory
  20 bytes of DATA memory

Errors: none
Warnings: none
