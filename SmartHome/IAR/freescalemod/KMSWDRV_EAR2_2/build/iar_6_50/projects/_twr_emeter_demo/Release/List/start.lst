###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.1.6676/W32 for ARM        30/Jan/2016  15:22:36
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\src\common\start.c
#    Command line =  
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\src\common\start.c
#        -D NDEBUG -lCN
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\Release\List\
#        -o
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\Release\Obj\
#        --debug --endian=little --cpu=Cortex-M0+ --no_mem_idioms -e --fpu=None
#        --dlib_config "D:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\..\..\..\..\build\iar_6_50\fraclib\
#        -I
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\..\..\..\..\build\iar_6_50\meterlib\
#        -I
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\..\..\..\..\src\fraclib\
#        -I
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\..\..\..\..\src\meterlib\
#        -I
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\..\..\..\..\src\common\
#        -I
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\..\..\..\..\src\drivers\
#        -I
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\..\..\..\..\src\freemaster\
#        -I
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\..\..\..\..\src\projects\_twr_emeter_demo\
#        -Oh --require_prototypes
#    List file    =  
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\Release\List\start.lst
#    Object file  =  
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\Release\Obj\start.o
#
###############################################################################

E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\src\common\start.c
      1          /*****************************************************************************
      2           * (c) Copyright 2010-2013, Freescale Semiconductor Inc.
      3           * ALL RIGHTS RESERVED.
      4           ***************************************************************************//*!
      5           * @file      start.c
      6           * @version   1.0.4.0
      7           * @date      Jun-8-2013      
      8           * @brief     startup function (high level part).
      9           ******************************************************************************/
     10          #include "start.h"
     11          #include "common.h"
     12          #include "drivers.h"   
     13          
     14          #define WDOG_DISABLE()                                                        \
     15          {                                                                             \
     16            /* Write 0xC520 to the unlock register                          */          \
     17            WDOG_UNLOCK = 0xC520;                                                       \
     18                                                                                        \
     19            /* Followed by 0xD928 to complete the unlock                    */          \
     20            WDOG_UNLOCK = 0xD928;                                                       \
     21                                                                                        \
     22            /* Clear the WDOGEN bit to disable the watchdog                 */          \
     23            WDOG_STCTRLH &= ~WDOG_STCTRLH_WDOGEN_MASK;                                  \
     24          }
     25          
     26          /******************************************************************************
     27           * Startup function definition - function calls all of the needed startup     *
     28           * routines and then branches to the main process.                            *
     29           ******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
     30          void start(void)
     31          { 
   \                     start: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     32          #if defined(BOOT_HWVLPR_MODE)
     33            /* Hardware forced VLPR boot mode. The device will boot in VLPR mode after  */
     34            /* next POR provided VBAT is powered.                                       */
     35            IRTC_BootVLPR   ();
     36          #else
     37            /* Activate VLPR mode by software if BOOT_EXE_MODE constant has been        */
     38            /* defined in the appconfig.h header file.                                  */
     39            if (NV_FOPT & NV_FOPT_EXE_MODE_MASK) 
   \   00000002   0x....             LDR      R0,??DataTable1  ;; 0x40d
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0x0700             LSLS     R0,R0,#+28
   \   00000008   0xD50F             BPL      ??start_0
   \   0000000A   0xBF00             Nop      
   \   0000000C   0x....             ADR.N    R0,`?<Constant (tSMC){34}>`
   \   0000000E   0x6800             LDR      R0,[R0, #+0]
   \   00000010   0x9000             STR      R0,[SP, #+0]
     40            {
     41              SMC_Init (SMC_MODULE_VLPS_ON_VLLS_ON_CONFIG); /* enable VLPx & VLLSx modes*/
   \   00000012   0x4668             MOV      R0,SP
   \   00000014   0x7800             LDRB     R0,[R0, #+0]
   \   00000016   0x....             LDR      R1,??DataTable1_1  ;; 0x4007e000
   \   00000018   0x7008             STRB     R0,[R1, #+0]
     42              SMC_SetMode (VLPR);                           /* enter VLPR mode          */
   \   0000001A   0x2040             MOVS     R0,#+64
   \   0000001C   0x....             LDR      R1,??DataTable1_2  ;; 0x528fe001
   \   0000001E   0x7008             STRB     R0,[R1, #+0]
   \   00000020   0x2004             MOVS     R0,#+4
   \   00000022   0x....             LDR      R1,??DataTable1_3  ;; 0x4007d002
   \                     ??start_1: (+1)
   \   00000024   0x780A             LDRB     R2,[R1, #+0]
   \   00000026   0x4202             TST      R2,R0
   \   00000028   0xD1FC             BNE      ??start_1
     43            }
     44          #endif  
     45            	
     46            /* Disable watchdog Timer                                                   */
     47            WDOG_DISABLE    ();
   \                     ??start_0: (+1)
   \   0000002A   0x....             LDR      R0,??DataTable1_4  ;; 0x40053000
   \   0000002C   0x....             LDR      R1,??DataTable1_5  ;; 0xc520
   \   0000002E   0x81C1             STRH     R1,[R0, #+14]
   \   00000030   0x....             LDR      R1,??DataTable1_6  ;; 0xd928
   \   00000032   0x81C1             STRH     R1,[R0, #+14]
   \   00000034   0x8801             LDRH     R1,[R0, #+0]
   \   00000036   0x....             LDR      R2,??DataTable1_7  ;; 0xfffe
   \   00000038   0x400A             ANDS     R2,R2,R1
   \   0000003A   0x8002             STRH     R2,[R0, #+0]
     48                
     49            /* Copy any vector or data sections that need to be in RAM                  */
     50            startup ();
   \   0000003C   0x.... 0x....      BL       startup
     51          	
     52            /* Jump to main process                                                     */
     53            main ();
   \   00000040   0x.... 0x....      BL       main
     54          }
   \   00000044   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x0000040D         DC32     0x40d

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0x4007E000         DC32     0x4007e000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   0x528FE001         DC32     0x528fe001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \   00000000   0x4007D002         DC32     0x4007d002

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_4:
   \   00000000   0x40053000         DC32     0x40053000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_5:
   \   00000000   0x0000C520         DC32     0xc520

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_6:
   \   00000000   0x0000D928         DC32     0xd928

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_7:
   \   00000000   0x0000FFFE         DC32     0xfffe

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant (tSMC){34}>`:
   \   00000000   0x22 0x00          DC8 34, 0, 0, 0
   \              0x00 0x00    
     55          /******************************************************************************
     56           * End of module                                                              *
     57           ******************************************************************************/
     58          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   start
         8   -> main
         8   -> startup


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ?<Constant (tSMC){34}>
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_2
       4  ??DataTable1_3
       4  ??DataTable1_4
       4  ??DataTable1_5
       4  ??DataTable1_6
       4  ??DataTable1_7
      70  start

 
 106 bytes in section .text
 
 106 bytes of CODE memory

Errors: none
Warnings: none
