###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.1.6676/W32 for ARM        30/Jan/2016  15:22:38
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\src\drivers\vref\vref.c
#    Command line =  
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\src\drivers\vref\vref.c
#        -D NDEBUG -lCN
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\Release\List\
#        -o
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\Release\Obj\
#        --debug --endian=little --cpu=Cortex-M0+ --no_mem_idioms -e --fpu=None
#        --dlib_config "D:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\..\..\..\..\build\iar_6_50\fraclib\
#        -I
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\..\..\..\..\build\iar_6_50\meterlib\
#        -I
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\..\..\..\..\src\fraclib\
#        -I
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\..\..\..\..\src\meterlib\
#        -I
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\..\..\..\..\src\common\
#        -I
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\..\..\..\..\src\drivers\
#        -I
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\..\..\..\..\src\freemaster\
#        -I
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\..\..\..\..\src\projects\_twr_emeter_demo\
#        -Oh --require_prototypes
#    List file    =  
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\Release\List\vref.lst
#    Object file  =  
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\Release\Obj\vref.o
#
###############################################################################

E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\src\drivers\vref\vref.c
      1          /*****************************************************************************
      2           * (c) Copyright 2010-2013, Freescale Semiconductor Inc.
      3           * ALL RIGHTS RESERVED.
      4           ***************************************************************************//*!
      5           * @file      vref.c
      6           * @version   1.0.2.0
      7           * @date      May-8-2011
      8           * @brief     Voltage Reference (VREF) driver source code.
      9           ******************************************************************************/
     10          #include "common.h"
     11          #include "vref.h"
     12          
     13          /******************************************************************************
     14           * Public functions definitions                                               *
     15           ******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
     16          void VREF_Init (tVREF vref, tVREF_S vref_s)
     17          {     
   \                     VREF_Init: (+1)
   \   00000000   0xB081             SUB      SP,SP,#+4
   \   00000002   0xB407             PUSH     {R0-R2}
     18            register uint8  tmp;
     19            register uint32 tmpl;
     20          
     21            VREF_VREFH_SC = VREF_VREFH_SC_VREFEN_MASK; /* enable module and keep mode 0 */           
   \   00000004   0x4812             LDR      R0,??VREF_Init_0  ;; 0x4006f000
   \   00000006   0x2280             MOVS     R2,#+128
   \   00000008   0x7042             STRB     R2,[R0, #+1]
     22            /* check and wait until reference is stable                                 */
     23            if (vref.VREFH_SC & VREF_VREFH_SC_VREFEN_MASK)  
   \   0000000A   0x4669             MOV      R1,SP
   \   0000000C   0x7849             LDRB     R1,[R1, #+1]
   \   0000000E   0x4211             TST      R1,R2
   \   00000010   0xD002             BEQ      ??VREF_Init_1
     24              while (!(VREF_VREFH_SC & VREF_VREFH_SC_VREFST_MASK));
   \                     ??VREF_Init_2: (+1)
   \   00000012   0x7842             LDRB     R2,[R0, #+1]
   \   00000014   0x0752             LSLS     R2,R2,#+29
   \   00000016   0xD5FC             BPL      ??VREF_Init_2
     25            
     26            /* Load VREFH_TRM without change trim value                                 */
     27            tmp            = (VREF_VREFH_TRM & VREF_VREFH_TRM_TRIM_MASK);
   \                     ??VREF_Init_1: (+1)
   \   00000018   0x7802             LDRB     R2,[R0, #+0]
     28            VREF_VREFH_TRM = (vref.VREFH_TRM | tmp);    /* Set actual selection         */          
   \   0000001A   0x466B             MOV      R3,SP
   \   0000001C   0x781B             LDRB     R3,[R3, #+0]
   \   0000001E   0x0692             LSLS     R2,R2,#+26
   \   00000020   0x0E92             LSRS     R2,R2,#+26
   \   00000022   0x431A             ORRS     R2,R2,R3
   \   00000024   0x7002             STRB     R2,[R0, #+0]
     29            /* Load control register                                                    */
     30            VREF_VREFH_SC  = vref.VREFH_SC;             /* write control register       */
   \   00000026   0x7041             STRB     R1,[R0, #+1]
     31            /* Load VREFL_TRM without change trim value                                 */
     32            tmp            = (VREF_VREFL_TRM & VREF_VREFL_TRM_VREFL_TRIM_MASK);          
   \   00000028   0x7941             LDRB     R1,[R0, #+5]
     33            VREF_VREFL_TRM = (vref.VREFL_TRM | vref_s.VREFL_TRM_S | tmp);                         
   \   0000002A   0x466A             MOV      R2,SP
   \   0000002C   0x7892             LDRB     R2,[R2, #+2]
   \   0000002E   0xAB01             ADD      R3,SP,#+4
   \   00000030   0x791B             LDRB     R3,[R3, #+4]
   \   00000032   0x4313             ORRS     R3,R3,R2
   \   00000034   0x0749             LSLS     R1,R1,#+29
   \   00000036   0x0F49             LSRS     R1,R1,#+29
   \   00000038   0x4319             ORRS     R1,R1,R3
   \   0000003A   0x7141             STRB     R1,[R0, #+5]
     34            /* Load SIM_MISC_CTL without change other flags                             */
     35            tmpl           = (SIM_MISC_CTL & (                                           \
     36                                                SIM_MISC_CTL_RTCCLKSEL_MASK|             \
     37                                                SIM_MISC_CTL_TMR3PCSSEL_MASK|            \
     38                                                SIM_MISC_CTL_TMR2PCSSEL_MASK|            \
     39                                                SIM_MISC_CTL_TMR1PCSSEL_MASK|            \
     40                                                SIM_MISC_CTL_TMR0PCSSEL_MASK|            \
     41                                                SIM_MISC_CTL_TMR3SCSSEL_MASK|            \
     42                                                SIM_MISC_CTL_TMR2SCSSEL_MASK|            \
     43                                                SIM_MISC_CTL_TMR1SCSSEL_MASK|            \
     44                                                SIM_MISC_CTL_TMR0SCSSEL_MASK|            \
     45                                                SIM_MISC_CTL_TMR0PLLCLKSEL_MASK|         \
     46                                                SIM_MISC_CTL_EWMINSEL_MASK|              \
     47                                                SIM_MISC_CTL_XBARPITOUTSEL_MASK|         \
     48                                                SIM_MISC_CTL_UART3IRSEL_MASK|            \
     49                                                SIM_MISC_CTL_UART2IRSEL_MASK|            \
     50                                                SIM_MISC_CTL_UART1IRSEL_MASK|            \
     51                                                SIM_MISC_CTL_UART0IRSEL_MASK|            \
     52                                                SIM_MISC_CTL_UARTMODTYPE_MASK|           \
     53                                                SIM_MISC_CTL_AFECLKPADDIR_MASK|          \
     54                                                SIM_MISC_CTL_AFECLKSEL_MASK|             \
     55                                                SIM_MISC_CTL_DMADONESEL_MASK|            \
     56                                                SIM_MISC_CTL_XBARAFEMODOUTSEL_MASK       \
     57                                             )                                           \
     58                             );
   \   0000003C   0x4805             LDR      R0,??VREF_Init_0+0x4  ;; 0x4003f06c
   \   0000003E   0x6801             LDR      R1,[R0, #+0]
     59            SIM_MISC_CTL   = (vref_s.SIM_MISC_CTL_S | tmpl);
   \   00000040   0x9A01             LDR      R2,[SP, #+4]
   \   00000042   0x00C9             LSLS     R1,R1,#+3
   \   00000044   0x08C9             LSRS     R1,R1,#+3
   \   00000046   0x4311             ORRS     R1,R1,R2
   \   00000048   0x6001             STR      R1,[R0, #+0]
     60          }
   \   0000004A   0xB004             ADD      SP,SP,#+16
   \   0000004C   0x4770             BX       LR               ;; return
   \   0000004E   0xBF00             Nop      
   \                     ??VREF_Init_0:
   \   00000050   0x4006F000         DC32     0x4006f000
   \   00000054   0x4003F06C         DC32     0x4003f06c
     61          
     62          /******************************************************************************
     63           * End of module                                                              *
     64           ******************************************************************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   VREF_Init


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      88  VREF_Init

 
 88 bytes in section .text
 
 88 bytes of CODE memory

Errors: none
Warnings: none
