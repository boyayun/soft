###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.1.6676/W32 for ARM        30/Jan/2016  15:22:32
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\src\drivers\llwu\llwu.c
#    Command line =  
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\src\drivers\llwu\llwu.c
#        -D NDEBUG -lCN
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\Release\List\
#        -o
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\Release\Obj\
#        --debug --endian=little --cpu=Cortex-M0+ --no_mem_idioms -e --fpu=None
#        --dlib_config "D:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\..\..\..\..\build\iar_6_50\fraclib\
#        -I
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\..\..\..\..\build\iar_6_50\meterlib\
#        -I
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\..\..\..\..\src\fraclib\
#        -I
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\..\..\..\..\src\meterlib\
#        -I
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\..\..\..\..\src\common\
#        -I
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\..\..\..\..\src\drivers\
#        -I
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\..\..\..\..\src\freemaster\
#        -I
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\..\..\..\..\src\projects\_twr_emeter_demo\
#        -Oh --require_prototypes
#    List file    =  
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\Release\List\llwu.lst
#    Object file  =  
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\Release\Obj\llwu.o
#
###############################################################################

E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\src\drivers\llwu\llwu.c
      1          /*****************************************************************************
      2           * (c) Copyright 2010-2013, Freescale Semiconductor Inc.
      3           * ALL RIGHTS RESERVED.
      4           ***************************************************************************//*!
      5           * @file      llwu.c
      6           * @version   1.0.3.0
      7           * @date      Mar-10-2013
      8           * @brief     Low-Leakage Wakeup Unit (LLWU) driver source code.
      9           ******************************************************************************/
     10          #include "common.h"
     11          #include "llwu.h"
     12          
     13          /******************************************************************************
     14           * data type definitions                                                      *
     15           ******************************************************************************/

   \                                 In section .bss, align 4
     16          static LLWU_CALLBACK pCallbackLLWU=NULL;
   \                     pCallbackLLWU:
   \   00000000                      DS8 4
     17          
     18          /******************************************************************************
     19           * interrupt function prototypes                                              *
     20           ******************************************************************************/
     21          void llwu_isr (void);
     22          
     23          /******************************************************************************
     24           * Public function definitions                                                *
     25           ******************************************************************************/
     26          #pragma diag_suppress=Pa082

   \                                 In section .text, align 2, keep-with-next
     27          void LLWU_Init (tLLWU llwu, uint8 ip, LLWU_CALLBACK pCallback)
     28          {
   \                     LLWU_Init: (+1)
   \   00000000   0xB081             SUB      SP,SP,#+4
   \   00000002   0xB403             PUSH     {R0,R1}
     29            if (pCallback != NULL) { pCallbackLLWU = pCallback; NVIC_SetIsr(INT_LLWU,ip); }
   \   00000004   0x0018             MOVS     R0,R3
   \   00000006   0xD011             BEQ      ??LLWU_Init_0
   \   00000008   0x....             LDR      R0,??DataTable1
   \   0000000A   0x6003             STR      R3,[R0, #+0]
   \   0000000C   0x2080             MOVS     R0,#+128
   \   0000000E   0x0140             LSLS     R0,R0,#+5        ;; #+4096
   \   00000010   0x....             LDR      R1,??DataTable1_1  ;; 0xe000e280
   \   00000012   0x680B             LDR      R3,[R1, #+0]
   \   00000014   0x4303             ORRS     R3,R3,R0
   \   00000016   0x600B             STR      R3,[R1, #+0]
   \   00000018   0x....             LDR      R1,??DataTable1_2  ;; 0xe000e100
   \   0000001A   0x680B             LDR      R3,[R1, #+0]
   \   0000001C   0x4318             ORRS     R0,R0,R3
   \   0000001E   0x6008             STR      R0,[R1, #+0]
   \   00000020   0x....             LDR      R0,??DataTable1_3  ;; 0xe000e40c
   \   00000022   0x6801             LDR      R1,[R0, #+0]
   \   00000024   0x0612             LSLS     R2,R2,#+24
   \   00000026   0x0C92             LSRS     R2,R2,#+18
   \   00000028   0x430A             ORRS     R2,R2,R1
   \   0000002A   0x6002             STR      R2,[R0, #+0]
     30            LLWU_PE1    = llwu.PE1;
   \                     ??LLWU_Init_0: (+1)
   \   0000002C   0x....             LDR      R0,??DataTable1_4  ;; 0x4007c000
   \   0000002E   0x4669             MOV      R1,SP
   \   00000030   0x7809             LDRB     R1,[R1, #+0]
   \   00000032   0x7001             STRB     R1,[R0, #+0]
     31            LLWU_PE2    = llwu.PE2;
   \   00000034   0x4669             MOV      R1,SP
   \   00000036   0x7849             LDRB     R1,[R1, #+1]
   \   00000038   0x7041             STRB     R1,[R0, #+1]
     32            LLWU_PE3    = llwu.PE3;
   \   0000003A   0x4669             MOV      R1,SP
   \   0000003C   0x7889             LDRB     R1,[R1, #+2]
   \   0000003E   0x7081             STRB     R1,[R0, #+2]
     33            LLWU_PE4    = llwu.PE4;
   \   00000040   0x4669             MOV      R1,SP
   \   00000042   0x78C9             LDRB     R1,[R1, #+3]
   \   00000044   0x70C1             STRB     R1,[R0, #+3]
     34            LLWU_ME     = llwu.ME;
   \   00000046   0x4669             MOV      R1,SP
   \   00000048   0x7909             LDRB     R1,[R1, #+4]
   \   0000004A   0x7101             STRB     R1,[R0, #+4]
     35            LLWU_FILT1  = llwu.FILT1;
   \   0000004C   0x4669             MOV      R1,SP
   \   0000004E   0x7949             LDRB     R1,[R1, #+5]
   \   00000050   0x7201             STRB     R1,[R0, #+8]
     36            LLWU_FILT2  = llwu.FILT2;
   \   00000052   0x4669             MOV      R1,SP
   \   00000054   0x7989             LDRB     R1,[R1, #+6]
   \   00000056   0x7241             STRB     R1,[R0, #+9]
     37            
     38            /* clear flags                                                              */
     39            LLWU_F1    = LLWU_F1;
   \   00000058   0x7941             LDRB     R1,[R0, #+5]
   \   0000005A   0x7141             STRB     R1,[R0, #+5]
     40            LLWU_F2    = LLWU_F2;
   \   0000005C   0x7981             LDRB     R1,[R0, #+6]
   \   0000005E   0x7181             STRB     R1,[R0, #+6]
     41            LLWU_FILT1 = LLWU_FILT1;
   \   00000060   0x7A01             LDRB     R1,[R0, #+8]
   \   00000062   0x7201             STRB     R1,[R0, #+8]
     42            LLWU_FILT2 = LLWU_FILT2;
   \   00000064   0x7A41             LDRB     R1,[R0, #+9]
   \   00000066   0x7241             STRB     R1,[R0, #+9]
     43          }
   \   00000068   0xB003             ADD      SP,SP,#+12
   \   0000006A   0x4770             BX       LR               ;; return
     44          
     45          /******************************************************************************
     46           * interrupt functions definitions                                            *
     47           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     48          void llwu_isr (void) 
     49          { 
   \                     llwu_isr: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
     50            register uint32 tmp = ((uint32)(LLWU_FILT2&0x7f)<<18) |
     51                                  ((uint32)(LLWU_FILT1&0x7f)<<17) |
     52                                  ((uint32)LLWU_F3          <<16) | 
     53                                  ((uint32)LLWU_F2          << 8) | 
     54                                  (uint32)LLWU_F1;
   \   00000002   0x....             LDR      R1,??DataTable1_5  ;; 0x4007c005
   \   00000004   0x790A             LDRB     R2,[R1, #+4]
   \   00000006   0x78CB             LDRB     R3,[R1, #+3]
   \   00000008   0x788C             LDRB     R4,[R1, #+2]
   \   0000000A   0x7848             LDRB     R0,[R1, #+1]
   \   0000000C   0x257F             MOVS     R5,#+127
   \   0000000E   0x402A             ANDS     R2,R2,R5
   \   00000010   0x0492             LSLS     R2,R2,#+18
   \   00000012   0x401D             ANDS     R5,R5,R3
   \   00000014   0x046B             LSLS     R3,R5,#+17
   \   00000016   0x4313             ORRS     R3,R3,R2
   \   00000018   0x0422             LSLS     R2,R4,#+16
   \   0000001A   0x431A             ORRS     R2,R2,R3
   \   0000001C   0x0203             LSLS     R3,R0,#+8
   \   0000001E   0x4313             ORRS     R3,R3,R2
   \   00000020   0x7808             LDRB     R0,[R1, #+0]
   \   00000022   0x4318             ORRS     R0,R0,R3
     55            /* clear flags                                                              */
     56            LLWU_F1     = LLWU_F1;
   \   00000024   0x780A             LDRB     R2,[R1, #+0]
   \   00000026   0x700A             STRB     R2,[R1, #+0]
     57            LLWU_F2     = LLWU_F2;
   \   00000028   0x784A             LDRB     R2,[R1, #+1]
   \   0000002A   0x704A             STRB     R2,[R1, #+1]
     58            LLWU_FILT1  = LLWU_FILT1;
   \   0000002C   0x78CA             LDRB     R2,[R1, #+3]
   \   0000002E   0x70CA             STRB     R2,[R1, #+3]
     59            LLWU_FILT2  = LLWU_FILT2;
   \   00000030   0x790A             LDRB     R2,[R1, #+4]
   \   00000032   0x710A             STRB     R2,[R1, #+4]
     60            
     61            /* call callback function                                                   */
     62            if (pCallbackLLWU != (LLWU_CALLBACK)NULL) { pCallbackLLWU (tmp); }
   \   00000034   0x....             LDR      R1,??DataTable1
   \   00000036   0x6809             LDR      R1,[R1, #+0]
   \   00000038   0x000A             MOVS     R2,R1
   \   0000003A   0xD000             BEQ      ??llwu_isr_0
   \   0000003C   0x4788             BLX      R1
     63          }
   \                     ??llwu_isr_0: (+1)
   \   0000003E   0xBD31             POP      {R0,R4,R5,PC}    ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x........         DC32     pCallbackLLWU

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0xE000E280         DC32     0xe000e280

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   0xE000E100         DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \   00000000   0xE000E40C         DC32     0xe000e40c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_4:
   \   00000000   0x4007C000         DC32     0x4007c000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_5:
   \   00000000   0x4007C005         DC32     0x4007c005
     64          /******************************************************************************
     65           * End of module                                                              *
     66           ******************************************************************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      12   LLWU_Init
      16   llwu_isr
        16   -- Indirect call


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_2
       4  ??DataTable1_3
       4  ??DataTable1_4
       4  ??DataTable1_5
     108  LLWU_Init
      64  llwu_isr
       4  pCallbackLLWU

 
   4 bytes in section .bss
 196 bytes in section .text
 
 196 bytes of CODE memory
   4 bytes of DATA memory

Errors: none
Warnings: none
