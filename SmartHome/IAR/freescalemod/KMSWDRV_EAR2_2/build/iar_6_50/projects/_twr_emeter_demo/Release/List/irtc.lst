###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.1.6676/W32 for ARM        30/Jan/2016  15:22:32
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\src\drivers\irtc\irtc.c
#    Command line =  
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\src\drivers\irtc\irtc.c
#        -D NDEBUG -lCN
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\Release\List\
#        -o
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\Release\Obj\
#        --debug --endian=little --cpu=Cortex-M0+ --no_mem_idioms -e --fpu=None
#        --dlib_config "D:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\..\..\..\..\build\iar_6_50\fraclib\
#        -I
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\..\..\..\..\build\iar_6_50\meterlib\
#        -I
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\..\..\..\..\src\fraclib\
#        -I
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\..\..\..\..\src\meterlib\
#        -I
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\..\..\..\..\src\common\
#        -I
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\..\..\..\..\src\drivers\
#        -I
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\..\..\..\..\src\freemaster\
#        -I
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\..\..\..\..\src\projects\_twr_emeter_demo\
#        -Oh --require_prototypes
#    List file    =  
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\Release\List\irtc.lst
#    Object file  =  
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\Release\Obj\irtc.o
#
###############################################################################

E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\src\drivers\irtc\irtc.c
      1          /*****************************************************************************
      2           * (c) Copyright 2010-2013, Freescale Semiconductor Inc.
      3           * ALL RIGHTS RESERVED.
      4           ***************************************************************************//*!
      5           * @file      irtc.c
      6           * @version   1.0.5.0
      7           * @date      Jun-08-2013
      8           * @brief     IRTC Real Time Clock (IRTC) driver source code.
      9           ******************************************************************************/
     10          #include "common.h"
     11          #include "irtc.h"
     12          
     13          /******************************************************************************
     14           * data type definitions                                                      *
     15           ******************************************************************************/
     16          #if defined (__ICCARM__)    /* IAR                                            */

   \                                 In section .bss, at 0x40051000
     17            volatile uint8_t IRTC_BbRam[32] @0x40051000u;                          
   \                     IRTC_BbRam:
   \   00000000                      DS8 32
     18          #elif defined(__GNUC__)     /* CW GCC                                         */
     19            volatile uint8_t __attribute__((section (".RtcRamSection"))) IRTC_BbRam[32];  
     20          #endif
     21            
     22          static IRTC_CALLBACK pCallbackIRTC=NULL;
     23          
     24          /******************************************************************************
     25           * interrupt functions prototype                                              *
     26           ******************************************************************************/
     27          void IRTC_isr (void);
     28          
     29          /******************************************************************************
     30           * Public functions definitions                                               *  
     31           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     32          void IRTC_InstallCallback (uint8 ip, IRTC_CALLBACK pCallback)
     33          {
     34            if (pCallback != NULL) { pCallbackIRTC = pCallback; NVIC_SetIsr(INT_RTC,ip); }
   \                     IRTC_InstallCallback: (+1)
   \   00000000   0x000A             MOVS     R2,R1
   \   00000002   0xD010             BEQ      ??IRTC_InstallCallback_0
   \   00000004   0x....             LDR      R2,??DataTable1
   \   00000006   0x6091             STR      R1,[R2, #+8]
   \   00000008   0x2180             MOVS     R1,#+128
   \   0000000A   0x0489             LSLS     R1,R1,#+18       ;; #+33554432
   \   0000000C   0x....             LDR      R2,??DataTable1_1  ;; 0xe000e280
   \   0000000E   0x6813             LDR      R3,[R2, #+0]
   \   00000010   0x430B             ORRS     R3,R3,R1
   \   00000012   0x6013             STR      R3,[R2, #+0]
   \   00000014   0x....             LDR      R2,??DataTable1_2  ;; 0xe000e100
   \   00000016   0x6813             LDR      R3,[R2, #+0]
   \   00000018   0x4319             ORRS     R1,R1,R3
   \   0000001A   0x6011             STR      R1,[R2, #+0]
   \   0000001C   0x....             LDR      R1,??DataTable1_3  ;; 0xe000e418
   \   0000001E   0x680A             LDR      R2,[R1, #+0]
   \   00000020   0x0380             LSLS     R0,R0,#+14
   \   00000022   0x4310             ORRS     R0,R0,R2
   \   00000024   0x6008             STR      R0,[R1, #+0]
     35          }
   \                     ??IRTC_InstallCallback_0: (+1)
   \   00000026   0x4770             BX       LR               ;; return
     36          

   \                                 In section .text, align 2, keep-with-next
     37          void IRTC_Init (tIRTC irtc, tTAMPER t0, tTAMPER t1, tTAMPER t2, uint32 mask)
     38          {
   \                     IRTC_Init: (+1)
   \   00000000   0xB4F8             PUSH     {R3-R7}
   \   00000002   0xB40F             PUSH     {R0-R3}
   \   00000004   0x....             LDR      R1,??DataTable1_4  ;; 0x40050010
   \   00000006   0xE001             B        ??IRTC_Init_0
     39            register uint16 tmp;
     40            
     41            IRTC_LockUnlock();
   \                     ??IRTC_Init_1: (+1)
   \   00000008   0x2080             MOVS     R0,#+128
   \   0000000A   0x7088             STRB     R0,[R1, #+2]
   \                     ??IRTC_Init_0: (+1)
   \   0000000C   0x2002             MOVS     R0,#+2
   \   0000000E   0x884A             LDRH     R2,[R1, #+2]
   \   00000010   0x2302             MOVS     R3,#+2
   \   00000012   0x421A             TST      R2,R3
   \   00000014   0xD0F8             BEQ      ??IRTC_Init_1
   \                     ??IRTC_Init_2: (+1)
   \   00000016   0x884A             LDRH     R2,[R1, #+2]
   \   00000018   0x421A             TST      R2,R3
   \   0000001A   0xD008             BEQ      ??IRTC_Init_3
   \   0000001C   0x2200             MOVS     R2,#+0
   \   0000001E   0x708A             STRB     R2,[R1, #+2]
   \   00000020   0x2240             MOVS     R2,#+64
   \   00000022   0x708A             STRB     R2,[R1, #+2]
   \   00000024   0x22C0             MOVS     R2,#+192
   \   00000026   0x708A             STRB     R2,[R1, #+2]
   \   00000028   0x2280             MOVS     R2,#+128
   \   0000002A   0x708A             STRB     R2,[R1, #+2]
   \   0000002C   0xE7F3             B        ??IRTC_Init_2
     42              
     43            /* setting common registers                                                 */
     44            /* disable and don't support at all TAMPER3 (battery removal) interrupt     */ 
     45            RTC_TAMPER_SCR    &=~0x0008;    
   \                     ??IRTC_Init_3: (+1)
   \   0000002E   0x8C4A             LDRH     R2,[R1, #+34]
   \   00000030   0x....             LDR      R3,??DataTable1_5  ;; 0xfff7
   \   00000032   0x4013             ANDS     R3,R3,R2
   \   00000034   0x844B             STRH     R3,[R1, #+34]
     46            RTC_TAMPER_SCR    |= 0x0f08;    /* clear all tamper pin flags               */
   \   00000036   0x8C4A             LDRH     R2,[R1, #+34]
   \   00000038   0x....             LDR      R3,??DataTable1_6  ;; 0xf08
   \   0000003A   0x4313             ORRS     R3,R3,R2
   \   0000003C   0x844B             STRH     R3,[R1, #+34]
     47            RTC_ISR            = 0xffff;    /* clear all IRTC module interrupt flags    */
   \   0000003E   0x....             LDR      R2,??DataTable1_7  ;; 0xffff
   \   00000040   0x808A             STRH     R2,[R1, #+4]
     48            IRTC_DisableIsr(IRTC_ALL_MASK); /* disable all supported interrupts         */
   \   00000042   0x2302             MOVS     R3,#+2
   \   00000044   0xE001             B        ??IRTC_Init_4
   \                     ??IRTC_Init_5: (+1)
   \   00000046   0x2280             MOVS     R2,#+128
   \   00000048   0x708A             STRB     R2,[R1, #+2]
   \                     ??IRTC_Init_4: (+1)
   \   0000004A   0x884A             LDRH     R2,[R1, #+2]
   \   0000004C   0x421A             TST      R2,R3
   \   0000004E   0xD0FA             BEQ      ??IRTC_Init_5
   \                     ??IRTC_Init_6: (+1)
   \   00000050   0x2200             MOVS     R2,#+0
   \   00000052   0x884B             LDRH     R3,[R1, #+2]
   \   00000054   0x4203             TST      R3,R0
   \   00000056   0xD007             BEQ      ??IRTC_Init_7
   \   00000058   0x708A             STRB     R2,[R1, #+2]
   \   0000005A   0x2240             MOVS     R2,#+64
   \   0000005C   0x708A             STRB     R2,[R1, #+2]
   \   0000005E   0x22C0             MOVS     R2,#+192
   \   00000060   0x708A             STRB     R2,[R1, #+2]
   \   00000062   0x2280             MOVS     R2,#+128
   \   00000064   0x708A             STRB     R2,[R1, #+2]
   \   00000066   0xE7F3             B        ??IRTC_Init_6
   \                     ??IRTC_Init_7: (+1)
   \   00000068   0x....             LDR      R3,??DataTable1_8  ;; 0x44050016
   \   0000006A   0x....             LDR      R4,??DataTable1_9  ;; 0xfff8
   \   0000006C   0x839C             STRH     R4,[R3, #+28]
   \   0000006E   0x8018             STRH     R0,[R3, #+0]
     49            IRTC_EnableIsr (mask);          /* enable only selected interrupts          */
   \   00000070   0x2400             MOVS     R4,#+0
   \   00000072   0x2500             MOVS     R5,#+0
   \   00000074   0x2602             MOVS     R6,#+2
   \   00000076   0xE001             B        ??IRTC_Init_8
   \                     ??IRTC_Init_9: (+1)
   \   00000078   0x2380             MOVS     R3,#+128
   \   0000007A   0x708B             STRB     R3,[R1, #+2]
   \                     ??IRTC_Init_8: (+1)
   \   0000007C   0x884B             LDRH     R3,[R1, #+2]
   \   0000007E   0x4233             TST      R3,R6
   \   00000080   0xD0FA             BEQ      ??IRTC_Init_9
   \                     ??IRTC_Init_10: (+1)
   \   00000082   0x884B             LDRH     R3,[R1, #+2]
   \   00000084   0x4233             TST      R3,R6
   \   00000086   0xD007             BEQ      ??IRTC_Init_11
   \   00000088   0x708A             STRB     R2,[R1, #+2]
   \   0000008A   0x2340             MOVS     R3,#+64
   \   0000008C   0x708B             STRB     R3,[R1, #+2]
   \   0000008E   0x23C0             MOVS     R3,#+192
   \   00000090   0x708B             STRB     R3,[R1, #+2]
   \   00000092   0x2380             MOVS     R3,#+128
   \   00000094   0x708B             STRB     R3,[R1, #+2]
   \   00000096   0xE7F4             B        ??IRTC_Init_10
   \                     ??IRTC_Init_11: (+1)
   \   00000098   0x2201             MOVS     R2,#+1
   \   0000009A   0x9B0A             LDR      R3,[SP, #+40]
   \   0000009C   0x4213             TST      R3,R2
   \   0000009E   0xD000             BEQ      ??IRTC_Init_12
   \   000000A0   0x2401             MOVS     R4,#+1
   \                     ??IRTC_Init_12: (+1)
   \   000000A2   0x4203             TST      R3,R0
   \   000000A4   0xD001             BEQ      ??IRTC_Init_13
   \   000000A6   0x4320             ORRS     R0,R0,R4
   \   000000A8   0x0004             MOVS     R4,R0
   \                     ??IRTC_Init_13: (+1)
   \   000000AA   0x2604             MOVS     R6,#+4
   \   000000AC   0x4233             TST      R3,R6
   \   000000AE   0xD000             BEQ      ??IRTC_Init_14
   \   000000B0   0x4334             ORRS     R4,R4,R6
   \                     ??IRTC_Init_14: (+1)
   \   000000B2   0x0758             LSLS     R0,R3,#+29
   \   000000B4   0xD000             BEQ      ??IRTC_Init_15
   \   000000B6   0x2501             MOVS     R5,#+1
   \                     ??IRTC_Init_15: (+1)
   \   000000B8   0x2010             MOVS     R0,#+16
   \   000000BA   0x4203             TST      R3,R0
   \   000000BC   0xD002             BEQ      ??IRTC_Init_16
   \   000000BE   0x002F             MOVS     R7,R5
   \   000000C0   0x2504             MOVS     R5,#+4
   \   000000C2   0x433D             ORRS     R5,R5,R7
   \                     ??IRTC_Init_16: (+1)
   \   000000C4   0x2620             MOVS     R6,#+32
   \   000000C6   0x4233             TST      R3,R6
   \   000000C8   0xD002             BEQ      ??IRTC_Init_17
   \   000000CA   0x002F             MOVS     R7,R5
   \   000000CC   0x2508             MOVS     R5,#+8
   \   000000CE   0x433D             ORRS     R5,R5,R7
   \                     ??IRTC_Init_17: (+1)
   \   000000D0   0x2740             MOVS     R7,#+64
   \   000000D2   0x423B             TST      R3,R7
   \   000000D4   0xD002             BEQ      ??IRTC_Init_18
   \   000000D6   0x4628             MOV      R0,R5
   \   000000D8   0x2510             MOVS     R5,#+16
   \   000000DA   0x4305             ORRS     R5,R5,R0
   \                     ??IRTC_Init_18: (+1)
   \   000000DC   0x2080             MOVS     R0,#+128
   \   000000DE   0x4203             TST      R3,R0
   \   000000E0   0xD002             BEQ      ??IRTC_Init_19
   \   000000E2   0x462E             MOV      R6,R5
   \   000000E4   0x2520             MOVS     R5,#+32
   \   000000E6   0x4335             ORRS     R5,R5,R6
   \                     ??IRTC_Init_19: (+1)
   \   000000E8   0x0046             LSLS     R6,R0,#+1
   \   000000EA   0x4233             TST      R3,R6
   \   000000EC   0xD002             BEQ      ??IRTC_Init_20
   \   000000EE   0x462F             MOV      R7,R5
   \   000000F0   0x2540             MOVS     R5,#+64
   \   000000F2   0x433D             ORRS     R5,R5,R7
   \                     ??IRTC_Init_20: (+1)
   \   000000F4   0x0087             LSLS     R7,R0,#+2
   \   000000F6   0x423B             TST      R3,R7
   \   000000F8   0xD002             BEQ      ??IRTC_Init_21
   \   000000FA   0x4628             MOV      R0,R5
   \   000000FC   0x2580             MOVS     R5,#+128
   \   000000FE   0x4305             ORRS     R5,R5,R0
   \                     ??IRTC_Init_21: (+1)
   \   00000100   0x0D08             LSRS     R0,R1,#+20
   \   00000102   0x4203             TST      R3,R0
   \   00000104   0xD003             BEQ      ??IRTC_Init_22
   \   00000106   0x46AC             MOV      R12,R5
   \   00000108   0x0035             MOVS     R5,R6
   \   0000010A   0x4666             MOV      R6,R12
   \   0000010C   0x4335             ORRS     R5,R5,R6
   \                     ??IRTC_Init_22: (+1)
   \   0000010E   0x0046             LSLS     R6,R0,#+1
   \   00000110   0x4233             TST      R3,R6
   \   00000112   0xD003             BEQ      ??IRTC_Init_23
   \   00000114   0x46AC             MOV      R12,R5
   \   00000116   0x003D             MOVS     R5,R7
   \   00000118   0x4667             MOV      R7,R12
   \   0000011A   0x433D             ORRS     R5,R5,R7
   \                     ??IRTC_Init_23: (+1)
   \   0000011C   0x0087             LSLS     R7,R0,#+2
   \   0000011E   0x423B             TST      R3,R7
   \   00000120   0xD003             BEQ      ??IRTC_Init_24
   \   00000122   0x46AC             MOV      R12,R5
   \   00000124   0x0005             MOVS     R5,R0
   \   00000126   0x4660             MOV      R0,R12
   \   00000128   0x4305             ORRS     R5,R5,R0
   \                     ??IRTC_Init_24: (+1)
   \   0000012A   0x0350             LSLS     R0,R2,#+13
   \   0000012C   0x4203             TST      R3,R0
   \   0000012E   0xD003             BEQ      ??IRTC_Init_25
   \   00000130   0x46AC             MOV      R12,R5
   \   00000132   0x0035             MOVS     R5,R6
   \   00000134   0x4666             MOV      R6,R12
   \   00000136   0x4335             ORRS     R5,R5,R6
   \                     ??IRTC_Init_25: (+1)
   \   00000138   0x0046             LSLS     R6,R0,#+1
   \   0000013A   0x4233             TST      R3,R6
   \   0000013C   0xD003             BEQ      ??IRTC_Init_26
   \   0000013E   0x46AC             MOV      R12,R5
   \   00000140   0x003D             MOVS     R5,R7
   \   00000142   0x4667             MOV      R7,R12
   \   00000144   0x433D             ORRS     R5,R5,R7
   \                     ??IRTC_Init_26: (+1)
   \   00000146   0x0087             LSLS     R7,R0,#+2
   \   00000148   0x423B             TST      R3,R7
   \   0000014A   0xD003             BEQ      ??IRTC_Init_27
   \   0000014C   0x46AC             MOV      R12,R5
   \   0000014E   0x0005             MOVS     R5,R0
   \   00000150   0x4660             MOV      R0,R12
   \   00000152   0x4305             ORRS     R5,R5,R0
   \                     ??IRTC_Init_27: (+1)
   \   00000154   0x03D8             LSLS     R0,R3,#+15
   \   00000156   0xD502             BPL      ??IRTC_Init_28
   \   00000158   0x0028             MOVS     R0,R5
   \   0000015A   0x0035             MOVS     R5,R6
   \   0000015C   0x4305             ORRS     R5,R5,R0
   \                     ??IRTC_Init_28: (+1)
   \   0000015E   0x0398             LSLS     R0,R3,#+14
   \   00000160   0xD502             BPL      ??IRTC_Init_29
   \   00000162   0x0028             MOVS     R0,R5
   \   00000164   0x003D             MOVS     R5,R7
   \   00000166   0x4305             ORRS     R5,R5,R0
   \                     ??IRTC_Init_29: (+1)
   \   00000168   0x....             LDR      R0,??DataTable2  ;; 0x48050016
   \   0000016A   0x8384             STRH     R4,[R0, #+28]
   \   0000016C   0x8005             STRH     R5,[R0, #+0]
     50            RTC_CTRL           =  irtc.CTRL;
   \   0000016E   0x4668             MOV      R0,SP
   \   00000170   0x8800             LDRH     R0,[R0, #+0]
   \   00000172   0x8008             STRH     R0,[R1, #+0]
     51            RTC_COMPEN         =  irtc.COMPEN;
   \   00000174   0x4668             MOV      R0,SP
   \   00000176   0x8840             LDRH     R0,[R0, #+2]
   \   00000178   0x8308             STRH     R0,[R1, #+24]
     52            RTC_TAMPER_QSCR    =  irtc.QSCR; 
   \   0000017A   0x4668             MOV      R0,SP
   \   0000017C   0x8880             LDRH     R0,[R0, #+4]
   \   0000017E   0x83C8             STRH     R0,[R1, #+30]
     53             
     54            /* tamper 0 pin setting - used as the tamper pin                            */
     55            RTC_CTRL2 &= ~RTC_CTRL2_WAKEUP_MODE_MASK;
   \   00000180   0x8E48             LDRH     R0,[R1, #+50]
   \   00000182   0x....             LDR      R3,??DataTable2_1  ;; 0xff7f
   \   00000184   0x4003             ANDS     R3,R3,R0
   \   00000186   0x864B             STRH     R3,[R1, #+50]
     56            tmp  = RTC_TAMPER_DIRECTION_A_P_TAMP(TAMPER0_PIN)|
     57                   RTC_TAMPER_DIRECTION_I_O_TAMP(TAMPER0_PIN); 
     58            RTC_TAMPER_DIRECTION  = (t0.DIRECTION & tmp);
   \   00000188   0x4668             MOV      R0,SP
   \   0000018A   0x8900             LDRH     R0,[R0, #+8]
   \   0000018C   0x23FF             MOVS     R3,#+255
   \   0000018E   0x1C9B             ADDS     R3,R3,#+2        ;; #+257
   \   00000190   0x4003             ANDS     R3,R3,R0
   \   00000192   0x838B             STRH     R3,[R1, #+28]
     59            tmp  = RTC_FILTER01_CFG_POL0_MASK|RTC_FILTER01_CFG_CLK_SEL0_MASK|
     60                   RTC_FILTER01_CFG_FIL_DUR0_MASK;
     61            RTC_FILTER01_CFG      = ((uint16)(t0.FILTER_CFG<<8) & tmp);
   \   00000194   0xA802             ADD      R0,SP,#+8
   \   00000196   0x8840             LDRH     R0,[R0, #+2]
   \   00000198   0x0200             LSLS     R0,R0,#+8
   \   0000019A   0x8488             STRH     R0,[R1, #+36]
     62              
     63            /* tamper 1 pin setting                                                     */
     64            tmp  = RTC_TAMPER_DIRECTION_A_P_TAMP(TAMPER1_PIN)|
     65                   RTC_TAMPER_DIRECTION_I_O_TAMP(TAMPER1_PIN); 
     66            RTC_TAMPER_DIRECTION |= (t1.DIRECTION & tmp);
   \   0000019C   0x8B88             LDRH     R0,[R1, #+28]
   \   0000019E   0x466B             MOV      R3,SP
   \   000001A0   0x899B             LDRH     R3,[R3, #+12]
   \   000001A2   0x....             LDR      R4,??DataTable2_2  ;; 0x202
   \   000001A4   0x401C             ANDS     R4,R4,R3
   \   000001A6   0x4304             ORRS     R4,R4,R0
   \   000001A8   0x838C             STRH     R4,[R1, #+28]
     67            tmp  = RTC_FILTER01_CFG_POL1_MASK|RTC_FILTER01_CFG_CLK_SEL1_MASK|
     68                   RTC_FILTER01_CFG_FIL_DUR1_MASK;
     69            RTC_FILTER01_CFG     |= (t1.FILTER_CFG & tmp);
   \   000001AA   0x8C88             LDRH     R0,[R1, #+36]
   \   000001AC   0xAB03             ADD      R3,SP,#+12
   \   000001AE   0x789B             LDRB     R3,[R3, #+2]
   \   000001B0   0x4303             ORRS     R3,R3,R0
   \   000001B2   0x848B             STRH     R3,[R1, #+36]
     70          
     71            /* tamper 2 pin setting                                                     */
     72            tmp  = RTC_TAMPER_DIRECTION_A_P_TAMP(TAMPER2_PIN)|
     73                   RTC_TAMPER_DIRECTION_I_O_TAMP(TAMPER2_PIN); 
     74            RTC_TAMPER_DIRECTION |= (t2.DIRECTION & tmp);
   \   000001B4   0x8B88             LDRH     R0,[R1, #+28]
   \   000001B6   0x466B             MOV      R3,SP
   \   000001B8   0x8C9B             LDRH     R3,[R3, #+36]
   \   000001BA   0x....             LDR      R4,??DataTable3  ;; 0x404
   \   000001BC   0x401C             ANDS     R4,R4,R3
   \   000001BE   0x4304             ORRS     R4,R4,R0
   \   000001C0   0x838C             STRH     R4,[R1, #+28]
     75            tmp  = RTC_FILTER2_CFG_POL2_MASK|RTC_FILTER2_CFG_CLK_SEL2_MASK|
     76                   RTC_FILTER2_CFG_FIL_DUR2_MASK;
     77            RTC_FILTER2_CFG       = ((uint16)(t2.FILTER_CFG<<8) & tmp);
   \   000001C2   0xA809             ADD      R0,SP,#+36
   \   000001C4   0x....             B.N      ?Subroutine0
     78            
     79            /* enable tamper filter processing                                          */ 
     80            RTC_CTRL2 |= RTC_CTRL2_TAMP_CFG_OVER_MASK; 
     81          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \   00000000   0x8840             LDRH     R0,[R0, #+2]
   \   00000002   0x0200             LSLS     R0,R0,#+8
   \   00000004   0x84C8             STRH     R0,[R1, #+38]
   \   00000006   0x8E48             LDRH     R0,[R1, #+50]
   \   00000008   0x4302             ORRS     R2,R2,R0
   \   0000000A   0x864A             STRH     R2,[R1, #+50]
   \   0000000C   0xB005             ADD      SP,SP,#+20
   \   0000000E   0xBCF0             POP      {R4-R7}
   \   00000010   0x4770             BX       LR               ;; return
     82          

   \                                 In section .text, align 2, keep-with-next
     83          void IRTC_WkupInit (tIRTC irtc, tTAMPER t1, tTAMPER t2, uint32 mask)
     84          {
   \                     IRTC_WkupInit: (+1)
   \   00000000   0xB4F8             PUSH     {R3-R7}
   \   00000002   0xB40F             PUSH     {R0-R3}
   \   00000004   0x....             LDR      R1,??DataTable3_1  ;; 0x40050010
   \   00000006   0xE001             B        ??IRTC_WkupInit_0
     85            register uint16 tmp;
     86            
     87            IRTC_LockUnlock();
   \                     ??IRTC_WkupInit_1: (+1)
   \   00000008   0x2080             MOVS     R0,#+128
   \   0000000A   0x7088             STRB     R0,[R1, #+2]
   \                     ??IRTC_WkupInit_0: (+1)
   \   0000000C   0x2002             MOVS     R0,#+2
   \   0000000E   0x884A             LDRH     R2,[R1, #+2]
   \   00000010   0x2302             MOVS     R3,#+2
   \   00000012   0x421A             TST      R2,R3
   \   00000014   0xD0F8             BEQ      ??IRTC_WkupInit_1
   \                     ??IRTC_WkupInit_2: (+1)
   \   00000016   0x884A             LDRH     R2,[R1, #+2]
   \   00000018   0x421A             TST      R2,R3
   \   0000001A   0xD008             BEQ      ??IRTC_WkupInit_3
   \   0000001C   0x2200             MOVS     R2,#+0
   \   0000001E   0x708A             STRB     R2,[R1, #+2]
   \   00000020   0x2240             MOVS     R2,#+64
   \   00000022   0x708A             STRB     R2,[R1, #+2]
   \   00000024   0x22C0             MOVS     R2,#+192
   \   00000026   0x708A             STRB     R2,[R1, #+2]
   \   00000028   0x2280             MOVS     R2,#+128
   \   0000002A   0x708A             STRB     R2,[R1, #+2]
   \   0000002C   0xE7F3             B        ??IRTC_WkupInit_2
     88              
     89            /* setting common registers                                                 */
     90            /* disable and don't support at all TAMPER3 (battery removal) interrupt     */ 
     91            RTC_TAMPER_SCR    &=~0x0008;    
   \                     ??IRTC_WkupInit_3: (+1)
   \   0000002E   0x8C4A             LDRH     R2,[R1, #+34]
   \   00000030   0x....             LDR      R3,??DataTable3_2  ;; 0xfff7
   \   00000032   0x4013             ANDS     R3,R3,R2
   \   00000034   0x844B             STRH     R3,[R1, #+34]
     92            RTC_TAMPER_SCR    |= 0x0f08;    /* clear all tamper pin flags               */
   \   00000036   0x8C4A             LDRH     R2,[R1, #+34]
   \   00000038   0x....             LDR      R3,??DataTable3_3  ;; 0xf08
   \   0000003A   0x4313             ORRS     R3,R3,R2
   \   0000003C   0x844B             STRH     R3,[R1, #+34]
     93            RTC_ISR            = 0xffff;    /* clear all IRTC module interrupt flags    */
   \   0000003E   0x....             LDR      R2,??DataTable4  ;; 0xffff
   \   00000040   0x808A             STRH     R2,[R1, #+4]
     94            IRTC_DisableIsr(IRTC_ALL_MASK); /* disable all supported interrupts         */
   \   00000042   0x2302             MOVS     R3,#+2
   \   00000044   0xE001             B        ??IRTC_WkupInit_4
   \                     ??IRTC_WkupInit_5: (+1)
   \   00000046   0x2280             MOVS     R2,#+128
   \   00000048   0x708A             STRB     R2,[R1, #+2]
   \                     ??IRTC_WkupInit_4: (+1)
   \   0000004A   0x884A             LDRH     R2,[R1, #+2]
   \   0000004C   0x421A             TST      R2,R3
   \   0000004E   0xD0FA             BEQ      ??IRTC_WkupInit_5
   \                     ??IRTC_WkupInit_6: (+1)
   \   00000050   0x2200             MOVS     R2,#+0
   \   00000052   0x884B             LDRH     R3,[R1, #+2]
   \   00000054   0x4203             TST      R3,R0
   \   00000056   0xD007             BEQ      ??IRTC_WkupInit_7
   \   00000058   0x708A             STRB     R2,[R1, #+2]
   \   0000005A   0x2240             MOVS     R2,#+64
   \   0000005C   0x708A             STRB     R2,[R1, #+2]
   \   0000005E   0x22C0             MOVS     R2,#+192
   \   00000060   0x708A             STRB     R2,[R1, #+2]
   \   00000062   0x2280             MOVS     R2,#+128
   \   00000064   0x708A             STRB     R2,[R1, #+2]
   \   00000066   0xE7F3             B        ??IRTC_WkupInit_6
   \                     ??IRTC_WkupInit_7: (+1)
   \   00000068   0x....             LDR      R3,??DataTable5  ;; 0x44050016
   \   0000006A   0x....             LDR      R4,??DataTable5_1  ;; 0xfff8
   \   0000006C   0x839C             STRH     R4,[R3, #+28]
   \   0000006E   0x8018             STRH     R0,[R3, #+0]
     95            IRTC_EnableIsr (mask);          /* enable only selected interrupts          */
   \   00000070   0x2400             MOVS     R4,#+0
   \   00000072   0x2500             MOVS     R5,#+0
   \   00000074   0x2602             MOVS     R6,#+2
   \   00000076   0xE001             B        ??IRTC_WkupInit_8
   \                     ??IRTC_WkupInit_9: (+1)
   \   00000078   0x2380             MOVS     R3,#+128
   \   0000007A   0x708B             STRB     R3,[R1, #+2]
   \                     ??IRTC_WkupInit_8: (+1)
   \   0000007C   0x884B             LDRH     R3,[R1, #+2]
   \   0000007E   0x4233             TST      R3,R6
   \   00000080   0xD0FA             BEQ      ??IRTC_WkupInit_9
   \                     ??IRTC_WkupInit_10: (+1)
   \   00000082   0x884B             LDRH     R3,[R1, #+2]
   \   00000084   0x4233             TST      R3,R6
   \   00000086   0xD007             BEQ      ??IRTC_WkupInit_11
   \   00000088   0x708A             STRB     R2,[R1, #+2]
   \   0000008A   0x2340             MOVS     R3,#+64
   \   0000008C   0x708B             STRB     R3,[R1, #+2]
   \   0000008E   0x23C0             MOVS     R3,#+192
   \   00000090   0x708B             STRB     R3,[R1, #+2]
   \   00000092   0x2380             MOVS     R3,#+128
   \   00000094   0x708B             STRB     R3,[R1, #+2]
   \   00000096   0xE7F4             B        ??IRTC_WkupInit_10
   \                     ??IRTC_WkupInit_11: (+1)
   \   00000098   0x2201             MOVS     R2,#+1
   \   0000009A   0x9B09             LDR      R3,[SP, #+36]
   \   0000009C   0x4213             TST      R3,R2
   \   0000009E   0xD000             BEQ      ??IRTC_WkupInit_12
   \   000000A0   0x2401             MOVS     R4,#+1
   \                     ??IRTC_WkupInit_12: (+1)
   \   000000A2   0x4203             TST      R3,R0
   \   000000A4   0xD001             BEQ      ??IRTC_WkupInit_13
   \   000000A6   0x4320             ORRS     R0,R0,R4
   \   000000A8   0x0004             MOVS     R4,R0
   \                     ??IRTC_WkupInit_13: (+1)
   \   000000AA   0x2604             MOVS     R6,#+4
   \   000000AC   0x4233             TST      R3,R6
   \   000000AE   0xD000             BEQ      ??IRTC_WkupInit_14
   \   000000B0   0x4334             ORRS     R4,R4,R6
   \                     ??IRTC_WkupInit_14: (+1)
   \   000000B2   0x0758             LSLS     R0,R3,#+29
   \   000000B4   0xD000             BEQ      ??IRTC_WkupInit_15
   \   000000B6   0x2501             MOVS     R5,#+1
   \                     ??IRTC_WkupInit_15: (+1)
   \   000000B8   0x2010             MOVS     R0,#+16
   \   000000BA   0x4203             TST      R3,R0
   \   000000BC   0xD002             BEQ      ??IRTC_WkupInit_16
   \   000000BE   0x002F             MOVS     R7,R5
   \   000000C0   0x2504             MOVS     R5,#+4
   \   000000C2   0x433D             ORRS     R5,R5,R7
   \                     ??IRTC_WkupInit_16: (+1)
   \   000000C4   0x2620             MOVS     R6,#+32
   \   000000C6   0x4233             TST      R3,R6
   \   000000C8   0xD002             BEQ      ??IRTC_WkupInit_17
   \   000000CA   0x002F             MOVS     R7,R5
   \   000000CC   0x2508             MOVS     R5,#+8
   \   000000CE   0x433D             ORRS     R5,R5,R7
   \                     ??IRTC_WkupInit_17: (+1)
   \   000000D0   0x2740             MOVS     R7,#+64
   \   000000D2   0x423B             TST      R3,R7
   \   000000D4   0xD002             BEQ      ??IRTC_WkupInit_18
   \   000000D6   0x4628             MOV      R0,R5
   \   000000D8   0x2510             MOVS     R5,#+16
   \   000000DA   0x4305             ORRS     R5,R5,R0
   \                     ??IRTC_WkupInit_18: (+1)
   \   000000DC   0x0618             LSLS     R0,R3,#+24
   \   000000DE   0xD502             BPL      ??IRTC_WkupInit_19
   \   000000E0   0x0028             MOVS     R0,R5
   \   000000E2   0x2520             MOVS     R5,#+32
   \   000000E4   0x4305             ORRS     R5,R5,R0
   \                     ??IRTC_WkupInit_19: (+1)
   \   000000E6   0x0D8E             LSRS     R6,R1,#+22
   \   000000E8   0x4233             TST      R3,R6
   \   000000EA   0xD002             BEQ      ??IRTC_WkupInit_20
   \   000000EC   0x0028             MOVS     R0,R5
   \   000000EE   0x2540             MOVS     R5,#+64
   \   000000F0   0x4305             ORRS     R5,R5,R0
   \                     ??IRTC_WkupInit_20: (+1)
   \   000000F2   0x0D4F             LSRS     R7,R1,#+21
   \   000000F4   0x423B             TST      R3,R7
   \   000000F6   0xD002             BEQ      ??IRTC_WkupInit_21
   \   000000F8   0x0028             MOVS     R0,R5
   \   000000FA   0x2580             MOVS     R5,#+128
   \   000000FC   0x4305             ORRS     R5,R5,R0
   \                     ??IRTC_WkupInit_21: (+1)
   \   000000FE   0x0D08             LSRS     R0,R1,#+20
   \   00000100   0x4203             TST      R3,R0
   \   00000102   0xD003             BEQ      ??IRTC_WkupInit_22
   \   00000104   0x46AC             MOV      R12,R5
   \   00000106   0x0035             MOVS     R5,R6
   \   00000108   0x4666             MOV      R6,R12
   \   0000010A   0x4335             ORRS     R5,R5,R6
   \                     ??IRTC_WkupInit_22: (+1)
   \   0000010C   0x0046             LSLS     R6,R0,#+1
   \   0000010E   0x4233             TST      R3,R6
   \   00000110   0xD003             BEQ      ??IRTC_WkupInit_23
   \   00000112   0x46AC             MOV      R12,R5
   \   00000114   0x003D             MOVS     R5,R7
   \   00000116   0x4667             MOV      R7,R12
   \   00000118   0x433D             ORRS     R5,R5,R7
   \                     ??IRTC_WkupInit_23: (+1)
   \   0000011A   0x0087             LSLS     R7,R0,#+2
   \   0000011C   0x423B             TST      R3,R7
   \   0000011E   0xD003             BEQ      ??IRTC_WkupInit_24
   \   00000120   0x46AC             MOV      R12,R5
   \   00000122   0x0005             MOVS     R5,R0
   \   00000124   0x4660             MOV      R0,R12
   \   00000126   0x4305             ORRS     R5,R5,R0
   \                     ??IRTC_WkupInit_24: (+1)
   \   00000128   0x0350             LSLS     R0,R2,#+13
   \   0000012A   0x4203             TST      R3,R0
   \   0000012C   0xD003             BEQ      ??IRTC_WkupInit_25
   \   0000012E   0x46AC             MOV      R12,R5
   \   00000130   0x0035             MOVS     R5,R6
   \   00000132   0x4666             MOV      R6,R12
   \   00000134   0x4335             ORRS     R5,R5,R6
   \                     ??IRTC_WkupInit_25: (+1)
   \   00000136   0x0046             LSLS     R6,R0,#+1
   \   00000138   0x4233             TST      R3,R6
   \   0000013A   0xD003             BEQ      ??IRTC_WkupInit_26
   \   0000013C   0x46AC             MOV      R12,R5
   \   0000013E   0x003D             MOVS     R5,R7
   \   00000140   0x4667             MOV      R7,R12
   \   00000142   0x433D             ORRS     R5,R5,R7
   \                     ??IRTC_WkupInit_26: (+1)
   \   00000144   0x0087             LSLS     R7,R0,#+2
   \   00000146   0x423B             TST      R3,R7
   \   00000148   0xD003             BEQ      ??IRTC_WkupInit_27
   \   0000014A   0x46AC             MOV      R12,R5
   \   0000014C   0x0005             MOVS     R5,R0
   \   0000014E   0x4660             MOV      R0,R12
   \   00000150   0x4305             ORRS     R5,R5,R0
   \                     ??IRTC_WkupInit_27: (+1)
   \   00000152   0x03D8             LSLS     R0,R3,#+15
   \   00000154   0xD502             BPL      ??IRTC_WkupInit_28
   \   00000156   0x0028             MOVS     R0,R5
   \   00000158   0x0035             MOVS     R5,R6
   \   0000015A   0x4305             ORRS     R5,R5,R0
   \                     ??IRTC_WkupInit_28: (+1)
   \   0000015C   0x0398             LSLS     R0,R3,#+14
   \   0000015E   0xD502             BPL      ??IRTC_WkupInit_29
   \   00000160   0x0028             MOVS     R0,R5
   \   00000162   0x003D             MOVS     R5,R7
   \   00000164   0x4305             ORRS     R5,R5,R0
   \                     ??IRTC_WkupInit_29: (+1)
   \   00000166   0x....             LDR      R0,??DataTable2  ;; 0x48050016
   \   00000168   0x8384             STRH     R4,[R0, #+28]
   \   0000016A   0x8005             STRH     R5,[R0, #+0]
     96            RTC_CTRL           =  irtc.CTRL;
   \   0000016C   0x4668             MOV      R0,SP
   \   0000016E   0x8800             LDRH     R0,[R0, #+0]
   \   00000170   0x8008             STRH     R0,[R1, #+0]
     97            RTC_COMPEN         =  irtc.COMPEN;
   \   00000172   0x4668             MOV      R0,SP
   \   00000174   0x8840             LDRH     R0,[R0, #+2]
   \   00000176   0x8308             STRH     R0,[R1, #+24]
     98            RTC_TAMPER_QSCR    =  irtc.QSCR; 
   \   00000178   0x4668             MOV      R0,SP
   \   0000017A   0x8880             LDRH     R0,[R0, #+4]
   \   0000017C   0x83C8             STRH     R0,[R1, #+30]
     99             
    100            /* tamper 0 pin setting - used as the wakeup/hibernate pin                  */
    101            RTC_CTRL2 |= RTC_CTRL2_WAKEUP_MODE_MASK;
   \   0000017E   0x8E48             LDRH     R0,[R1, #+50]
   \   00000180   0x2380             MOVS     R3,#+128
   \   00000182   0x4303             ORRS     R3,R3,R0
   \   00000184   0x864B             STRH     R3,[R1, #+50]
    102          
    103            /* tamper 1 pin setting                                                     */
    104            tmp  = RTC_TAMPER_DIRECTION_A_P_TAMP(TAMPER1_PIN)|
    105                   RTC_TAMPER_DIRECTION_I_O_TAMP(TAMPER1_PIN); 
    106            RTC_TAMPER_DIRECTION |= (t1.DIRECTION & tmp);
   \   00000186   0x8B88             LDRH     R0,[R1, #+28]
   \   00000188   0x466B             MOV      R3,SP
   \   0000018A   0x891B             LDRH     R3,[R3, #+8]
   \   0000018C   0x....             LDR      R4,??DataTable2_2  ;; 0x202
   \   0000018E   0x401C             ANDS     R4,R4,R3
   \   00000190   0x4304             ORRS     R4,R4,R0
   \   00000192   0x838C             STRH     R4,[R1, #+28]
    107            tmp  = RTC_FILTER01_CFG_POL1_MASK|RTC_FILTER01_CFG_CLK_SEL1_MASK|
    108                   RTC_FILTER01_CFG_FIL_DUR1_MASK;
    109            RTC_FILTER01_CFG     |= (t1.FILTER_CFG & tmp);
   \   00000194   0x8C88             LDRH     R0,[R1, #+36]
   \   00000196   0xAB02             ADD      R3,SP,#+8
   \   00000198   0x789B             LDRB     R3,[R3, #+2]
   \   0000019A   0x4303             ORRS     R3,R3,R0
   \   0000019C   0x848B             STRH     R3,[R1, #+36]
    110          
    111            /* tamper 2 pin setting                                                     */
    112            tmp  = RTC_TAMPER_DIRECTION_A_P_TAMP(TAMPER2_PIN)|
    113                   RTC_TAMPER_DIRECTION_I_O_TAMP(TAMPER2_PIN); 
    114            RTC_TAMPER_DIRECTION |= (t2.DIRECTION & tmp);
   \   0000019E   0x8B88             LDRH     R0,[R1, #+28]
   \   000001A0   0x466B             MOV      R3,SP
   \   000001A2   0x899B             LDRH     R3,[R3, #+12]
   \   000001A4   0x....             LDR      R4,??DataTable3  ;; 0x404
   \   000001A6   0x401C             ANDS     R4,R4,R3
   \   000001A8   0x4304             ORRS     R4,R4,R0
   \   000001AA   0x838C             STRH     R4,[R1, #+28]
    115            tmp  = RTC_FILTER2_CFG_POL2_MASK|RTC_FILTER2_CFG_CLK_SEL2_MASK|
    116                   RTC_FILTER2_CFG_FIL_DUR2_MASK;
    117            RTC_FILTER2_CFG       = ((uint16)(t2.FILTER_CFG<<8) & tmp);
   \   000001AC   0xA803             ADD      R0,SP,#+12
   \   000001AE                      REQUIRE ?Subroutine0
   \   000001AE                      ;; // Fall through to label ?Subroutine0
    118            
    119            /* enable tamper filter processing                                          */ 
    120            RTC_CTRL2 |= RTC_CTRL2_TAMP_CFG_OVER_MASK; 
    121          }
    122          

   \                                 In section .text, align 2, keep-with-next
    123          void IRTC_GetClock (tTIME *ptr)
    124          {                                      
   \                     IRTC_GetClock: (+1)
   \   00000000   0xB478             PUSH     {R3-R6}
   \   00000002   0x....             LDR      R1,??DataTable5_2  ;; 0x40050000
    125            register uint16 reg_yearmon, reg_days, reg_hourmin, reg_seconds;
    126            
    127            /* read RTC registers and store their values in variables - we are loading  */
    128            /* variables by content of registers to minimize number of read operations  */
    129            while (1)
    130            {  
    131              if (RTC_STATUS & RTC_STATUS_INVAL_BIT_MASK) { continue; } 
   \                     ??IRTC_GetClock_0: (+1)
   \   00000004   0x8A4A             LDRH     R2,[R1, #+18]
   \   00000006   0x07D2             LSLS     R2,R2,#+31
   \   00000008   0xD4FC             BMI      ??IRTC_GetClock_0
    132              reg_yearmon = RTC_YEARMON;
   \   0000000A   0x880A             LDRH     R2,[R1, #+0]
    133              if (RTC_STATUS & RTC_STATUS_INVAL_BIT_MASK) { continue; }
   \   0000000C   0x8A4B             LDRH     R3,[R1, #+18]
   \   0000000E   0x07DB             LSLS     R3,R3,#+31
   \   00000010   0xD4F8             BMI      ??IRTC_GetClock_0
    134              reg_days    = RTC_DAYS;
   \   00000012   0x884B             LDRH     R3,[R1, #+2]
    135              if (RTC_STATUS & RTC_STATUS_INVAL_BIT_MASK) { continue; }
   \   00000014   0x8A4C             LDRH     R4,[R1, #+18]
   \   00000016   0x07E4             LSLS     R4,R4,#+31
   \   00000018   0xD4F4             BMI      ??IRTC_GetClock_0
    136              reg_hourmin = RTC_HOURMIN;
   \   0000001A   0x888C             LDRH     R4,[R1, #+4]
    137              if (RTC_STATUS & RTC_STATUS_INVAL_BIT_MASK) { continue; }
   \   0000001C   0x8A4D             LDRH     R5,[R1, #+18]
   \   0000001E   0x07ED             LSLS     R5,R5,#+31
   \   00000020   0xD4F0             BMI      ??IRTC_GetClock_0
    138              reg_seconds = RTC_SECONDS;
   \   00000022   0x88CD             LDRH     R5,[R1, #+6]
    139              if (RTC_STATUS & RTC_STATUS_INVAL_BIT_MASK) { continue; }
   \   00000024   0x8A4E             LDRH     R6,[R1, #+18]
   \   00000026   0x07F6             LSLS     R6,R6,#+31
   \   00000028   0xD4EC             BMI      ??IRTC_GetClock_0
    140              break;
    141            } 
    142            /* clock formating                                                          */
    143            ptr->year = (((int16)reg_yearmon>>RTC_YEARMON_YROFST_SHIFT) + BASE_YEAR);
   \   0000002A   0x0411             LSLS     R1,R2,#+16
   \   0000002C   0x1609             ASRS     R1,R1,#+24
   \   0000002E   0x2684             MOVS     R6,#+132
   \   00000030   0x0136             LSLS     R6,R6,#+4        ;; #+2112
   \   00000032   0x1989             ADDS     R1,R1,R6
   \   00000034   0x80C1             STRH     R1,[R0, #+6]
    144            ptr->mon  = ((uint16)reg_yearmon>>RTC_YEARMON_MON_CNT_SHIFT)  & 0x0f;
   \   00000036   0x0711             LSLS     R1,R2,#+28
   \   00000038   0x0F09             LSRS     R1,R1,#+28
   \   0000003A   0x7141             STRB     R1,[R0, #+5]
    145            ptr->day  = ((uint16)reg_days   >>RTC_DAYS_DAY_CNT_SHIFT)     & 0x1f; 
   \   0000003C   0x211F             MOVS     R1,#+31
   \   0000003E   0x001A             MOVS     R2,R3
   \   00000040   0x400A             ANDS     R2,R2,R1
   \   00000042   0x70C2             STRB     R2,[R0, #+3]
    146            ptr->wday = ((uint16)reg_days   >>RTC_DAYS_DOW_SHIFT)         & 0x07;
   \   00000044   0x055A             LSLS     R2,R3,#+21
   \   00000046   0x0F52             LSRS     R2,R2,#+29
   \   00000048   0x7102             STRB     R2,[R0, #+4]
    147            ptr->hour = ((uint16)reg_hourmin>>RTC_HOURMIN_HOUR_CNT_SHIFT) & 0x1f;
   \   0000004A   0x0A22             LSRS     R2,R4,#+8
   \   0000004C   0x4011             ANDS     R1,R1,R2
   \   0000004E   0x7081             STRB     R1,[R0, #+2]
    148            ptr->min  = ((uint16)reg_hourmin>>RTC_HOURMIN_MIN_CNT_SHIFT)  & 0x3f;
   \   00000050   0x213F             MOVS     R1,#+63
   \   00000052   0x400C             ANDS     R4,R4,R1
   \   00000054   0x7044             STRB     R4,[R0, #+1]
    149            ptr->sec  = ((uint16)reg_seconds>>RTC_SECONDS_SEC_CNT_SHIFT)  & 0x3f;
   \   00000056   0x4029             ANDS     R1,R1,R5
   \   00000058   0x7001             STRB     R1,[R0, #+0]
    150          }
   \   0000005A   0xBC71             POP      {R0,R4-R6}
   \   0000005C   0x4770             BX       LR               ;; return
    151          

   \                                 In section .text, align 2, keep-with-next
    152          void IRTC_SetClock (tTIME *ptr)
    153          {
   \                     IRTC_SetClock: (+1)
   \   00000000   0xB478             PUSH     {R3-R6}
    154            register int16 tmp = ptr->year - BASE_YEAR;
   \   00000002   0x88C1             LDRH     R1,[R0, #+6]
   \   00000004   0x....             LDR      R2,??DataTable5_3  ;; 0xfffff7c0
   \   00000006   0x1889             ADDS     R1,R1,R2
   \   00000008   0x2480             MOVS     R4,#+128
   \   0000000A   0x....             LDR      R2,??DataTable5_2  ;; 0x40050000
   \   0000000C   0x2302             MOVS     R3,#+2
   \   0000000E   0x2602             MOVS     R6,#+2
   \   00000010   0xE000             B        ??IRTC_SetClock_0
    155            
    156            IRTC_LockUnlock();
   \                     ??IRTC_SetClock_1: (+1)
   \   00000012   0x7494             STRB     R4,[R2, #+18]
   \                     ??IRTC_SetClock_0: (+1)
   \   00000014   0x8A55             LDRH     R5,[R2, #+18]
   \   00000016   0x4235             TST      R5,R6
   \   00000018   0xD0FB             BEQ      ??IRTC_SetClock_1
   \                     ??IRTC_SetClock_2: (+1)
   \   0000001A   0x8A54             LDRH     R4,[R2, #+18]
   \   0000001C   0x421C             TST      R4,R3
   \   0000001E   0xD008             BEQ      ??IRTC_SetClock_3
   \   00000020   0x2400             MOVS     R4,#+0
   \   00000022   0x7494             STRB     R4,[R2, #+18]
   \   00000024   0x2440             MOVS     R4,#+64
   \   00000026   0x7494             STRB     R4,[R2, #+18]
   \   00000028   0x24C0             MOVS     R4,#+192
   \   0000002A   0x7494             STRB     R4,[R2, #+18]
   \   0000002C   0x2480             MOVS     R4,#+128
   \   0000002E   0x7494             STRB     R4,[R2, #+18]
   \   00000030   0xE7F3             B        ??IRTC_SetClock_2
    157            while (1)
    158            {  
    159              if (RTC_STATUS & RTC_STATUS_INVAL_BIT_MASK) { continue; }
   \                     ??IRTC_SetClock_3: (+1)
   \   00000032   0x8A53             LDRH     R3,[R2, #+18]
   \   00000034   0x07DB             LSLS     R3,R3,#+31
   \   00000036   0xD4FC             BMI      ??IRTC_SetClock_3
    160              RTC_YEARMON = RTC_YEARMON_YROFST(tmp)|RTC_YEARMON_MON_CNT(ptr->mon);
   \   00000038   0x020B             LSLS     R3,R1,#+8
   \   0000003A   0x7944             LDRB     R4,[R0, #+5]
   \   0000003C   0x0724             LSLS     R4,R4,#+28
   \   0000003E   0x0F24             LSRS     R4,R4,#+28
   \   00000040   0x431C             ORRS     R4,R4,R3
   \   00000042   0x8014             STRH     R4,[R2, #+0]
    161              if (RTC_STATUS & RTC_STATUS_INVAL_BIT_MASK) { continue; }
   \   00000044   0x8A53             LDRH     R3,[R2, #+18]
   \   00000046   0x07DB             LSLS     R3,R3,#+31
   \   00000048   0xD4F3             BMI      ??IRTC_SetClock_3
    162              RTC_DAYS    = RTC_DAYS_DAY_CNT(ptr->day)|RTC_DAYS_DOW(ptr->wday);
   \   0000004A   0x78C3             LDRB     R3,[R0, #+3]
   \   0000004C   0x06DB             LSLS     R3,R3,#+27
   \   0000004E   0x0EDB             LSRS     R3,R3,#+27
   \   00000050   0x7904             LDRB     R4,[R0, #+4]
   \   00000052   0x0224             LSLS     R4,R4,#+8
   \   00000054   0x25E0             MOVS     R5,#+224
   \   00000056   0x00ED             LSLS     R5,R5,#+3        ;; #+1792
   \   00000058   0x4025             ANDS     R5,R5,R4
   \   0000005A   0x431D             ORRS     R5,R5,R3
   \   0000005C   0x8055             STRH     R5,[R2, #+2]
    163              if (RTC_STATUS & RTC_STATUS_INVAL_BIT_MASK) { continue; }
   \   0000005E   0x8A53             LDRH     R3,[R2, #+18]
   \   00000060   0x07DB             LSLS     R3,R3,#+31
   \   00000062   0xD4E6             BMI      ??IRTC_SetClock_3
    164              RTC_HOURMIN = RTC_HOURMIN_HOUR_CNT(ptr->hour)|RTC_HOURMIN_MIN_CNT(ptr->min); 
   \   00000064   0x233F             MOVS     R3,#+63
   \   00000066   0x7884             LDRB     R4,[R0, #+2]
   \   00000068   0x0224             LSLS     R4,R4,#+8
   \   0000006A   0x25F8             MOVS     R5,#+248
   \   0000006C   0x016D             LSLS     R5,R5,#+5        ;; #+7936
   \   0000006E   0x4025             ANDS     R5,R5,R4
   \   00000070   0x7844             LDRB     R4,[R0, #+1]
   \   00000072   0x401C             ANDS     R4,R4,R3
   \   00000074   0x432C             ORRS     R4,R4,R5
   \   00000076   0x8094             STRH     R4,[R2, #+4]
    165              if (RTC_STATUS & RTC_STATUS_INVAL_BIT_MASK) { continue; }
   \   00000078   0x8A54             LDRH     R4,[R2, #+18]
   \   0000007A   0x07E4             LSLS     R4,R4,#+31
   \   0000007C   0xD4D9             BMI      ??IRTC_SetClock_3
    166              RTC_SECONDS = RTC_SECONDS_SEC_CNT(ptr->sec);
   \   0000007E   0x7804             LDRB     R4,[R0, #+0]
   \   00000080   0x4023             ANDS     R3,R3,R4
   \   00000082   0x80D3             STRH     R3,[R2, #+6]
    167              if (RTC_STATUS & RTC_STATUS_INVAL_BIT_MASK) { continue; }
   \   00000084   0x8A53             LDRH     R3,[R2, #+18]
   \   00000086   0x07DB             LSLS     R3,R3,#+31
   \   00000088   0xD4D3             BMI      ??IRTC_SetClock_3
    168              break;
    169            } 
    170          }
   \   0000008A   0xBC71             POP      {R0,R4-R6}
   \   0000008C   0x4770             BX       LR               ;; return
    171          

   \                                 In section .text, align 2, keep-with-next
    172          void IRTC_WrBbRam (void *src, uint8 size)
    173          {                                                              
   \                     IRTC_WrBbRam: (+1)
   \   00000000   0xB438             PUSH     {R3-R5}
    174            register uint8 *ps = src, *pd=(uint8*)IRTC_BbRam;
   \   00000002   0x....             LDR      R2,??DataTable5_4  ;; 0x40051000
    175            if (size > sizeof(IRTC_BbRam)) size = sizeof(IRTC_BbRam); 
   \   00000004   0x2921             CMP      R1,#+33
   \   00000006   0xD303             BCC      ??IRTC_WrBbRam_0
   \   00000008   0x2120             MOVS     R1,#+32
   \   0000000A   0xE001             B        ??IRTC_WrBbRam_0
    176            IRTC_LockUnlock();                                           
   \                     ??IRTC_WrBbRam_1: (+1)
   \   0000000C   0x2480             MOVS     R4,#+128
   \   0000000E   0x701C             STRB     R4,[R3, #+0]
   \                     ??IRTC_WrBbRam_0: (+1)
   \   00000010   0x2402             MOVS     R4,#+2
   \   00000012   0x....             LDR      R3,??DataTable5_5  ;; 0x40050012
   \   00000014   0x881D             LDRH     R5,[R3, #+0]
   \   00000016   0x4225             TST      R5,R4
   \   00000018   0xD0F8             BEQ      ??IRTC_WrBbRam_1
   \                     ??IRTC_WrBbRam_2: (+1)
   \   0000001A   0x881D             LDRH     R5,[R3, #+0]
   \   0000001C   0x4225             TST      R5,R4
   \   0000001E   0xD109             BNE      ??IRTC_WrBbRam_3
   \   00000020   0x2900             CMP      R1,#+0
   \   00000022   0xD005             BEQ      ??IRTC_WrBbRam_4
    177            while (size--) *pd++ = *ps++;
   \                     ??IRTC_WrBbRam_5: (+1)
   \   00000024   0x7803             LDRB     R3,[R0, #+0]
   \   00000026   0x7013             STRB     R3,[R2, #+0]
   \   00000028   0x1C40             ADDS     R0,R0,#+1
   \   0000002A   0x1C52             ADDS     R2,R2,#+1
   \   0000002C   0x1E49             SUBS     R1,R1,#+1
   \   0000002E   0xD1F9             BNE      ??IRTC_WrBbRam_5
    178          }
   \                     ??IRTC_WrBbRam_4: (+1)
   \   00000030   0xBC31             POP      {R0,R4,R5}
   \   00000032   0x4770             BX       LR               ;; return
   \                     ??IRTC_WrBbRam_3: (+1)
   \   00000034   0x2500             MOVS     R5,#+0
   \   00000036   0x701D             STRB     R5,[R3, #+0]
   \   00000038   0x2540             MOVS     R5,#+64
   \   0000003A   0x701D             STRB     R5,[R3, #+0]
   \   0000003C   0x25C0             MOVS     R5,#+192
   \   0000003E   0x701D             STRB     R5,[R3, #+0]
   \   00000040   0x2580             MOVS     R5,#+128
   \   00000042   0x701D             STRB     R5,[R3, #+0]
   \   00000044   0xE7E9             B        ??IRTC_WrBbRam_2
   \   00000046                      REQUIRE IRTC_BbRam
    179          

   \                                 In section .text, align 2, keep-with-next
    180          void IRTC_RdBbRam (void *dst, uint8 size)
    181          {                                                              
    182            register uint8 *pd = dst, *ps=(uint8*)IRTC_BbRam;
   \                     IRTC_RdBbRam: (+1)
   \   00000000   0x....             LDR      R2,??DataTable5_4  ;; 0x40051000
    183            if (size > sizeof(IRTC_BbRam)) size = sizeof(IRTC_BbRam); 
   \   00000002   0x2921             CMP      R1,#+33
   \   00000004   0xD305             BCC      ??IRTC_RdBbRam_0
   \   00000006   0x2120             MOVS     R1,#+32
   \                     ??IRTC_RdBbRam_1: (+1)
   \   00000008   0x1E49             SUBS     R1,R1,#+1
    184            while (size--) *pd++ = *ps++;
   \   0000000A   0x7813             LDRB     R3,[R2, #+0]
   \   0000000C   0x7003             STRB     R3,[R0, #+0]
   \   0000000E   0x1C52             ADDS     R2,R2,#+1
   \   00000010   0x1C40             ADDS     R0,R0,#+1
   \                     ??IRTC_RdBbRam_0: (+1)
   \   00000012   0xB2C9             UXTB     R1,R1
   \   00000014   0x2900             CMP      R1,#+0
   \   00000016   0xD1F7             BNE      ??IRTC_RdBbRam_1
    185          }
   \   00000018   0x4770             BX       LR               ;; return
   \   0000001A                      REQUIRE IRTC_BbRam
    186          
    187          /******************************************************************************
    188           * interrupt functions definitions                                            *
    189           ******************************************************************************/ 
    190          #pragma diag_suppress=Pe550

   \                                 In section .text, align 4, keep-with-next
    191          void IRTC_isr(void)
    192          {
   \                     IRTC_isr: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
    193            static tTAMPER_LOG log;
    194            static tTIME       tmp;
    195            register uint16    reg_ier, reg_tamper_scr, reg_isr;
    196            
    197            /* read RTC registers and store their values in variables - we're loading   */
    198            /* variables by content of registers to minimize number of read operations  */
    199            reg_ier = RTC_IER; reg_tamper_scr = RTC_TAMPER_SCR; reg_isr = RTC_ISR;
   \   00000004   0x4C4B             LDR      R4,??IRTC_isr_0  ;; 0x40050012
   \   00000006   0x88A7             LDRH     R7,[R4, #+4]
   \   00000008   0x8C20             LDRH     R0,[R4, #+32]
   \   0000000A   0x9001             STR      R0,[SP, #+4]
   \   0000000C   0x8860             LDRH     R0,[R4, #+2]
   \   0000000E   0x9000             STR      R0,[SP, #+0]
   \   00000010   0x2602             MOVS     R6,#+2
   \   00000012   0x2102             MOVS     R1,#+2
   \   00000014   0xE001             B        ??IRTC_isr_1
    200          
    201            IRTC_LockUnlock();
   \                     ??IRTC_isr_2: (+1)
   \   00000016   0x2080             MOVS     R0,#+128
   \   00000018   0x7020             STRB     R0,[R4, #+0]
   \                     ??IRTC_isr_1: (+1)
   \   0000001A   0x8820             LDRH     R0,[R4, #+0]
   \   0000001C   0x4208             TST      R0,R1
   \   0000001E   0xD0FA             BEQ      ??IRTC_isr_2
   \                     ??IRTC_isr_3: (+1)
   \   00000020   0x8820             LDRH     R0,[R4, #+0]
   \   00000022   0x4208             TST      R0,R1
   \   00000024   0xD008             BEQ      ??IRTC_isr_4
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0x7020             STRB     R0,[R4, #+0]
   \   0000002A   0x2040             MOVS     R0,#+64
   \   0000002C   0x7020             STRB     R0,[R4, #+0]
   \   0000002E   0x20C0             MOVS     R0,#+192
   \   00000030   0x7020             STRB     R0,[R4, #+0]
   \   00000032   0x2080             MOVS     R0,#+128
   \   00000034   0x7020             STRB     R0,[R4, #+0]
   \   00000036   0xE7F3             B        ??IRTC_isr_3
   \                     ??IRTC_isr_4: (+1)
   \   00000038   0x4D3F             LDR      R5,??IRTC_isr_0+0x4
   \   0000003A   0x07F8             LSLS     R0,R7,#+31
   \   0000003C   0xD400             BMI      .+4
   \   0000003E   0xE0AF             B        ??IRTC_isr_5
    202            /* TAMPER pin callback processing                                           */
    203            if(reg_ier & RTC_IER_TAMPER_IE_MASK)  
    204            {    
    205              /* TAMPER0 pin                                                            */
    206              if((reg_tamper_scr & RTC_TAMPER_SCR_TMPR_EN (TAMPER0_PIN)) &&
    207                 (reg_tamper_scr & RTC_TAMPER_SCR_TMPR_STS(TAMPER0_PIN)))
   \   00000040   0x20FF             MOVS     R0,#+255
   \   00000042   0x1C80             ADDS     R0,R0,#+2        ;; #+257
   \   00000044   0x9901             LDR      R1,[SP, #+4]
   \   00000046   0x4001             ANDS     R1,R1,R0
   \   00000048   0x4281             CMP      R1,R0
   \   0000004A   0xD133             BNE      ??IRTC_isr_6
   \   0000004C   0x2102             MOVS     R1,#+2
   \   0000004E   0xE001             B        ??IRTC_isr_7
    208              {
    209                IRTC_GetTamperLog (&log);
   \                     ??IRTC_isr_8: (+1)
   \   00000050   0x2080             MOVS     R0,#+128
   \   00000052   0x7020             STRB     R0,[R4, #+0]
   \                     ??IRTC_isr_7: (+1)
   \   00000054   0x8820             LDRH     R0,[R4, #+0]
   \   00000056   0x4208             TST      R0,R1
   \   00000058   0xD0FA             BEQ      ??IRTC_isr_8
   \                     ??IRTC_isr_9: (+1)
   \   0000005A   0x8820             LDRH     R0,[R4, #+0]
   \   0000005C   0x4208             TST      R0,R1
   \   0000005E   0xD008             BEQ      ??IRTC_isr_10
   \   00000060   0x2000             MOVS     R0,#+0
   \   00000062   0x7020             STRB     R0,[R4, #+0]
   \   00000064   0x2040             MOVS     R0,#+64
   \   00000066   0x7020             STRB     R0,[R4, #+0]
   \   00000068   0x20C0             MOVS     R0,#+192
   \   0000006A   0x7020             STRB     R0,[R4, #+0]
   \   0000006C   0x2080             MOVS     R0,#+128
   \   0000006E   0x7020             STRB     R0,[R4, #+0]
   \   00000070   0xE7F3             B        ??IRTC_isr_9
   \                     ??IRTC_isr_10: (+1)
   \   00000072   0x8DE1             LDRH     R1,[R4, #+46]
   \   00000074   0x201F             MOVS     R0,#+31
   \   00000076   0x000A             MOVS     R2,R1
   \   00000078   0x4002             ANDS     R2,R2,R0
   \   0000007A   0x70AA             STRB     R2,[R5, #+2]
   \   0000007C   0x094A             LSRS     R2,R1,#+5
   \   0000007E   0x4010             ANDS     R0,R0,R2
   \   00000080   0x70E8             STRB     R0,[R5, #+3]
   \   00000082   0x0488             LSLS     R0,R1,#+18
   \   00000084   0x0F00             LSRS     R0,R0,#+28
   \   00000086   0x7128             STRB     R0,[R5, #+4]
   \   00000088   0x8DE1             LDRH     R1,[R4, #+46]
   \   0000008A   0x203F             MOVS     R0,#+63
   \   0000008C   0x000A             MOVS     R2,R1
   \   0000008E   0x4002             ANDS     R2,R2,R0
   \   00000090   0x702A             STRB     R2,[R5, #+0]
   \   00000092   0x098A             LSRS     R2,R1,#+6
   \   00000094   0x4010             ANDS     R0,R0,R2
   \   00000096   0x7068             STRB     R0,[R5, #+1]
   \   00000098   0x2001             MOVS     R0,#+1
   \   0000009A   0x0489             LSLS     R1,R1,#+18
   \   0000009C   0x0F89             LSRS     R1,R1,#+30
   \   0000009E   0x4088             LSLS     R0,R0,R1
   \   000000A0   0x7168             STRB     R0,[R5, #+5]
    210                ioseth (RTC_TAMPER_SCR,RTC_TAMPER_SCR_TMPR_STS(TAMPER0_PIN));
   \   000000A2   0x0DA0             LSRS     R0,R4,#+22
   \   000000A4   0x....             LDR      R1,??DataTable6  ;; 0x48050014
   \   000000A6   0x83C8             STRH     R0,[R1, #+30]
    211                if (pCallbackIRTC != NULL) { pCallbackIRTC(IRTC_TAMPER0_CALLBACK, &log); }
   \   000000A8   0x68AA             LDR      R2,[R5, #+8]
   \   000000AA   0x0010             MOVS     R0,R2
   \   000000AC   0xD002             BEQ      ??IRTC_isr_6
   \   000000AE   0x0029             MOVS     R1,R5
   \   000000B0   0x2001             MOVS     R0,#+1
   \   000000B2   0x4790             BLX      R2
    212              }
    213              /* TAMPER1 pin                                                            */
    214              if((reg_tamper_scr & RTC_TAMPER_SCR_TMPR_EN (TAMPER1_PIN)) &&
    215                 (reg_tamper_scr & RTC_TAMPER_SCR_TMPR_STS(TAMPER1_PIN)))
   \                     ??IRTC_isr_6: (+1)
   \   000000B4   0x....             LDR      R0,??DataTable6_1  ;; 0x202
   \   000000B6   0x9901             LDR      R1,[SP, #+4]
   \   000000B8   0x4001             ANDS     R1,R1,R0
   \   000000BA   0x4281             CMP      R1,R0
   \   000000BC   0xD133             BNE      ??IRTC_isr_11
   \   000000BE   0x2102             MOVS     R1,#+2
   \   000000C0   0xE001             B        ??IRTC_isr_12
    216              {
    217                IRTC_GetTamperLog (&log);
   \                     ??IRTC_isr_13: (+1)
   \   000000C2   0x2080             MOVS     R0,#+128
   \   000000C4   0x7020             STRB     R0,[R4, #+0]
   \                     ??IRTC_isr_12: (+1)
   \   000000C6   0x8820             LDRH     R0,[R4, #+0]
   \   000000C8   0x4208             TST      R0,R1
   \   000000CA   0xD0FA             BEQ      ??IRTC_isr_13
   \                     ??IRTC_isr_14: (+1)
   \   000000CC   0x8820             LDRH     R0,[R4, #+0]
   \   000000CE   0x4208             TST      R0,R1
   \   000000D0   0xD008             BEQ      ??IRTC_isr_15
   \   000000D2   0x2000             MOVS     R0,#+0
   \   000000D4   0x7020             STRB     R0,[R4, #+0]
   \   000000D6   0x2040             MOVS     R0,#+64
   \   000000D8   0x7020             STRB     R0,[R4, #+0]
   \   000000DA   0x20C0             MOVS     R0,#+192
   \   000000DC   0x7020             STRB     R0,[R4, #+0]
   \   000000DE   0x2080             MOVS     R0,#+128
   \   000000E0   0x7020             STRB     R0,[R4, #+0]
   \   000000E2   0xE7F3             B        ??IRTC_isr_14
   \                     ??IRTC_isr_15: (+1)
   \   000000E4   0x8DE1             LDRH     R1,[R4, #+46]
   \   000000E6   0x201F             MOVS     R0,#+31
   \   000000E8   0x000A             MOVS     R2,R1
   \   000000EA   0x4002             ANDS     R2,R2,R0
   \   000000EC   0x70AA             STRB     R2,[R5, #+2]
   \   000000EE   0x094A             LSRS     R2,R1,#+5
   \   000000F0   0x4010             ANDS     R0,R0,R2
   \   000000F2   0x70E8             STRB     R0,[R5, #+3]
   \   000000F4   0x0488             LSLS     R0,R1,#+18
   \   000000F6   0x0F00             LSRS     R0,R0,#+28
   \   000000F8   0x7128             STRB     R0,[R5, #+4]
   \   000000FA   0x8DE1             LDRH     R1,[R4, #+46]
   \   000000FC   0x203F             MOVS     R0,#+63
   \   000000FE   0x000A             MOVS     R2,R1
   \   00000100   0x4002             ANDS     R2,R2,R0
   \   00000102   0x702A             STRB     R2,[R5, #+0]
   \   00000104   0x098A             LSRS     R2,R1,#+6
   \   00000106   0x4010             ANDS     R0,R0,R2
   \   00000108   0x7068             STRB     R0,[R5, #+1]
   \   0000010A   0x2001             MOVS     R0,#+1
   \   0000010C   0x0489             LSLS     R1,R1,#+18
   \   0000010E   0x0F89             LSRS     R1,R1,#+30
   \   00000110   0x4088             LSLS     R0,R0,R1
   \   00000112   0x7168             STRB     R0,[R5, #+5]
    218                ioseth (RTC_TAMPER_SCR,RTC_TAMPER_SCR_TMPR_STS(TAMPER1_PIN));
   \   00000114   0x0D60             LSRS     R0,R4,#+21
   \   00000116   0x....             LDR      R1,??DataTable6  ;; 0x48050014
   \   00000118   0x83C8             STRH     R0,[R1, #+30]
    219                if (pCallbackIRTC != NULL) { pCallbackIRTC(IRTC_TAMPER1_CALLBACK, &log); }
   \   0000011A   0x68AA             LDR      R2,[R5, #+8]
   \   0000011C   0x0010             MOVS     R0,R2
   \   0000011E   0xD002             BEQ      ??IRTC_isr_11
   \   00000120   0x0029             MOVS     R1,R5
   \   00000122   0x2002             MOVS     R0,#+2
   \   00000124   0x4790             BLX      R2
    220              }
    221              /* TAMPER2 pin                                                            */
    222              if((reg_tamper_scr & RTC_TAMPER_SCR_TMPR_EN (TAMPER2_PIN)) &&
    223                 (reg_tamper_scr & RTC_TAMPER_SCR_TMPR_STS(TAMPER2_PIN)))
   \                     ??IRTC_isr_11: (+1)
   \   00000126   0x....             LDR      R0,??DataTable6_2  ;; 0x404
   \   00000128   0x9901             LDR      R1,[SP, #+4]
   \   0000012A   0x4001             ANDS     R1,R1,R0
   \   0000012C   0x4281             CMP      R1,R0
   \   0000012E   0xD137             BNE      ??IRTC_isr_5
   \   00000130   0x2102             MOVS     R1,#+2
   \   00000132   0xE005             B        ??IRTC_isr_16
   \                     ??IRTC_isr_0:
   \   00000134   0x40050012         DC32     0x40050012
   \   00000138   0x........         DC32     ??log
    224              {
    225                IRTC_GetTamperLog (&log);
   \                     ??IRTC_isr_17: (+1)
   \   0000013C   0x2080             MOVS     R0,#+128
   \   0000013E   0x7020             STRB     R0,[R4, #+0]
   \                     ??IRTC_isr_16: (+1)
   \   00000140   0x8820             LDRH     R0,[R4, #+0]
   \   00000142   0x4208             TST      R0,R1
   \   00000144   0xD0FA             BEQ      ??IRTC_isr_17
   \                     ??IRTC_isr_18: (+1)
   \   00000146   0x8820             LDRH     R0,[R4, #+0]
   \   00000148   0x4208             TST      R0,R1
   \   0000014A   0xD008             BEQ      ??IRTC_isr_19
   \   0000014C   0x2000             MOVS     R0,#+0
   \   0000014E   0x7020             STRB     R0,[R4, #+0]
   \   00000150   0x2040             MOVS     R0,#+64
   \   00000152   0x7020             STRB     R0,[R4, #+0]
   \   00000154   0x20C0             MOVS     R0,#+192
   \   00000156   0x7020             STRB     R0,[R4, #+0]
   \   00000158   0x2080             MOVS     R0,#+128
   \   0000015A   0x7020             STRB     R0,[R4, #+0]
   \   0000015C   0xE7F3             B        ??IRTC_isr_18
   \                     ??IRTC_isr_19: (+1)
   \   0000015E   0x8DE1             LDRH     R1,[R4, #+46]
   \   00000160   0x201F             MOVS     R0,#+31
   \   00000162   0x000A             MOVS     R2,R1
   \   00000164   0x4002             ANDS     R2,R2,R0
   \   00000166   0x70AA             STRB     R2,[R5, #+2]
   \   00000168   0x094A             LSRS     R2,R1,#+5
   \   0000016A   0x4010             ANDS     R0,R0,R2
   \   0000016C   0x70E8             STRB     R0,[R5, #+3]
   \   0000016E   0x0488             LSLS     R0,R1,#+18
   \   00000170   0x0F00             LSRS     R0,R0,#+28
   \   00000172   0x7128             STRB     R0,[R5, #+4]
   \   00000174   0x8DE1             LDRH     R1,[R4, #+46]
   \   00000176   0x203F             MOVS     R0,#+63
   \   00000178   0x000A             MOVS     R2,R1
   \   0000017A   0x4002             ANDS     R2,R2,R0
   \   0000017C   0x702A             STRB     R2,[R5, #+0]
   \   0000017E   0x098A             LSRS     R2,R1,#+6
   \   00000180   0x4010             ANDS     R0,R0,R2
   \   00000182   0x7068             STRB     R0,[R5, #+1]
   \   00000184   0x2001             MOVS     R0,#+1
   \   00000186   0x0489             LSLS     R1,R1,#+18
   \   00000188   0x0F89             LSRS     R1,R1,#+30
   \   0000018A   0x4088             LSLS     R0,R0,R1
   \   0000018C   0x7168             STRB     R0,[R5, #+5]
    226                ioseth (RTC_TAMPER_SCR,RTC_TAMPER_SCR_TMPR_STS(TAMPER2_PIN));
   \   0000018E   0x0D20             LSRS     R0,R4,#+20
   \   00000190   0x....             LDR      R1,??DataTable6  ;; 0x48050014
   \   00000192   0x83C8             STRH     R0,[R1, #+30]
    227                if (pCallbackIRTC != NULL) { pCallbackIRTC(IRTC_TAMPER2_CALLBACK, &log); }
   \   00000194   0x68AA             LDR      R2,[R5, #+8]
   \   00000196   0x0010             MOVS     R0,R2
   \   00000198   0xD002             BEQ      ??IRTC_isr_5
   \   0000019A   0x0029             MOVS     R1,R5
   \   0000019C   0x2004             MOVS     R0,#+4
   \   0000019E   0x4790             BLX      R2
    228              }
    229            }
    230            IRTC_GetClock (&tmp);
   \                     ??IRTC_isr_5: (+1)
   \   000001A0   0x0028             MOVS     R0,R5
   \   000001A2   0x300C             ADDS     R0,R0,#+12
   \   000001A4   0x.... 0x....      BL       IRTC_GetClock
    231            /* ALARM callback processing                                                */
    232            if((reg_ier & RTC_IER_ALM_IE_MASK) && (reg_isr & RTC_ISR_ALM_IS_MASK))  
   \   000001A8   0x0778             LSLS     R0,R7,#+29
   \   000001AA   0xD50C             BPL      ??IRTC_isr_20
   \   000001AC   0x9800             LDR      R0,[SP, #+0]
   \   000001AE   0x0740             LSLS     R0,R0,#+29
   \   000001B0   0xD509             BPL      ??IRTC_isr_20
    233            {
    234              ioseth (RTC_ISR,RTC_ISR_ALM_IS_MASK);
   \   000001B2   0x2004             MOVS     R0,#+4
   \   000001B4   0x....             LDR      R1,??DataTable6  ;; 0x48050014
   \   000001B6   0x8008             STRH     R0,[R1, #+0]
    235              if (pCallbackIRTC != NULL)  { pCallbackIRTC(IRTC_ALM_CALLBACK, &tmp);   }
   \   000001B8   0x68AA             LDR      R2,[R5, #+8]
   \   000001BA   0x0010             MOVS     R0,R2
   \   000001BC   0xD003             BEQ      ??IRTC_isr_20
   \   000001BE   0x0029             MOVS     R1,R5
   \   000001C0   0x310C             ADDS     R1,R1,#+12
   \   000001C2   0x2010             MOVS     R0,#+16
   \   000001C4   0x4790             BLX      R2
    236            }    
    237            /* DAY callback processing                                                  */
    238            if((reg_ier & RTC_IER_DAY_IE_MASK) && (reg_isr & RTC_ISR_DAY_IS_MASK))  
   \                     ??IRTC_isr_20: (+1)
   \   000001C6   0x0738             LSLS     R0,R7,#+28
   \   000001C8   0xD50C             BPL      ??IRTC_isr_21
   \   000001CA   0x9800             LDR      R0,[SP, #+0]
   \   000001CC   0x0700             LSLS     R0,R0,#+28
   \   000001CE   0xD509             BPL      ??IRTC_isr_21
    239            {
    240              ioseth (RTC_ISR,RTC_ISR_DAY_IS_MASK);
   \   000001D0   0x2008             MOVS     R0,#+8
   \   000001D2   0x....             LDR      R1,??DataTable6  ;; 0x48050014
   \   000001D4   0x8008             STRH     R0,[R1, #+0]
    241              if (pCallbackIRTC != NULL)  { pCallbackIRTC(IRTC_DAY_CALLBACK, &tmp);   }
   \   000001D6   0x68AA             LDR      R2,[R5, #+8]
   \   000001D8   0x0010             MOVS     R0,R2
   \   000001DA   0xD003             BEQ      ??IRTC_isr_21
   \   000001DC   0x0029             MOVS     R1,R5
   \   000001DE   0x310C             ADDS     R1,R1,#+12
   \   000001E0   0x2020             MOVS     R0,#+32
   \   000001E2   0x4790             BLX      R2
    242            }    
    243            /* HOUR callback processing                                                 */
    244            if((reg_ier & RTC_IER_HOUR_IE_MASK) && (reg_isr & RTC_ISR_HOUR_IS_MASK))  
   \                     ??IRTC_isr_21: (+1)
   \   000001E4   0x06F8             LSLS     R0,R7,#+27
   \   000001E6   0xD50C             BPL      ??IRTC_isr_22
   \   000001E8   0x9800             LDR      R0,[SP, #+0]
   \   000001EA   0x06C0             LSLS     R0,R0,#+27
   \   000001EC   0xD509             BPL      ??IRTC_isr_22
    245            {
    246              ioseth (RTC_ISR,RTC_ISR_HOUR_IS_MASK);
   \   000001EE   0x2010             MOVS     R0,#+16
   \   000001F0   0x....             LDR      R1,??DataTable6  ;; 0x48050014
   \   000001F2   0x8008             STRH     R0,[R1, #+0]
    247              if (pCallbackIRTC != NULL)  { pCallbackIRTC(IRTC_HOUR_CALLBACK, &tmp);  }
   \   000001F4   0x68AA             LDR      R2,[R5, #+8]
   \   000001F6   0x0010             MOVS     R0,R2
   \   000001F8   0xD003             BEQ      ??IRTC_isr_22
   \   000001FA   0x0029             MOVS     R1,R5
   \   000001FC   0x310C             ADDS     R1,R1,#+12
   \   000001FE   0x2040             MOVS     R0,#+64
   \   00000200   0x4790             BLX      R2
    248            }
    249            /* MIN callback processing                                                  */
    250            if((reg_ier & RTC_IER_MIN_IE_MASK) && (reg_isr & RTC_ISR_MIN_IS_MASK))  
   \                     ??IRTC_isr_22: (+1)
   \   00000202   0x06B8             LSLS     R0,R7,#+26
   \   00000204   0xD50C             BPL      ??IRTC_isr_23
   \   00000206   0x9800             LDR      R0,[SP, #+0]
   \   00000208   0x0680             LSLS     R0,R0,#+26
   \   0000020A   0xD509             BPL      ??IRTC_isr_23
    251            {
    252              ioseth (RTC_ISR,RTC_ISR_MIN_IS_MASK);
   \   0000020C   0x2020             MOVS     R0,#+32
   \   0000020E   0x....             LDR      R1,??DataTable6  ;; 0x48050014
   \   00000210   0x8008             STRH     R0,[R1, #+0]
    253              if (pCallbackIRTC != NULL)  { pCallbackIRTC(IRTC_MIN_CALLBACK, &tmp);   }
   \   00000212   0x68AA             LDR      R2,[R5, #+8]
   \   00000214   0x0010             MOVS     R0,R2
   \   00000216   0xD003             BEQ      ??IRTC_isr_23
   \   00000218   0x0029             MOVS     R1,R5
   \   0000021A   0x310C             ADDS     R1,R1,#+12
   \   0000021C   0x2080             MOVS     R0,#+128
   \   0000021E   0x4790             BLX      R2
    254            }    
    255            /* 1HZ callback processing                                                  */
    256            if((reg_ier & RTC_IER_IE_1HZ_MASK) && (reg_isr & RTC_ISR_IS_1HZ_MASK))  
   \                     ??IRTC_isr_23: (+1)
   \   00000220   0x0678             LSLS     R0,R7,#+25
   \   00000222   0xD50C             BPL      ??IRTC_isr_24
   \   00000224   0x9800             LDR      R0,[SP, #+0]
   \   00000226   0x0640             LSLS     R0,R0,#+25
   \   00000228   0xD509             BPL      ??IRTC_isr_24
    257            {
    258              ioseth (RTC_ISR,RTC_ISR_IS_1HZ_MASK);
   \   0000022A   0x2040             MOVS     R0,#+64
   \   0000022C   0x....             LDR      R1,??DataTable6  ;; 0x48050014
   \   0000022E   0x8008             STRH     R0,[R1, #+0]
    259              if (pCallbackIRTC != NULL)  { pCallbackIRTC(IRTC_1HZ_CALLBACK, &tmp);   }
   \   00000230   0x68AA             LDR      R2,[R5, #+8]
   \   00000232   0x0010             MOVS     R0,R2
   \   00000234   0xD003             BEQ      ??IRTC_isr_24
   \   00000236   0x0029             MOVS     R1,R5
   \   00000238   0x310C             ADDS     R1,R1,#+12
   \   0000023A   0x0DA0             LSRS     R0,R4,#+22
   \   0000023C   0x4790             BLX      R2
    260            }    
    261            /* 2HZ callback processing                                                  */
    262            if((reg_ier & RTC_IER_IE_2HZ_MASK) && (reg_isr & RTC_ISR_IS_2HZ_MASK))  
   \                     ??IRTC_isr_24: (+1)
   \   0000023E   0x0638             LSLS     R0,R7,#+24
   \   00000240   0xD50C             BPL      ??IRTC_isr_25
   \   00000242   0x9800             LDR      R0,[SP, #+0]
   \   00000244   0x0600             LSLS     R0,R0,#+24
   \   00000246   0xD509             BPL      ??IRTC_isr_25
    263            {
    264              ioseth (RTC_ISR,RTC_ISR_IS_2HZ_MASK);
   \   00000248   0x2080             MOVS     R0,#+128
   \   0000024A   0x....             LDR      R1,??DataTable6  ;; 0x48050014
   \   0000024C   0x8008             STRH     R0,[R1, #+0]
    265              if (pCallbackIRTC != NULL)  { pCallbackIRTC(IRTC_2HZ_CALLBACK, &tmp);   }
   \   0000024E   0x68AA             LDR      R2,[R5, #+8]
   \   00000250   0x0010             MOVS     R0,R2
   \   00000252   0xD003             BEQ      ??IRTC_isr_25
   \   00000254   0x0029             MOVS     R1,R5
   \   00000256   0x310C             ADDS     R1,R1,#+12
   \   00000258   0x0D60             LSRS     R0,R4,#+21
   \   0000025A   0x4790             BLX      R2
    266            }    
    267            /* 4HZ callback processing                                                  */
    268            if((reg_ier & RTC_IER_IE_4HZ_MASK) && (reg_isr & RTC_ISR_IS_4HZ_MASK))  
   \                     ??IRTC_isr_25: (+1)
   \   0000025C   0x05F8             LSLS     R0,R7,#+23
   \   0000025E   0xD50C             BPL      ??IRTC_isr_26
   \   00000260   0x9800             LDR      R0,[SP, #+0]
   \   00000262   0x05C0             LSLS     R0,R0,#+23
   \   00000264   0xD509             BPL      ??IRTC_isr_26
    269            {
    270              ioseth (RTC_ISR,RTC_ISR_IS_4HZ_MASK);
   \   00000266   0x0DA0             LSRS     R0,R4,#+22
   \   00000268   0x....             LDR      R1,??DataTable6  ;; 0x48050014
   \   0000026A   0x8008             STRH     R0,[R1, #+0]
    271              if (pCallbackIRTC != NULL)  { pCallbackIRTC(IRTC_4HZ_CALLBACK, &tmp);   }
   \   0000026C   0x68AA             LDR      R2,[R5, #+8]
   \   0000026E   0x0010             MOVS     R0,R2
   \   00000270   0xD003             BEQ      ??IRTC_isr_26
   \   00000272   0x0029             MOVS     R1,R5
   \   00000274   0x310C             ADDS     R1,R1,#+12
   \   00000276   0x0D20             LSRS     R0,R4,#+20
   \   00000278   0x4790             BLX      R2
    272            }    
    273            /* 8HZ callback processing                                                  */
    274            if((reg_ier & RTC_IER_IE_8HZ_MASK) && (reg_isr & RTC_ISR_IS_8HZ_MASK))  
   \                     ??IRTC_isr_26: (+1)
   \   0000027A   0x05B8             LSLS     R0,R7,#+22
   \   0000027C   0xD50C             BPL      ??IRTC_isr_27
   \   0000027E   0x9800             LDR      R0,[SP, #+0]
   \   00000280   0x0580             LSLS     R0,R0,#+22
   \   00000282   0xD509             BPL      ??IRTC_isr_27
    275            {
    276              ioseth (RTC_ISR,RTC_ISR_IS_8HZ_MASK);
   \   00000284   0x0D60             LSRS     R0,R4,#+21
   \   00000286   0x....             LDR      R1,??DataTable6  ;; 0x48050014
   \   00000288   0x8008             STRH     R0,[R1, #+0]
    277              if (pCallbackIRTC != NULL)  { pCallbackIRTC(IRTC_8HZ_CALLBACK, &tmp);   }
   \   0000028A   0x68AA             LDR      R2,[R5, #+8]
   \   0000028C   0x0010             MOVS     R0,R2
   \   0000028E   0xD003             BEQ      ??IRTC_isr_27
   \   00000290   0x0029             MOVS     R1,R5
   \   00000292   0x310C             ADDS     R1,R1,#+12
   \   00000294   0x0CE0             LSRS     R0,R4,#+19
   \   00000296   0x4790             BLX      R2
    278            }
    279            /* 16HZ callback processing                                                 */
    280            if((reg_ier & RTC_IER_IE_16HZ_MASK) && (reg_isr & RTC_ISR_IS_16HZ_MASK))  
   \                     ??IRTC_isr_27: (+1)
   \   00000298   0x0578             LSLS     R0,R7,#+21
   \   0000029A   0xD50C             BPL      ??IRTC_isr_28
   \   0000029C   0x9800             LDR      R0,[SP, #+0]
   \   0000029E   0x0540             LSLS     R0,R0,#+21
   \   000002A0   0xD509             BPL      ??IRTC_isr_28
    281            {
    282              ioseth (RTC_ISR,RTC_ISR_IS_16HZ_MASK);
   \   000002A2   0x0D20             LSRS     R0,R4,#+20
   \   000002A4   0x....             LDR      R1,??DataTable6  ;; 0x48050014
   \   000002A6   0x8008             STRH     R0,[R1, #+0]
    283              if (pCallbackIRTC != NULL)  { pCallbackIRTC(IRTC_16HZ_CALLBACK, &tmp);  }
   \   000002A8   0x68AA             LDR      R2,[R5, #+8]
   \   000002AA   0x0010             MOVS     R0,R2
   \   000002AC   0xD003             BEQ      ??IRTC_isr_28
   \   000002AE   0x0029             MOVS     R1,R5
   \   000002B0   0x310C             ADDS     R1,R1,#+12
   \   000002B2   0x02F0             LSLS     R0,R6,#+11
   \   000002B4   0x4790             BLX      R2
    284            }
    285            /* 32HZ callback processing                                                 */
    286            if((reg_ier & RTC_IER_IE_32HZ_MASK) && (reg_isr & RTC_ISR_IS_32HZ_MASK))  
   \                     ??IRTC_isr_28: (+1)
   \   000002B6   0x0538             LSLS     R0,R7,#+20
   \   000002B8   0xD50C             BPL      ??IRTC_isr_29
   \   000002BA   0x9800             LDR      R0,[SP, #+0]
   \   000002BC   0x0500             LSLS     R0,R0,#+20
   \   000002BE   0xD509             BPL      ??IRTC_isr_29
    287            {
    288              ioseth (RTC_ISR,RTC_ISR_IS_32HZ_MASK);
   \   000002C0   0x0CE0             LSRS     R0,R4,#+19
   \   000002C2   0x....             LDR      R1,??DataTable6  ;; 0x48050014
   \   000002C4   0x8008             STRH     R0,[R1, #+0]
    289              if (pCallbackIRTC != NULL)  { pCallbackIRTC(IRTC_32HZ_CALLBACK, &tmp);  }
   \   000002C6   0x68AA             LDR      R2,[R5, #+8]
   \   000002C8   0x0010             MOVS     R0,R2
   \   000002CA   0xD003             BEQ      ??IRTC_isr_29
   \   000002CC   0x0029             MOVS     R1,R5
   \   000002CE   0x310C             ADDS     R1,R1,#+12
   \   000002D0   0x0330             LSLS     R0,R6,#+12
   \   000002D2   0x4790             BLX      R2
    290            }
    291            /* 64HZ callback processing                                                 */
    292            if((reg_ier & RTC_IER_IE_64HZ_MASK) && (reg_isr & RTC_ISR_IS_64HZ_MASK))  
   \                     ??IRTC_isr_29: (+1)
   \   000002D4   0x04F8             LSLS     R0,R7,#+19
   \   000002D6   0xD50C             BPL      ??IRTC_isr_30
   \   000002D8   0x9800             LDR      R0,[SP, #+0]
   \   000002DA   0x04C0             LSLS     R0,R0,#+19
   \   000002DC   0xD509             BPL      ??IRTC_isr_30
    293            {
    294              ioseth (RTC_ISR,RTC_ISR_IS_64HZ_MASK);
   \   000002DE   0x02F0             LSLS     R0,R6,#+11
   \   000002E0   0x....             LDR      R1,??DataTable6  ;; 0x48050014
   \   000002E2   0x8008             STRH     R0,[R1, #+0]
    295              if (pCallbackIRTC != NULL)  { pCallbackIRTC(IRTC_64HZ_CALLBACK, &tmp);  }
   \   000002E4   0x68AA             LDR      R2,[R5, #+8]
   \   000002E6   0x0010             MOVS     R0,R2
   \   000002E8   0xD003             BEQ      ??IRTC_isr_30
   \   000002EA   0x0029             MOVS     R1,R5
   \   000002EC   0x310C             ADDS     R1,R1,#+12
   \   000002EE   0x0370             LSLS     R0,R6,#+13
   \   000002F0   0x4790             BLX      R2
    296            }
    297            /* 128HZ callback processing                                                */
    298            if((reg_ier & RTC_IER_IE_128HZ_MASK) && (reg_isr & RTC_ISR_IS_128HZ_MASK))  
   \                     ??IRTC_isr_30: (+1)
   \   000002F2   0x04B8             LSLS     R0,R7,#+18
   \   000002F4   0xD50C             BPL      ??IRTC_isr_31
   \   000002F6   0x9800             LDR      R0,[SP, #+0]
   \   000002F8   0x0480             LSLS     R0,R0,#+18
   \   000002FA   0xD509             BPL      ??IRTC_isr_31
    299            {
    300              ioseth (RTC_ISR,RTC_ISR_IS_128HZ_MASK);
   \   000002FC   0x0330             LSLS     R0,R6,#+12
   \   000002FE   0x....             LDR      R1,??DataTable6  ;; 0x48050014
   \   00000300   0x8008             STRH     R0,[R1, #+0]
    301              if (pCallbackIRTC != NULL)  { pCallbackIRTC(IRTC_128HZ_CALLBACK, &tmp); }
   \   00000302   0x68AA             LDR      R2,[R5, #+8]
   \   00000304   0x0010             MOVS     R0,R2
   \   00000306   0xD003             BEQ      ??IRTC_isr_31
   \   00000308   0x0029             MOVS     R1,R5
   \   0000030A   0x310C             ADDS     R1,R1,#+12
   \   0000030C   0x03B0             LSLS     R0,R6,#+14
   \   0000030E   0x4790             BLX      R2
    302            }
    303            /* 256HZ callback processing                                                */
    304            if((reg_ier & RTC_IER_IE_256HZ_MASK) && (reg_isr & RTC_ISR_IS_256HZ_MASK))  
   \                     ??IRTC_isr_31: (+1)
   \   00000310   0x0478             LSLS     R0,R7,#+17
   \   00000312   0xD50C             BPL      ??IRTC_isr_32
   \   00000314   0x9800             LDR      R0,[SP, #+0]
   \   00000316   0x0440             LSLS     R0,R0,#+17
   \   00000318   0xD509             BPL      ??IRTC_isr_32
    305            {
    306              ioseth (RTC_ISR,RTC_ISR_IS_256HZ_MASK);
   \   0000031A   0x0370             LSLS     R0,R6,#+13
   \   0000031C   0x....             LDR      R1,??DataTable6  ;; 0x48050014
   \   0000031E   0x8008             STRH     R0,[R1, #+0]
    307              if (pCallbackIRTC != NULL)  { pCallbackIRTC(IRTC_256HZ_CALLBACK, &tmp); }
   \   00000320   0x68AA             LDR      R2,[R5, #+8]
   \   00000322   0x0010             MOVS     R0,R2
   \   00000324   0xD003             BEQ      ??IRTC_isr_32
   \   00000326   0x0029             MOVS     R1,R5
   \   00000328   0x310C             ADDS     R1,R1,#+12
   \   0000032A   0x03F0             LSLS     R0,R6,#+15
   \   0000032C   0x4790             BLX      R2
    308            }
    309            /* 512HZ callback processing                                                */
    310            if((reg_ier & RTC_IER_IE_512HZ_MASK) && (reg_isr & RTC_ISR_IS_512HZ_MASK))  
   \                     ??IRTC_isr_32: (+1)
   \   0000032E   0x0438             LSLS     R0,R7,#+16
   \   00000330   0xD50C             BPL      ??IRTC_isr_33
   \   00000332   0x9800             LDR      R0,[SP, #+0]
   \   00000334   0x0400             LSLS     R0,R0,#+16
   \   00000336   0xD509             BPL      ??IRTC_isr_33
    311            {
    312              ioseth (RTC_ISR,RTC_ISR_IS_512HZ_MASK);
   \   00000338   0x03B0             LSLS     R0,R6,#+14
   \   0000033A   0x....             LDR      R1,??DataTable6  ;; 0x48050014
   \   0000033C   0x8008             STRH     R0,[R1, #+0]
    313              if (pCallbackIRTC != NULL)  { pCallbackIRTC(IRTC_512HZ_CALLBACK, &tmp); }
   \   0000033E   0x68AA             LDR      R2,[R5, #+8]
   \   00000340   0x0010             MOVS     R0,R2
   \   00000342   0xD003             BEQ      ??IRTC_isr_33
   \   00000344   0x350C             ADDS     R5,R5,#+12
   \   00000346   0x0029             MOVS     R1,R5
   \   00000348   0x0430             LSLS     R0,R6,#+16
   \   0000034A   0x4790             BLX      R2
    314            }      
    315          }
   \                     ??IRTC_isr_33: (+1)
   \   0000034C   0xB003             ADD      SP,SP,#+12
   \   0000034E   0xBDF0             POP      {R4-R7,PC}       ;; return

   \                                 In section .bss, align 4
   \                     ??log:
   \   00000000                      DS8 8
   \   00000008                      DS8 4
   \   0000000C                      DS8 8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x........         DC32     ??log

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0xE000E280         DC32     0xe000e280

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   0xE000E100         DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \   00000000   0xE000E418         DC32     0xe000e418

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_4:
   \   00000000   0x40050010         DC32     0x40050010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_5:
   \   00000000   0x0000FFF7         DC32     0xfff7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_6:
   \   00000000   0x00000F08         DC32     0xf08

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_7:
   \   00000000   0x0000FFFF         DC32     0xffff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_8:
   \   00000000   0x44050016         DC32     0x44050016

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_9:
   \   00000000   0x0000FFF8         DC32     0xfff8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x48050016         DC32     0x48050016

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x0000FF7F         DC32     0xff7f

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0x00000202         DC32     0x202

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x00000404         DC32     0x404

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x40050010         DC32     0x40050010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0x0000FFF7         DC32     0xfff7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   0x00000F08         DC32     0xf08

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x0000FFFF         DC32     0xffff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x44050016         DC32     0x44050016

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0x0000FFF8         DC32     0xfff8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0x40050000         DC32     0x40050000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   0xFFFFF7C0         DC32     0xfffff7c0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \   00000000   0x40051000         DC32     0x40051000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_5:
   \   00000000   0x40050012         DC32     0x40050012

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   0x48050014         DC32     0x48050014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \   00000000   0x00000202         DC32     0x202

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_2:
   \   00000000   0x00000404         DC32     0x404
    316          /******************************************************************************
    317           * End of module                                                              *
    318           ******************************************************************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   IRTC_GetClock
      36   IRTC_Init
       0   IRTC_InstallCallback
       0   IRTC_RdBbRam
      16   IRTC_SetClock
      36   IRTC_WkupInit
      12   IRTC_WrBbRam
      32   IRTC_isr
        32   -- Indirect call
        32   -> IRTC_GetClock


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_2
       4  ??DataTable1_3
       4  ??DataTable1_4
       4  ??DataTable1_5
       4  ??DataTable1_6
       4  ??DataTable1_7
       4  ??DataTable1_8
       4  ??DataTable1_9
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_2
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable4
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_2
       4  ??DataTable5_3
       4  ??DataTable5_4
       4  ??DataTable5_5
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_2
      18  ?Subroutine0
      32  IRTC_BbRam
      94  IRTC_GetClock
     454  IRTC_Init
      40  IRTC_InstallCallback
      26  IRTC_RdBbRam
     142  IRTC_SetClock
     430  IRTC_WkupInit
      70  IRTC_WrBbRam
     848  IRTC_isr
      20  log
          pCallbackIRTC
          tmp

 
    20 bytes in section .bss
    32 bytes in section .bss  (abs)
 2 230 bytes in section .text
 
 2 230 bytes of CODE memory
    52 bytes of DATA memory

Errors: none
Warnings: none
