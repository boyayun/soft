###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.1.6676/W32 for ARM        30/Jan/2016  15:22:36
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\src\toolchain\iar\startup.c
#    Command line =  
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\src\toolchain\iar\startup.c
#        -D NDEBUG -lCN
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\Release\List\
#        -o
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\Release\Obj\
#        --debug --endian=little --cpu=Cortex-M0+ --no_mem_idioms -e --fpu=None
#        --dlib_config "D:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\..\..\..\..\build\iar_6_50\fraclib\
#        -I
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\..\..\..\..\build\iar_6_50\meterlib\
#        -I
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\..\..\..\..\src\fraclib\
#        -I
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\..\..\..\..\src\meterlib\
#        -I
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\..\..\..\..\src\common\
#        -I
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\..\..\..\..\src\drivers\
#        -I
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\..\..\..\..\src\freemaster\
#        -I
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\..\..\..\..\src\projects\_twr_emeter_demo\
#        -Oh --require_prototypes
#    List file    =  
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\Release\List\startup.lst
#    Object file  =  
#        E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\build\iar_6_50\projects\_twr_emeter_demo\Release\Obj\startup.o
#
###############################################################################

E:\TCL\PROJECT\SmartHome\资料\freescale\KMSWDRV_EAR2_2\src\toolchain\iar\startup.c
      1          /*****************************************************************************
      2           * (c) Copyright 2010-2013, Freescale Semiconductor Inc.
      3           * ALL RIGHTS RESERVED.
      4           ***************************************************************************//*!
      5           * @file      startup.c
      6           * @version   1.0.1.0
      7           * @date      May-18-2012      
      8           * @brief     Generic Kinetis startup code.
      9           ******************************************************************************/
     10          #include "startup.h"
     11          
     12          #pragma section = ".data"
     13          #pragma section = ".data_init"
     14          #pragma section = ".bss"
     15          #pragma section = "CodeRelocate"
     16          #pragma section = "CodeRelocateRam" 
     17          
     18          /******************************************************************************
     19           * Startup function definition                                                *
     20           ******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
     21          void startup(void)
     22          {  
     23              /* Declare a counter we'll use in all of the copy loops                   */
     24              unsigned int n;
     25              
     26              /* Get the addresses for the .data section (initialized data section)     */
     27              unsigned char* data_ram = __section_begin(".data");
   \                     startup: (+1)
   \   00000000   0x480F             LDR      R0,??startup_0
     28              unsigned char* data_rom = __section_begin(".data_init");
   \   00000002   0x4910             LDR      R1,??startup_0+0x4
     29              unsigned char* data_rom_end = __section_end(".data_init");
     30              
     31              /* Copy initialized data from ROM to RAM                                  */
     32              n = data_rom_end - data_rom;
   \   00000004   0x4A10             LDR      R2,??startup_0+0x8
   \   00000006   0x1A52             SUBS     R2,R2,R1
   \   00000008   0xD005             BEQ      ??startup_1
     33              while (n--)
     34                *data_ram++ = *data_rom++;
   \                     ??startup_2: (+1)
   \   0000000A   0x780B             LDRB     R3,[R1, #+0]
   \   0000000C   0x7003             STRB     R3,[R0, #+0]
   \   0000000E   0x1C49             ADDS     R1,R1,#+1
   \   00000010   0x1C40             ADDS     R0,R0,#+1
   \   00000012   0x1E52             SUBS     R2,R2,#+1
   \   00000014   0xD1F9             BNE      ??startup_2
     35           
     36              /* Get the addresses for the .bss section (zero-initialized data)         */
     37              unsigned char* bss_start = __section_begin(".bss");
   \                     ??startup_1: (+1)
   \   00000016   0x480D             LDR      R0,??startup_0+0xC
     38              unsigned char* bss_end = __section_end(".bss");
     39              
     40              /* Clear the zero-initialized data section                                */
     41              n = bss_end - bss_start;
   \   00000018   0x490D             LDR      R1,??startup_0+0x10
   \   0000001A   0x1A09             SUBS     R1,R1,R0
   \   0000001C   0xD004             BEQ      ??startup_3
     42              while(n--)
     43                *bss_start++ = 0;    
   \                     ??startup_4: (+1)
   \   0000001E   0x2200             MOVS     R2,#+0
   \   00000020   0x7002             STRB     R2,[R0, #+0]
   \   00000022   0x1C40             ADDS     R0,R0,#+1
   \   00000024   0x1E49             SUBS     R1,R1,#+1
   \   00000026   0xD1FA             BNE      ??startup_4
     44              
     45              /* Get addresses for any code sections that need to be copied from ROM to RAM.
     46               * The IAR tools have a predefined keyword that can be used to mark individual
     47               * functions for execution from RAM. Add "__ramfunc" before the return type in
     48               * the function prototype for any routines you need to execute from RAM instead 
     49               * of ROM. ex: __ramfunc void foo(void);
     50               */
     51              unsigned char* code_relocate_ram = __section_begin("CodeRelocateRam");
   \                     ??startup_3: (+1)
   \   00000028   0x480A             LDR      R0,??startup_0+0x14
     52              unsigned char* code_relocate = __section_begin("CodeRelocate");
   \   0000002A   0x490B             LDR      R1,??startup_0+0x18
     53              unsigned char* code_relocate_end = __section_end("CodeRelocate");
     54              
     55              /* Copy functions from ROM to RAM                                         */
     56              n = code_relocate_end - code_relocate;
   \   0000002C   0x4A0B             LDR      R2,??startup_0+0x1C
   \   0000002E   0x1A52             SUBS     R2,R2,R1
   \   00000030   0xD005             BEQ      ??startup_5
     57              while (n--)
     58                *code_relocate_ram++ = *code_relocate++;
   \                     ??startup_6: (+1)
   \   00000032   0x780B             LDRB     R3,[R1, #+0]
   \   00000034   0x7003             STRB     R3,[R0, #+0]
   \   00000036   0x1C49             ADDS     R1,R1,#+1
   \   00000038   0x1C40             ADDS     R0,R0,#+1
   \   0000003A   0x1E52             SUBS     R2,R2,#+1
   \   0000003C   0xD1F9             BNE      ??startup_6
     59          }
   \                     ??startup_5: (+1)
   \   0000003E   0x4770             BX       LR               ;; return
   \                     ??startup_0:
   \   00000040   0x........         DC32     SFB(`.data`)
   \   00000044   0x........         DC32     SFB(`.data_init`)
   \   00000048   0x........         DC32     SFE(`.data_init`)
   \   0000004C   0x........         DC32     SFB(`.bss`)
   \   00000050   0x........         DC32     SFE(`.bss`)
   \   00000054   0x........         DC32     SFB(CodeRelocateRam)
   \   00000058   0x........         DC32     SFB(CodeRelocate)
   \   0000005C   0x........         DC32     SFE(CodeRelocate)
     60          /******************************************************************************
     61           * End of module                                                              *
     62           ******************************************************************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   startup


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      96  startup

 
 96 bytes in section .text
 
 96 bytes of CODE memory

Errors: none
Warnings: none
